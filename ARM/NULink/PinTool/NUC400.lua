REG=
{
GCR_PDID=1073741824,
GCR_RSTSRC=1073741828,
GCR_IPRSTC1=1073741832,
GCR_IPRSTC2=1073741836,
GCR_IPRSTC3=1073741840,
GCR_BODCR=1073741848,
GCR_TEMPCR=1073741852,
GCR_VCID=1073741856,
GCR_PORCR=1073741860,
GCR_VREFCR=1073741864,
GCR_USBPHYCR=1073741868,
GCR_GPA_MFPL=1073741872,
GCR_GPA_MFPH=1073741876,
GCR_GPB_MFPL=1073741880,
GCR_GPB_MFPH=1073741884,
GCR_GPC_MFPL=1073741888,
GCR_GPC_MFPH=1073741892,
GCR_GPD_MFPL=1073741896,
GCR_GPD_MFPH=1073741900,
GCR_GPE_MFPL=1073741904,
GCR_GPE_MFPH=1073741908,
GCR_GPF_MFPL=1073741912,
GCR_GPF_MFPH=1073741916,
GCR_GPG_MFPL=1073741920,
GCR_GPG_MFPH=1073741924,
GCR_GPH_MFPL=1073741928,
GCR_GPH_MFPH=1073741932,
GCR_GPI_MFPL=1073741936,
GCR_GPI_MFPH=1073741940,
GCR_SRAMFINTCR=1073742016,
GCR_SRAMF=1073742020,
GCR_SRAM0F_ADDR=1073742024,
GCR_SRAM1F_ADDR=1073742028,
GCR_IRCTRIMCTL=1073742064,
GCR_IRCTRIMIEN=1073742068,
GCR_IRCTRIMINT=1073742072,
GCR_REGWRPROT=1073742080,
SCS_SYST_CSR=3758153744,
SCS_SYST_RVR=3758153748,
SCS_SYST_CVR=3758153752,
SCS_CPUID=3758157056,
SCS_ICSR=3758157060,
SCS_AIRCR=3758157068,
SCS_SCR=3758157072,
SCS_SHPR1=3758157080,
SCS_SHPR2=3758157084,
SCS_SHPR3=3758157088,
NVIC_NVIC_ISER0=3758153984,
NVIC_NVIC_ISER1=3758153988,
NVIC_NVIC_ISER2=3758153992,
NVIC_NVIC_ISER3=3758153996,
NVIC_NVIC_ISER4=3758154000,
NVIC_NVIC_ICER0=3758154112,
NVIC_NVIC_ICER1=3758154116,
NVIC_NVIC_ICER2=3758154120,
NVIC_NVIC_ICER3=3758154124,
NVIC_NVIC_ICER4=3758154128,
NVIC_NVIC_ISPR0=3758154240,
NVIC_NVIC_ISPR1=3758154244,
NVIC_NVIC_ISPR2=3758154248,
NVIC_NVIC_ISPR3=3758154252,
NVIC_NVIC_ISPR4=3758154256,
NVIC_NVIC_ICPR0=3758154368,
NVIC_NVIC_ICPR1=3758154372,
NVIC_NVIC_ICPR2=3758154376,
NVIC_NVIC_ICPR3=3758154380,
NVIC_NVIC_ICPR4=3758154384,
NVIC_NVIC_IABR0=3758154496,
NVIC_NVIC_IABR1=3758154500,
NVIC_NVIC_IABR2=3758154504,
NVIC_NVIC_IABR3=3758154508,
NVIC_NVIC_IABR4=3758154512,
NVIC_NVIC_IPR0=3758154752,
NVIC_NVIC_IPR1=3758154756,
NVIC_NVIC_IPR2=3758154760,
NVIC_NVIC_IPR3=3758154764,
NVIC_NVIC_IPR4=3758154768,
NVIC_NVIC_IPR5=3758154772,
NVIC_NVIC_IPR6=3758154776,
NVIC_NVIC_IPR7=3758154780,
NVIC_NVIC_IPR8=3758154784,
NVIC_NVIC_IPR9=3758154788,
NVIC_NVIC_IPR10=3758154792,
NVIC_NVIC_IPR11=3758154796,
NVIC_NVIC_IPR12=3758154800,
NVIC_NVIC_IPR13=3758154804,
NVIC_NVIC_IPR14=3758154808,
NVIC_NVIC_IPR15=3758154812,
NVIC_NVIC_IPR16=3758154816,
NVIC_NVIC_IPR17=3758154820,
NVIC_NVIC_IPR18=3758154824,
NVIC_NVIC_IPR19=3758154828,
NVIC_NVIC_IPR20=3758154832,
NVIC_NVIC_IPR21=3758154836,
NVIC_NVIC_IPR22=3758154840,
NVIC_NVIC_IPR23=3758154844,
NVIC_NVIC_IPR24=3758154848,
NVIC_NVIC_IPR25=3758154852,
NVIC_NVIC_IPR26=3758154856,
NVIC_NVIC_IPR27=3758154860,
NVIC_NVIC_IPR28=3758154864,
NVIC_NVIC_IPR29=3758154868,
NVIC_NVIC_IPR30=3758154872,
NVIC_NVIC_IPR31=3758154876,
NVIC_NVIC_STIR=3758157568,
NMI_NMIEN=1073742592,
NMI_NMIF=1073742596,
CLK_PWRCON=1073742336,
CLK_AHBCLK=1073742340,
CLK_APBCLK0=1073742344,
CLK_APBCLK1=1073742348,
CLK_CLKSEL0=1073742352,
CLK_CLKSEL1=1073742356,
CLK_CLKSEL2=1073742360,
CLK_CLKSEL3=1073742364,
CLK_CLKDIV0=1073742368,
CLK_CLKDIV1=1073742372,
CLK_CLKDIV2=1073742376,
CLK_CLKDIV3=1073742380,
CLK_PLLCON=1073742400,
CLK_PLL2CON=1073742404,
CLK_CLKSTATUS=1073742416,
CLK_FRQDIV=1073742432,
CLK_CLKDETCR=1073742448,
CLK_CLKTRIM=1073742576,
ACMP_ACMP_CR0=1074024448,
ACMP_ACMP_CR1=1074024452,
ACMP_ACMP_CR2=1074024456,
ACMP_ACMP_SR=1074024460,
ACMP_ACMP_RVCR=1074024464,
ADC_ADC_DR0=1074016256,
ADC_ADC_DR1=1074016260,
ADC_ADC_DR2=1074016264,
ADC_ADC_DR3=1074016268,
ADC_ADC_DR4=1074016272,
ADC_ADC_DR5=1074016276,
ADC_ADC_DR6=1074016280,
ADC_ADC_DR7=1074016284,
ADC_ADC_DR8=1074016288,
ADC_ADC_DR9=1074016292,
ADC_ADC_DR10=1074016296,
ADC_ADC_DR11=1074016300,
ADC_ADC_DR12=1074016304,
ADC_ADC_DR13=1074016308,
ADC_ADC_CR=1074016320,
ADC_ADC_CHER=1074016324,
ADC_ADC_CMPR0=1074016328,
ADC_ADC_CMPR1=1074016332,
ADC_ADC_SR0=1074016336,
ADC_ADC_SR1=1074016340,
ADC_ADC_PDMADATA=1074016352,
EADC_ADDR00=1074020352,
EADC_ADDR01=1074020356,
EADC_ADDR02=1074020360,
EADC_ADDR03=1074020364,
EADC_ADDR04=1074020368,
EADC_ADDR05=1074020372,
EADC_ADDR06=1074020376,
EADC_ADDR07=1074020380,
EADC_ADDR10=1074020384,
EADC_ADDR11=1074020388,
EADC_ADDR12=1074020392,
EADC_ADDR13=1074020396,
EADC_ADDR14=1074020400,
EADC_ADDR15=1074020404,
EADC_ADDR16=1074020408,
EADC_ADDR17=1074020412,
EADC_ADCR=1074020416,
EADC_ADSSTR=1074020424,
EADC_ADSTPFR=1074020428,
EADC_ADIFOVR=1074020432,
EADC_ADSPOVFR=1074020436,
EADC_ADSPCR00=1074020440,
EADC_ADSPCR01=1074020444,
EADC_ADSPCR02=1074020448,
EADC_ADSPCR03=1074020452,
EADC_ADSPCR04=1074020456,
EADC_ADSPCR05=1074020460,
EADC_ADSPCR06=1074020464,
EADC_ADSPCR07=1074020468,
EADC_ADSPCR10=1074020472,
EADC_ADSPCR11=1074020476,
EADC_ADSPCR12=1074020480,
EADC_ADSPCR13=1074020484,
EADC_ADSPCR14=1074020488,
EADC_ADSPCR15=1074020492,
EADC_ADSPCR16=1074020496,
EADC_ADSPCR17=1074020500,
EADC_ADSMSELR=1074020516,
EADC_ADCMPR0=1074020520,
EADC_ADCMPR1=1074020524,
EADC_ADSR0=1074020528,
EADC_ADSR1=1074020532,
EADC_ADTCR=1074020536,
EADC_ADDR00B=1074020608,
EADC_ADDR01B=1074020612,
EADC_ADDR02B=1074020616,
EADC_ADDR03B=1074020620,
EADC_ADDR10B=1074020640,
EADC_ADDR11B=1074020644,
EADC_ADDR12B=1074020648,
EADC_ADDR13B=1074020652,
EADC_ADDBM=1074020656,
EADC_ADINT0SRCTL=1074020660,
EADC_ADINT1SRCTL=1074020664,
EADC_ADINT2SRCTL=1074020668,
EADC_ADINT3SRCTL=1074020672,
EADC_SMP00TRGEN=1074020676,
EADC_SMP01TRGEN=1074020680,
EADC_SMP02TRGEN=1074020684,
EADC_SMP03TRGEN=1074020688,
EADC_SMP10TRGEN=1074020692,
EADC_SMP11TRGEN=1074020696,
EADC_SMP12TRGEN=1074020700,
EADC_SMP13TRGEN=1074020704,
CAN0_CAN_CON=1074397184,
CAN0_CAN_STATUS=1074397188,
CAN0_CAN_ERR=1074397192,
CAN0_CAN_BTIME=1074397196,
CAN0_CAN_IIDR=1074397200,
CAN0_CAN_TEST=1074397204,
CAN0_CAN_BRPE=1074397208,
CAN0_CAN_IF1_CREQ=1074397216,
CAN0_CAN_IF1_CMASK=1074397220,
CAN0_CAN_IF1_MASK1=1074397224,
CAN0_CAN_IF1_MASK2=1074397228,
CAN0_CAN_IF1_ARB1=1074397232,
CAN0_CAN_IF1_ARB2=1074397236,
CAN0_CAN_IF1_MCON=1074397240,
CAN0_CAN_IF1_DAT_A1=1074397244,
CAN0_CAN_IF1_DAT_A2=1074397248,
CAN0_CAN_IF1_DAT_B1=1074397252,
CAN0_CAN_IF1_DAT_B2=1074397256,
CAN0_CAN_IF2_CREQ=1074397312,
CAN0_CAN_IF2_CMASK=1074397316,
CAN0_CAN_IF2_MASK1=1074397320,
CAN0_CAN_IF2_MASK2=1074397324,
CAN0_CAN_IF2_ARB1=1074397328,
CAN0_CAN_IF2_ARB2=1074397332,
CAN0_CAN_IF2_MCON=1074397336,
CAN0_CAN_IF2_DAT_A1=1074397340,
CAN0_CAN_IF2_DAT_A2=1074397344,
CAN0_CAN_IF2_DAT_B1=1074397348,
CAN0_CAN_IF2_DAT_B2=1074397352,
CAN0_CAN_TXREQ1=1074397440,
CAN0_CAN_TXREQ2=1074397444,
CAN0_CAN_NDAT1=1074397472,
CAN0_CAN_NDAT2=1074397476,
CAN0_CAN_IPND1=1074397504,
CAN0_CAN_IPND2=1074397508,
CAN0_CAN_MVLD1=1074397536,
CAN0_CAN_MVLD2=1074397540,
CAN0_CAN_WU_EN=1074397544,
CAN0_CAN_WU_STATUS=1074397548,
CAN1_CAN_CON=1074401280,
CAN1_CAN_STATUS=1074401284,
CAN1_CAN_ERR=1074401288,
CAN1_CAN_BTIME=1074401292,
CAN1_CAN_IIDR=1074401296,
CAN1_CAN_TEST=1074401300,
CAN1_CAN_BRPE=1074401304,
CAN1_CAN_IF1_CREQ=1074401312,
CAN1_CAN_IF1_CMASK=1074401316,
CAN1_CAN_IF1_MASK1=1074401320,
CAN1_CAN_IF1_MASK2=1074401324,
CAN1_CAN_IF1_ARB1=1074401328,
CAN1_CAN_IF1_ARB2=1074401332,
CAN1_CAN_IF1_MCON=1074401336,
CAN1_CAN_IF1_DAT_A1=1074401340,
CAN1_CAN_IF1_DAT_A2=1074401344,
CAN1_CAN_IF1_DAT_B1=1074401348,
CAN1_CAN_IF1_DAT_B2=1074401352,
CAN1_CAN_IF2_CREQ=1074401408,
CAN1_CAN_IF2_CMASK=1074401412,
CAN1_CAN_IF2_MASK1=1074401416,
CAN1_CAN_IF2_MASK2=1074401420,
CAN1_CAN_IF2_ARB1=1074401424,
CAN1_CAN_IF2_ARB2=1074401428,
CAN1_CAN_IF2_MCON=1074401432,
CAN1_CAN_IF2_DAT_A1=1074401436,
CAN1_CAN_IF2_DAT_A2=1074401440,
CAN1_CAN_IF2_DAT_B1=1074401444,
CAN1_CAN_IF2_DAT_B2=1074401448,
CAN1_CAN_TXREQ1=1074401536,
CAN1_CAN_TXREQ2=1074401540,
CAN1_CAN_NDAT1=1074401568,
CAN1_CAN_NDAT2=1074401572,
CAN1_CAN_IPND1=1074401600,
CAN1_CAN_IPND2=1074401604,
CAN1_CAN_MVLD1=1074401632,
CAN1_CAN_MVLD2=1074401636,
CAN1_CAN_WU_EN=1074401640,
CAN1_CAN_WU_STATUS=1074401644,
CRC_CRC_CTL=1073942528,
CRC_CRC_WDATA=1073942532,
CRC_CRC_SEED=1073942536,
CRC_CRC_CHECKSUM=1073942540,
CRYP_CRYPTO_INT_EN=1342701568,
CRYP_CRYPTO_INT_FLAG=1342701572,
CRYP_PRNG_CTL=1342701576,
CRYP_PRNG_SEED=1342701580,
CRYP_PRNG_key0=1342701584,
CRYP_PRNG_key1=1342701588,
CRYP_PRNG_key2=1342701592,
CRYP_PRNG_key3=1342701596,
CRYP_PRNG_key4=1342701600,
CRYP_PRNG_key5=1342701604,
CRYP_PRNG_key6=1342701608,
CRYP_PRNG_key7=1342701612,
CRYP_AES_FEEDBACK_0=1342701648,
CRYP_AES_FEEDBACK_1=1342701652,
CRYP_AES_FEEDBACK_2=1342701656,
CRYP_AES_FEEDBACK_3=1342701660,
CRYP_TDES_FEEDBACK_H=1342701664,
CRYP_TDES_FEEDBACK_L=1342701668,
CRYP_AES_CTL=1342701824,
CRYP_AES_FLAG=1342701828,
CRYP_AES_DATAIN=1342701832,
CRYP_AES_DATAOUT=1342701836,
CRYP_AES0_KEY0=1342701840,
CRYP_AES0_KEY1=1342701844,
CRYP_AES0_KEY2=1342701848,
CRYP_AES0_KEY3=1342701852,
CRYP_AES0_KEY4=1342701856,
CRYP_AES0_KEY5=1342701860,
CRYP_AES0_KEY6=1342701864,
CRYP_AES0_KEY7=1342701868,
CRYP_AES0_IV0=1342701872,
CRYP_AES0_IV1=1342701876,
CRYP_AES0_IV2=1342701880,
CRYP_AES0_IV3=1342701884,
CRYP_AES0_SADR=1342701888,
CRYP_AES0_DADR=1342701892,
CRYP_AES0_CNT=1342701896,
CRYP_AES1_KEY0=1342701900,
CRYP_AES1_KEY1=1342701904,
CRYP_AES1_KEY2=1342701908,
CRYP_AES1_KEY3=1342701912,
CRYP_AES1_KEY4=1342701916,
CRYP_AES1_KEY5=1342701920,
CRYP_AES1_KEY6=1342701924,
CRYP_AES1_KEY7=1342701928,
CRYP_AES1_IV0=1342701932,
CRYP_AES1_IV1=1342701936,
CRYP_AES1_IV2=1342701940,
CRYP_AES1_IV3=1342701944,
CRYP_AES1_SADR=1342701948,
CRYP_AES1_DADR=1342701952,
CRYP_AES1_CNT=1342701956,
CRYP_AES2_KEY0=1342701960,
CRYP_AES2_KEY1=1342701964,
CRYP_AES2_KEY2=1342701968,
CRYP_AES2_KEY3=1342701972,
CRYP_AES2_KEY4=1342701976,
CRYP_AES2_KEY5=1342701980,
CRYP_AES2_KEY6=1342701984,
CRYP_AES2_KEY7=1342701988,
CRYP_AES2_IV0=1342701992,
CRYP_AES2_IV1=1342701996,
CRYP_AES2_IV2=1342702000,
CRYP_AES2_IV3=1342702004,
CRYP_AES2_SADR=1342702008,
CRYP_AES2_DADR=1342702012,
CRYP_AES2_CNT=1342702016,
CRYP_AES3_KEY0=1342702020,
CRYP_AES3_KEY1=1342702024,
CRYP_AES3_KEY2=1342702028,
CRYP_AES3_KEY3=1342702032,
CRYP_AES3_KEY4=1342702036,
CRYP_AES3_KEY5=1342702040,
CRYP_AES3_KEY6=1342702044,
CRYP_AES3_KEY7=1342702048,
CRYP_AES3_IV0=1342702052,
CRYP_AES3_IV1=1342702056,
CRYP_AES3_IV2=1342702060,
CRYP_AES3_IV3=1342702064,
CRYP_AES3_SADR=1342702068,
CRYP_AES3_DADR=1342702072,
CRYP_AES3_CNT=1342702076,
CRYP_TDES_CTL=1342702080,
CRYP_TDES_FLAG=1342702084,
CRYP_TDES0_KEY1H=1342702088,
CRYP_TDES0_KEY1L=1342702092,
CRYP_TDES0_KEY2H=1342702096,
CRYP_TDES0_KEY2L=1342702100,
CRYP_TDES0_KEY3H=1342702104,
CRYP_TDES0_KEY3L=1342702108,
CRYP_TDES0_IVH=1342702112,
CRYP_TDES0_IVL=1342702116,
CRYP_TDES0_SADR=1342702120,
CRYP_TDES0_DADR=1342702124,
CRYP_TDES0_CNT=1342702128,
CRYP_TDES_DATAIN=1342702132,
CRYP_TDES_DATAOUT=1342702136,
CRYP_TDES1_KEY1H=1342702152,
CRYP_TDES1_KEY1L=1342702156,
CRYP_TDES1_KEY2H=1342702160,
CRYP_TDES1_KEY2L=1342702164,
CRYP_TDES1_KEY3H=1342702168,
CRYP_TDES1_KEY3L=1342702172,
CRYP_TDES1_IVH=1342702176,
CRYP_TDES1_IVL=1342702180,
CRYP_TDES1_SADR=1342702184,
CRYP_TDES1_DADR=1342702188,
CRYP_TDES1_CNT=1342702192,
CRYP_TDES2_KEY1H=1342702216,
CRYP_TDES2_KEY1L=1342702220,
CRYP_TDES2_KEY2H=1342702224,
CRYP_TDES2_KEY2L=1342702228,
CRYP_TDES2_KEY3H=1342702232,
CRYP_TDES2_KEY3L=1342702236,
CRYP_TDES2_IVH=1342702240,
CRYP_TDES2_IVL=1342702244,
CRYP_TDES2_SADR=1342702248,
CRYP_TDES2_DADR=1342702252,
CRYP_TDES2_CNT=1342702256,
CRYP_TDES3_KEY1H=1342702280,
CRYP_TDES3_KEY1L=1342702284,
CRYP_TDES3_KEY2H=1342702288,
CRYP_TDES3_KEY2L=1342702292,
CRYP_TDES3_KEY3H=1342702296,
CRYP_TDES3_KEY3L=1342702300,
CRYP_TDES3_IVH=1342702304,
CRYP_TDES3_IVL=1342702308,
CRYP_TDES3_SADR=1342702312,
CRYP_TDES3_DADR=1342702316,
CRYP_TDES3_CNT=1342702320,
CRYP_SHA_CTL=1342702336,
CRYP_SHA_FLAG=1342702340,
CRYP_SHA_H0=1342702344,
CRYP_SHA_H1=1342702348,
CRYP_SHA_H2=1342702352,
CRYP_SHA_H3=1342702356,
CRYP_SHA_H4=1342702360,
CRYP_SHA_H5=1342702364,
CRYP_SHA_H6=1342702368,
CRYP_SHA_H7=1342702372,
CRYP_SHA_SADR=1342702412,
CRYP_SHA_CNT=1342702416,
CRYP_SHA_DATAIN=1342702420,
DMA_DSCT_CTRL0=1073774592,
DMA_DSCT_ENDSAR0=1073774596,
DMA_DSCT_ENDDAR0=1073774600,
DMA_DSCT_NEXT0=1073774604,
DMA_DSCT_CTRL1=1073774608,
DMA_DSCT_ENDSAR1=1073774612,
DMA_DSCT_ENDDAR1=1073774616,
DMA_DSCT_NEXT1=1073774620,
DMA_DSCT_CTRL2=1073774624,
DMA_DSCT_ENDSAR2=1073774628,
DMA_DSCT_ENDDAR2=1073774632,
DMA_DSCT_NEXT2=1073774636,
DMA_DSCT_CTRL3=1073774640,
DMA_DSCT_ENDSAR3=1073774644,
DMA_DSCT_ENDDAR3=1073774648,
DMA_DSCT_NEXT3=1073774652,
DMA_DSCT_CTRL4=1073774656,
DMA_DSCT_ENDSAR4=1073774660,
DMA_DSCT_ENDDAR4=1073774664,
DMA_DSCT_NEXT4=1073774668,
DMA_DSCT_CTRL5=1073774672,
DMA_DSCT_ENDSAR5=1073774676,
DMA_DSCT_ENDDAR5=1073774680,
DMA_DSCT_NEXT5=1073774684,
DMA_DSCT_CTRL6=1073774688,
DMA_DSCT_ENDSAR6=1073774692,
DMA_DSCT_ENDDAR6=1073774696,
DMA_DSCT_NEXT6=1073774700,
DMA_DSCT_CTRL7=1073774704,
DMA_DSCT_ENDSAR7=1073774708,
DMA_DSCT_ENDDAR7=1073774712,
DMA_DSCT_NEXT7=1073774716,
DMA_DSCT_CTRL8=1073774720,
DMA_DSCT_ENDSAR8=1073774724,
DMA_DSCT_ENDDAR8=1073774728,
DMA_DSCT_NEXT8=1073774732,
DMA_DSCT_CTRL9=1073774736,
DMA_DSCT_ENDSAR9=1073774740,
DMA_DSCT_ENDDAR9=1073774744,
DMA_DSCT_NEXT9=1073774748,
DMA_DSCT_CTRL10=1073774752,
DMA_DSCT_ENDSAR10=1073774756,
DMA_DSCT_ENDDAR10=1073774760,
DMA_DSCT_NEXT10=1073774764,
DMA_DSCT_CTRL11=1073774768,
DMA_DSCT_ENDSAR11=1073774772,
DMA_DSCT_ENDDAR11=1073774776,
DMA_DSCT_NEXT11=1073774780,
DMA_DSCT_CTRL12=1073774784,
DMA_DSCT_ENDSAR12=1073774788,
DMA_DSCT_ENDDAR12=1073774792,
DMA_DSCT_NEXT12=1073774796,
DMA_DSCT_CTRL13=1073774800,
DMA_DSCT_ENDSAR13=1073774804,
DMA_DSCT_ENDDAR13=1073774808,
DMA_DSCT_NEXT13=1073774812,
DMA_DSCT_CTRL14=1073774816,
DMA_DSCT_ENDSAR14=1073774820,
DMA_DSCT_ENDDAR14=1073774824,
DMA_DSCT_NEXT14=1073774828,
DMA_DSCT_CTRL15=1073774832,
DMA_DSCT_ENDSAR15=1073774836,
DMA_DSCT_ENDDAR15=1073774840,
DMA_DSCT_NEXT15=1073774844,
DMA_CURSCAT0=1073774848,
DMA_CURSCAT1=1073774852,
DMA_CURSCAT2=1073774856,
DMA_CURSCAT3=1073774860,
DMA_CURSCAT4=1073774864,
DMA_CURSCAT5=1073774868,
DMA_CURSCAT6=1073774872,
DMA_CURSCAT7=1073774876,
DMA_CURSCAT8=1073774880,
DMA_CURSCAT9=1073774884,
DMA_CURSCAT10=1073774888,
DMA_CURSCAT11=1073774892,
DMA_CURSCAT12=1073774896,
DMA_CURSCAT13=1073774900,
DMA_CURSCAT14=1073774904,
DMA_CURSCAT15=1073774908,
DMA_DMA_CHCON=1073775616,
DMA_DMA_STOP=1073775620,
DMA_DMA_SWREQ=1073775624,
DMA_DMA_REQACTF=1073775628,
DMA_DMA_FPSET=1073775632,
DMA_DMA_FPCLR=1073775636,
DMA_DMA_IER=1073775640,
DMA_DMA_ISR=1073775644,
DMA_DMA_ABTF=1073775648,
DMA_DMA_TDF=1073775652,
DMA_DMA_SCATDF=1073775656,
DMA_DMA_ACTF=1073775660,
DMA_DMA_SCATBA=1073775676,
DMA_DMA_TOC0=1073775680,
DMA_DMA_TOC1=1073775684,
DMA_DMA_TOC2=1073775688,
DMA_DMA_TOC3=1073775692,
DMA_DMA_TOC4=1073775696,
DMA_DMA_TOC5=1073775700,
DMA_DMA_TOC6=1073775704,
DMA_DMA_TOC7=1073775708,
DMA_DMA_SMSEL0=1073775744,
DMA_DMA_SMSEL1=1073775748,
DMA_DMA_SMSEL2=1073775752,
DMA_DMA_SMSEL3=1073775756,
EBI_EBICON=1073807360,
EBI_EXTIME0=1073807364,
EBI_EXTIME1=1073807368,
EBI_EXTIME2=1073807372,
EBI_EXTIME3=1073807376,
EBI_KEY_W0=1073807380,
EBI_KEY_W1=1073807384,
EBI_KEY_W2=1073807388,
EBI_KEY_W3=1073807392,
EMAC_EMAC_CAMCMR=1073786880,
EMAC_EMAC_CAMEN=1073786884,
EMAC_EMAC_CAM0M=1073786888,
EMAC_EMAC_CAM0L=1073786892,
EMAC_EMAC_CAM1M=1073786896,
EMAC_EMAC_CAM1L=1073786900,
EMAC_EMAC_CAM2M=1073786904,
EMAC_EMAC_CAM2L=1073786908,
EMAC_EMAC_CAM3M=1073786912,
EMAC_EMAC_CAM3L=1073786916,
EMAC_EMAC_CAM4M=1073786920,
EMAC_EMAC_CAM4L=1073786924,
EMAC_EMAC_CAM5M=1073786928,
EMAC_EMAC_CAM5L=1073786932,
EMAC_EMAC_CAM6M=1073786936,
EMAC_EMAC_CAM6L=1073786940,
EMAC_EMAC_CAM7M=1073786944,
EMAC_EMAC_CAM7L=1073786948,
EMAC_EMAC_CAM8M=1073786952,
EMAC_EMAC_CAM8L=1073786956,
EMAC_EMAC_CAM9M=1073786960,
EMAC_EMAC_CAM9L=1073786964,
EMAC_EMAC_CAM10M=1073786968,
EMAC_EMAC_CAM10L=1073786972,
EMAC_EMAC_CAM11M=1073786976,
EMAC_EMAC_CAM11L=1073786980,
EMAC_EMAC_CAM12M=1073786984,
EMAC_EMAC_CAM12L=1073786988,
EMAC_EMAC_CAM13M=1073786992,
EMAC_EMAC_CAM13L=1073786996,
EMAC_EMAC_CAM14M=1073787000,
EMAC_EMAC_CAM14L=1073787004,
EMAC_EMAC_CAM15M=1073787008,
EMAC_EMAC_CAM15L=1073787012,
EMAC_EMAC_TXDLSA=1073787016,
EMAC_EMAC_RXDLSA=1073787020,
EMAC_EMAC_MCMDR=1073787024,
EMAC_EMAC_MIID=1073787028,
EMAC_EMAC_MIIDA=1073787032,
EMAC_EMAC_FFTCR=1073787036,
EMAC_EMAC_TSDR=1073787040,
EMAC_EMAC_RSDR=1073787044,
EMAC_EMAC_DMARFC=1073787048,
EMAC_EMAC_MIEN=1073787052,
EMAC_EMAC_MISTA=1073787056,
EMAC_EMAC_MGSTA=1073787060,
EMAC_EMAC_MPCNT=1073787064,
EMAC_EMAC_MRPC=1073787068,
EMAC_EMAC_DMARFS=1073787080,
EMAC_EMAC_CTXDSA=1073787084,
EMAC_EMAC_CTXBSA=1073787088,
EMAC_EMAC_CRXDSA=1073787092,
EMAC_EMAC_CRXBSA=1073787096,
EMAC_EMAC_TSCR=1073787136,
EMAC_EMAC_TSMSR=1073787152,
EMAC_EMAC_TSLSR=1073787156,
EMAC_EMAC_TSIR=1073787160,
EMAC_EMAC_TSAR=1073787164,
EMAC_EMAC_TSMSUR=1073787168,
EMAC_EMAC_TSLSUR=1073787172,
EMAC_EMAC_TSMSAR=1073787176,
EMAC_EMAC_TSLSAR=1073787180,
FMC_ISPCON=1073790976,
FMC_ISPADR=1073790980,
FMC_ISPDAT=1073790984,
FMC_ISPCMD=1073790988,
FMC_ISPTRG=1073790992,
FMC_DFBADR=1073790996,
FMC_FATCON=1073791000,
FMC_FBWP=1073791044,
GP_GPIOA_PMD=1073758208,
GP_GPIOA_OFFD=1073758212,
GP_GPIOA_DOUT=1073758216,
GP_GPIOA_DMASK=1073758220,
GP_GPIOA_PIN=1073758224,
GP_GPIOA_DBEN=1073758228,
GP_GPIOA_IMD=1073758232,
GP_GPIOA_IEN=1073758236,
GP_GPIOA_ISRC=1073758240,
GP_GPIOA_TYPE=1073758244,
GP_GPIOA_HS=1073758248,
GP_GPIOB_PMD=1073758272,
GP_GPIOB_OFFD=1073758276,
GP_GPIOB_DOUT=1073758280,
GP_GPIOB_DMASK=1073758284,
GP_GPIOB_PIN=1073758288,
GP_GPIOB_DBEN=1073758292,
GP_GPIOB_IMD=1073758296,
GP_GPIOB_IEN=1073758300,
GP_GPIOB_ISRC=1073758304,
GP_GPIOB_TYPE=1073758308,
GP_GPIOB_HS=1073758312,
GP_GPIOC_PMD=1073758336,
GP_GPIOC_OFFD=1073758340,
GP_GPIOC_DOUT=1073758344,
GP_GPIOC_DMASK=1073758348,
GP_GPIOC_PIN=1073758352,
GP_GPIOC_DBEN=1073758356,
GP_GPIOC_IMD=1073758360,
GP_GPIOC_IEN=1073758364,
GP_GPIOC_ISRC=1073758368,
GP_GPIOC_TYPE=1073758372,
GP_GPIOC_HS=1073758376,
GP_GPIOD_PMD=1073758400,
GP_GPIOD_OFFD=1073758404,
GP_GPIOD_DOUT=1073758408,
GP_GPIOD_DMASK=1073758412,
GP_GPIOD_PIN=1073758416,
GP_GPIOD_DBEN=1073758420,
GP_GPIOD_IMD=1073758424,
GP_GPIOD_IEN=1073758428,
GP_GPIOD_ISRC=1073758432,
GP_GPIOD_TYPE=1073758436,
GP_GPIOD_HS=1073758440,
GP_GPIOE_PMD=1073758464,
GP_GPIOE_OFFD=1073758468,
GP_GPIOE_DOUT=1073758472,
GP_GPIOE_DMASK=1073758476,
GP_GPIOE_PIN=1073758480,
GP_GPIOE_DBEN=1073758484,
GP_GPIOE_IMD=1073758488,
GP_GPIOE_IEN=1073758492,
GP_GPIOE_ISRC=1073758496,
GP_GPIOE_TYPE=1073758500,
GP_GPIOE_HS=1073758504,
GP_GPIOF_PMD=1073758528,
GP_GPIOF_OFFD=1073758532,
GP_GPIOF_DOUT=1073758536,
GP_GPIOF_DMASK=1073758540,
GP_GPIOF_PIN=1073758544,
GP_GPIOF_DBEN=1073758548,
GP_GPIOF_IMD=1073758552,
GP_GPIOF_IEN=1073758556,
GP_GPIOF_ISRC=1073758560,
GP_GPIOF_TYPE=1073758564,
GP_GPIOF_HS=1073758568,
GP_GPIOG_PMD=1073758592,
GP_GPIOG_OFFD=1073758596,
GP_GPIOG_DOUT=1073758600,
GP_GPIOG_DMASK=1073758604,
GP_GPIOG_PIN=1073758608,
GP_GPIOG_DBEN=1073758612,
GP_GPIOG_IMD=1073758616,
GP_GPIOG_IEN=1073758620,
GP_GPIOG_ISRC=1073758624,
GP_GPIOG_TYPE=1073758628,
GP_GPIOG_HS=1073758632,
GP_GPIOH_PMD=1073758656,
GP_GPIOH_OFFD=1073758660,
GP_GPIOH_DOUT=1073758664,
GP_GPIOH_DMASK=1073758668,
GP_GPIOH_PIN=1073758672,
GP_GPIOH_DBEN=1073758676,
GP_GPIOH_IMD=1073758680,
GP_GPIOH_IEN=1073758684,
GP_GPIOH_ISRC=1073758688,
GP_GPIOH_TYPE=1073758692,
GP_GPIOH_HS=1073758696,
GP_GPIOI_PMD=1073758720,
GP_GPIOI_OFFD=1073758724,
GP_GPIOI_DOUT=1073758728,
GP_GPIOI_DMASK=1073758732,
GP_GPIOI_PIN=1073758736,
GP_GPIOI_DBEN=1073758740,
GP_GPIOI_IMD=1073758744,
GP_GPIOI_IEN=1073758748,
GP_GPIOI_ISRC=1073758752,
GP_GPIOI_TYPE=1073758756,
GP_GPIOI_HS=1073758760,
GP_DBNCECON=1073759296,
GP_GPIOA0_DOUT=1073760256,
GP_GPIOA1_DOUT=1073760260,
GP_GPIOA2_DOUT=1073760264,
GP_GPIOA3_DOUT=1073760268,
GP_GPIOA4_DOUT=1073760272,
GP_GPIOA5_DOUT=1073760276,
GP_GPIOA6_DOUT=1073760280,
GP_GPIOA7_DOUT=1073760284,
GP_GPIOA8_DOUT=1073760288,
GP_GPIOA9_DOUT=1073760292,
GP_GPIOA10_DOUT=1073760296,
GP_GPIOA11_DOUT=1073760300,
GP_GPIOA12_DOUT=1073760304,
GP_GPIOA13_DOUT=1073760308,
GP_GPIOA14_DOUT=1073760312,
GP_GPIOA15_DOUT=1073760316,
GP_GPIOB0_DOUT=1073760320,
GP_GPIOB1_DOUT=1073760324,
GP_GPIOB2_DOUT=1073760328,
GP_GPIOB3_DOUT=1073760332,
GP_GPIOB4_DOUT=1073760336,
GP_GPIOB5_DOUT=1073760340,
GP_GPIOB6_DOUT=1073760344,
GP_GPIOB7_DOUT=1073760348,
GP_GPIOB8_DOUT=1073760352,
GP_GPIOB9_DOUT=1073760356,
GP_GPIOB10_DOUT=1073760360,
GP_GPIOB11_DOUT=1073760364,
GP_GPIOB12_DOUT=1073760368,
GP_GPIOB13_DOUT=1073760372,
GP_GPIOB14_DOUT=1073760376,
GP_GPIOB15_DOUT=1073760380,
GP_GPIOC0_DOUT=1073760384,
GP_GPIOC1_DOUT=1073760388,
GP_GPIOC2_DOUT=1073760392,
GP_GPIOC3_DOUT=1073760396,
GP_GPIOC4_DOUT=1073760400,
GP_GPIOC5_DOUT=1073760404,
GP_GPIOC6_DOUT=1073760408,
GP_GPIOC7_DOUT=1073760412,
GP_GPIOC8_DOUT=1073760416,
GP_GPIOC9_DOUT=1073760420,
GP_GPIOC10_DOUT=1073760424,
GP_GPIOC11_DOUT=1073760428,
GP_GPIOC12_DOUT=1073760432,
GP_GPIOC13_DOUT=1073760436,
GP_GPIOC14_DOUT=1073760440,
GP_GPIOC15_DOUT=1073760444,
GP_GPIOD0_DOUT=1073760448,
GP_GPIOD1_DOUT=1073760452,
GP_GPIOD2_DOUT=1073760456,
GP_GPIOD3_DOUT=1073760460,
GP_GPIOD4_DOUT=1073760464,
GP_GPIOD5_DOUT=1073760468,
GP_GPIOD6_DOUT=1073760472,
GP_GPIOD7_DOUT=1073760476,
GP_GPIOD8_DOUT=1073760480,
GP_GPIOD9_DOUT=1073760484,
GP_GPIOD10_DOUT=1073760488,
GP_GPIOD11_DOUT=1073760492,
GP_GPIOD12_DOUT=1073760496,
GP_GPIOD13_DOUT=1073760500,
GP_GPIOD14_DOUT=1073760504,
GP_GPIOD15_DOUT=1073760508,
GP_GPIOE0_DOUT=1073760512,
GP_GPIOE1_DOUT=1073760516,
GP_GPIOE2_DOUT=1073760520,
GP_GPIOE3_DOUT=1073760524,
GP_GPIOE4_DOUT=1073760528,
GP_GPIOE5_DOUT=1073760532,
GP_GPIOE6_DOUT=1073760536,
GP_GPIOE7_DOUT=1073760540,
GP_GPIOE8_DOUT=1073760544,
GP_GPIOE9_DOUT=1073760548,
GP_GPIOE10_DOUT=1073760552,
GP_GPIOE11_DOUT=1073760556,
GP_GPIOE12_DOUT=1073760560,
GP_GPIOE13_DOUT=1073760564,
GP_GPIOE14_DOUT=1073760568,
GP_GPIOE15_DOUT=1073760572,
GP_GPIOF0_DOUT=1073760576,
GP_GPIOF1_DOUT=1073760580,
GP_GPIOF2_DOUT=1073760584,
GP_GPIOF3_DOUT=1073760588,
GP_GPIOF4_DOUT=1073760592,
GP_GPIOF5_DOUT=1073760596,
GP_GPIOF6_DOUT=1073760600,
GP_GPIOF7_DOUT=1073760604,
GP_GPIOF8_DOUT=1073760608,
GP_GPIOF9_DOUT=1073760612,
GP_GPIOF10_DOUT=1073760616,
GP_GPIOF11_DOUT=1073760620,
GP_GPIOF12_DOUT=1073760624,
GP_GPIOF13_DOUT=1073760628,
GP_GPIOF14_DOUT=1073760632,
GP_GPIOF15_DOUT=1073760636,
GP_GPIOG0_DOUT=1073760640,
GP_GPIOG1_DOUT=1073760644,
GP_GPIOG2_DOUT=1073760648,
GP_GPIOG3_DOUT=1073760652,
GP_GPIOG4_DOUT=1073760656,
GP_GPIOG5_DOUT=1073760660,
GP_GPIOG6_DOUT=1073760664,
GP_GPIOG7_DOUT=1073760668,
GP_GPIOG8_DOUT=1073760672,
GP_GPIOG9_DOUT=1073760676,
GP_GPIOG10_DOUT=1073760680,
GP_GPIOG11_DOUT=1073760684,
GP_GPIOG12_DOUT=1073760688,
GP_GPIOG13_DOUT=1073760692,
GP_GPIOG14_DOUT=1073760696,
GP_GPIOG15_DOUT=1073760700,
GP_GPIOH0_DOUT=1073760704,
GP_GPIOH1_DOUT=1073760708,
GP_GPIOH2_DOUT=1073760712,
GP_GPIOH3_DOUT=1073760716,
GP_GPIOH4_DOUT=1073760720,
GP_GPIOH5_DOUT=1073760724,
GP_GPIOH6_DOUT=1073760728,
GP_GPIOH7_DOUT=1073760732,
GP_GPIOH8_DOUT=1073760736,
GP_GPIOH9_DOUT=1073760740,
GP_GPIOH10_DOUT=1073760744,
GP_GPIOH11_DOUT=1073760748,
GP_GPIOH12_DOUT=1073760752,
GP_GPIOH13_DOUT=1073760756,
GP_GPIOH14_DOUT=1073760760,
GP_GPIOH15_DOUT=1073760764,
GP_GPIOI0_DOUT=1073760768,
GP_GPIOI1_DOUT=1073760772,
GP_GPIOI2_DOUT=1073760776,
GP_GPIOI3_DOUT=1073760780,
GP_GPIOI4_DOUT=1073760784,
GP_GPIOI5_DOUT=1073760788,
GP_GPIOI6_DOUT=1073760792,
GP_GPIOI7_DOUT=1073760796,
GP_GPIOI8_DOUT=1073760800,
GP_GPIOI9_DOUT=1073760804,
GP_GPIOI10_DOUT=1073760808,
GP_GPIOI11_DOUT=1073760812,
GP_GPIOI12_DOUT=1073760816,
GP_GPIOI13_DOUT=1073760820,
GP_GPIOI14_DOUT=1073760824,
GP_GPIOI15_DOUT=1073760828,
I2C0_I2CON=1074266112,
I2C0_I2CADDR0=1074266116,
I2C0_I2CDAT=1074266120,
I2C0_I2CSTATUS=1074266124,
I2C0_I2CLK=1074266128,
I2C0_I2CTOC=1074266132,
I2C0_I2CADDR1=1074266136,
I2C0_I2CADDR2=1074266140,
I2C0_I2CADDR3=1074266144,
I2C0_I2CADM0=1074266148,
I2C0_I2CADM1=1074266152,
I2C0_I2CADM2=1074266156,
I2C0_I2CADM3=1074266160,
I2C0_I2CWKCON=1074266172,
I2C0_I2CWKSTS=1074266176,
I2C1_I2CON=1074270208,
I2C1_I2CADDR0=1074270212,
I2C1_I2CDAT=1074270216,
I2C1_I2CSTATUS=1074270220,
I2C1_I2CLK=1074270224,
I2C1_I2CTOC=1074270228,
I2C1_I2CADDR1=1074270232,
I2C1_I2CADDR2=1074270236,
I2C1_I2CADDR3=1074270240,
I2C1_I2CADM0=1074270244,
I2C1_I2CADM1=1074270248,
I2C1_I2CADM2=1074270252,
I2C1_I2CADM3=1074270256,
I2C1_I2CWKCON=1074270268,
I2C1_I2CWKSTS=1074270272,
I2C2_I2CON=1074274304,
I2C2_I2CADDR0=1074274308,
I2C2_I2CDAT=1074274312,
I2C2_I2CSTATUS=1074274316,
I2C2_I2CLK=1074274320,
I2C2_I2CTOC=1074274324,
I2C2_I2CADDR1=1074274328,
I2C2_I2CADDR2=1074274332,
I2C2_I2CADDR3=1074274336,
I2C2_I2CADM0=1074274340,
I2C2_I2CADM1=1074274344,
I2C2_I2CADM2=1074274348,
I2C2_I2CADM3=1074274352,
I2C2_I2CWKCON=1074274364,
I2C2_I2CWKSTS=1074274368,
I2C3_I2CON=1074278400,
I2C3_I2CADDR0=1074278404,
I2C3_I2CDAT=1074278408,
I2C3_I2CSTATUS=1074278412,
I2C3_I2CLK=1074278416,
I2C3_I2CTOC=1074278420,
I2C3_I2CADDR1=1074278424,
I2C3_I2CADDR2=1074278428,
I2C3_I2CADDR3=1074278432,
I2C3_I2CADM0=1074278436,
I2C3_I2CADM1=1074278440,
I2C3_I2CADM2=1074278444,
I2C3_I2CADM3=1074278448,
I2C3_I2CWKCON=1074278460,
I2C3_I2CWKSTS=1074278464,
I2C4_I2CON=1074282496,
I2C4_I2CADDR0=1074282500,
I2C4_I2CDAT=1074282504,
I2C4_I2CSTATUS=1074282508,
I2C4_I2CLK=1074282512,
I2C4_I2CTOC=1074282516,
I2C4_I2CADDR1=1074282520,
I2C4_I2CADDR2=1074282524,
I2C4_I2CADDR3=1074282528,
I2C4_I2CADM0=1074282532,
I2C4_I2CADM1=1074282536,
I2C4_I2CADM2=1074282540,
I2C4_I2CADM3=1074282544,
I2C4_I2CWKCON=1074282556,
I2C4_I2CWKSTS=1074282560,
I2S0_I2SCON=1074036736,
I2S0_I2SCLKDIV=1074036740,
I2S0_I2SIE=1074036744,
I2S0_I2SSTATUS=1074036748,
I2S0_I2STXFIFO=1074036752,
I2S0_I2SRXFIFO=1074036756,
I2S1_I2SCON=1074040832,
I2S1_I2SCLKDIV=1074040836,
I2S1_I2SIE=1074040840,
I2S1_I2SSTATUS=1074040844,
I2S1_I2STXFIFO=1074040848,
I2S1_I2SRXFIFO=1074040852,
CAP_CAPCTL=1073938432,
CAP_CAPPAR=1073938436,
CAP_CAPINT=1073938440,
CAP_POSTERIZE=1073938444,
CAP_MD=1073938448,
CAP_MDADDR=1073938452,
CAP_MDYADDR=1073938456,
CAP_SEPIA=1073938460,
CAP_CWSP=1073938464,
CAP_CWS=1073938468,
CAP_PKDSL=1073938472,
CAP_PNDSL=1073938476,
CAP_FRC=1073938480,
CAP_STRIDE=1073938484,
CAP_FIFO_THD=1073938492,
CAP_CMPADDR=1073938496,
CAP_PKDSM=1073938504,
CAP_PNDSM=1073938508,
CAP_CURADDRP=1073938512,
CAP_CURADDRY=1073938516,
CAP_CURADDRU=1073938520,
CAP_CURADDRV=1073938524,
CAP_PACBA0=1073938528,
CAP_PACBA1=1073938532,
CAP_YBA0=1073938560,
CAP_UBA0=1073938564,
CAP_VBA0=1073938568,
CAP0_CNT=1074479104,
CAP0_HLD0=1074479108,
CAP0_HLD1=1074479112,
CAP0_HLD2=1074479116,
CAP0_CNTCMP=1074479120,
CAP0_CTR0=1074479124,
CAP0_CTR1=1074479128,
CAP0_STS=1074479132,
CAP1_CNT=1074483200,
CAP1_HLD0=1074483204,
CAP1_HLD1=1074483208,
CAP1_HLD2=1074483212,
CAP1_CNTCMP=1074483216,
CAP1_CTR0=1074483220,
CAP1_CTR1=1074483224,
CAP1_STS=1074483228,
OPA_OPACR=1074724864,
OPA_OPASR=1074724868,
PS2_PS2CON=1074659328,
PS2_PS2TXDATA0=1074659332,
PS2_PS2TXDATA1=1074659336,
PS2_PS2TXDATA2=1074659340,
PS2_PS2TXDATA3=1074659344,
PS2_PS2RXDATA=1074659348,
PS2_PS2STATUS=1074659352,
PS2_PS2INTID=1074659356,
PWM0_PWM_CPR=1074102272,
PWM0_PWM_CDR=1074102276,
PWM0_PWM_CONR=1074102280,
PWM0_PWM_CER=1074102284,
PWM0_PWM_CNR0=1074102288,
PWM0_PWM_CNR1=1074102292,
PWM0_PWM_CNR2=1074102296,
PWM0_PWM_CNR3=1074102300,
PWM0_PWM_CNR4=1074102304,
PWM0_PWM_CNR5=1074102308,
PWM0_PWM_CMR0=1074102312,
PWM0_PWM_CMR1=1074102316,
PWM0_PWM_CMR2=1074102320,
PWM0_PWM_CMR3=1074102324,
PWM0_PWM_CMR4=1074102328,
PWM0_PWM_CMR5=1074102332,
PWM0_PWM_DR0=1074102336,
PWM0_PWM_DR1=1074102340,
PWM0_PWM_DR2=1074102344,
PWM0_PWM_DR3=1074102348,
PWM0_PWM_DR4=1074102352,
PWM0_PWM_DR5=1074102356,
PWM0_PWM_MCR=1074102360,
PWM0_PWM_MDR=1074102364,
PWM0_PWM_DZCR=1074102368,
PWM0_PWM_TCR=1074102372,
PWM0_PWM_TIR=1074102376,
PWM0_PWM_BCR=1074102380,
PWM0_PWM_ICR=1074102384,
PWM0_PWM_IER=1074102388,
PWM0_PWM_IFR=1074102392,
PWM0_PWM_OER=1074102396,
PWM0_PWM_CCR=1074102400,
PWM0_PWM_CINER=1074102404,
PWM0_PWM_CAPSR=1074102408,
PWM0_PWM_CRLR0=1074102416,
PWM0_PWM_CFLR0=1074102420,
PWM0_PWM_CRLR1=1074102424,
PWM0_PWM_CFLR1=1074102428,
PWM0_PWM_CRLR2=1074102432,
PWM0_PWM_CFLR2=1074102436,
PWM0_PWM_CRLR3=1074102440,
PWM0_PWM_CFLR3=1074102444,
PWM0_PWM_CRLR4=1074102448,
PWM0_PWM_CFLR4=1074102452,
PWM0_PWM_CRLR5=1074102456,
PWM0_PWM_CFLR5=1074102460,
PWM0_PWM_SBS0=1074102496,
PWM0_PWM_SBS1=1074102500,
PWM0_PWM_SBS2=1074102504,
PWM0_PWM_SBS3=1074102508,
PWM0_PWM_SBS4=1074102512,
PWM0_PWM_SBS5=1074102516,
PWM1_PWM_CPR=1074106368,
PWM1_PWM_CDR=1074106372,
PWM1_PWM_CONR=1074106376,
PWM1_PWM_CER=1074106380,
PWM1_PWM_CNR0=1074106384,
PWM1_PWM_CNR1=1074106388,
PWM1_PWM_CNR2=1074106392,
PWM1_PWM_CNR3=1074106396,
PWM1_PWM_CNR4=1074106400,
PWM1_PWM_CNR5=1074106404,
PWM1_PWM_CMR0=1074106408,
PWM1_PWM_CMR1=1074106412,
PWM1_PWM_CMR2=1074106416,
PWM1_PWM_CMR3=1074106420,
PWM1_PWM_CMR4=1074106424,
PWM1_PWM_CMR5=1074106428,
PWM1_PWM_DR0=1074106432,
PWM1_PWM_DR1=1074106436,
PWM1_PWM_DR2=1074106440,
PWM1_PWM_DR3=1074106444,
PWM1_PWM_DR4=1074106448,
PWM1_PWM_DR5=1074106452,
PWM1_PWM_MCR=1074106456,
PWM1_PWM_MDR=1074106460,
PWM1_PWM_DZCR=1074106464,
PWM1_PWM_TCR=1074106468,
PWM1_PWM_TIR=1074106472,
PWM1_PWM_BCR=1074106476,
PWM1_PWM_ICR=1074106480,
PWM1_PWM_IER=1074106484,
PWM1_PWM_IFR=1074106488,
PWM1_PWM_OER=1074106492,
PWM1_PWM_CCR=1074106496,
PWM1_PWM_CINER=1074106500,
PWM1_PWM_CAPSR=1074106504,
PWM1_PWM_CRLR0=1074106512,
PWM1_PWM_CFLR0=1074106516,
PWM1_PWM_CRLR1=1074106520,
PWM1_PWM_CFLR1=1074106524,
PWM1_PWM_CRLR2=1074106528,
PWM1_PWM_CFLR2=1074106532,
PWM1_PWM_CRLR3=1074106536,
PWM1_PWM_CFLR3=1074106540,
PWM1_PWM_CRLR4=1074106544,
PWM1_PWM_CFLR4=1074106548,
PWM1_PWM_CRLR5=1074106552,
PWM1_PWM_CFLR5=1074106556,
PWM1_PWM_SBS0=1074106592,
PWM1_PWM_SBS1=1074106596,
PWM1_PWM_SBS2=1074106600,
PWM1_PWM_SBS3=1074106604,
PWM1_PWM_SBS4=1074106608,
PWM1_PWM_SBS5=1074106612,
EPWM0_PWMCON0=1074118656,
EPWM0_PWMSTS0=1074118660,
EPWM0_PWMP0=1074118664,
EPWM0_PWM0_CH0=1074118668,
EPWM0_PWM0_CH2=1074118672,
EPWM0_PWM0_CH4=1074118676,
EPWM0_PMSKE0=1074118680,
EPWM0_PMSKD0=1074118684,
EPWM0_ASPWM00=1074118688,
EPWM0_ASPWM02=1074118692,
EPWM0_ASPWM04=1074118696,
EPWM0_PDTC0=1074118700,
EPWM0_PWMB0=1074118704,
EPWM0_PNP0=1074118708,
EPWM0_ASPWMCON0=1074118712,
EPWM0_PWMFCNT0=1074118716,
EPWM0_PWMEIC0=1074118720,
EPWM0_PWMOE0=1074118724,
EPWM1_PWMCON1=1074122752,
EPWM1_PWMSTS1=1074122756,
EPWM1_PWMP1=1074122760,
EPWM1_PWM1_CH0=1074122764,
EPWM1_PWM1_CH2=1074122768,
EPWM1_PWM1_CH4=1074122772,
EPWM1_PMSKE1=1074122776,
EPWM1_PMSKD1=1074122780,
EPWM1_ASPWM10=1074122784,
EPWM1_ASPWM12=1074122788,
EPWM1_ASPWM14=1074122792,
EPWM1_PDTC1=1074122796,
EPWM1_PWMB1=1074122800,
EPWM1_PNP1=1074122804,
EPWM1_ASPWMCON1=1074122808,
EPWM1_PWMFCNT1=1074122812,
EPWM1_PWMEIC1=1074122816,
EPWM1_PWMOE1=1074122820,
QEI0_CNT=1074462720,
QEI0_CNTHLD=1074462724,
QEI0_CNTILAT=1074462728,
QEI0_CNTCMP=1074462732,
QEI0_MAXCNT=1074462740,
QEI0_CTR=1074462744,
QEI0_STS=1074462764,
QEI1_CNT=1074466816,
QEI1_CNTHLD=1074466820,
QEI1_CNTILAT=1074466824,
QEI1_CNTCMP=1074466828,
QEI1_MAXCNT=1074466836,
QEI1_CTR=1074466840,
QEI1_STS=1074466860,
RTC_INIR=1074008064,
RTC_AER=1074008068,
RTC_FCR=1074008072,
RTC_TLR=1074008076,
RTC_CLR=1074008080,
RTC_TSSR=1074008084,
RTC_DWR=1074008088,
RTC_TAR=1074008092,
RTC_CAR=1074008096,
RTC_LIR=1074008100,
RTC_RIER=1074008104,
RTC_RIIR=1074008108,
RTC_TTR=1074008112,
RTC_SPRCTL=1074008124,
RTC_SPR0=1074008128,
RTC_SPR1=1074008132,
RTC_SPR2=1074008136,
RTC_SPR3=1074008140,
RTC_SPR4=1074008144,
RTC_SPR5=1074008148,
RTC_SPR6=1074008152,
RTC_SPR7=1074008156,
RTC_SPR8=1074008160,
RTC_SPR9=1074008164,
RTC_SPR10=1074008168,
RTC_SPR11=1074008172,
RTC_SPR12=1074008176,
RTC_SPR13=1074008180,
RTC_SPR14=1074008184,
RTC_SPR15=1074008188,
RTC_SPR16=1074008192,
RTC_SPR17=1074008196,
RTC_SPR18=1074008200,
RTC_SPR19=1074008204,
RTC_SPR20=1074008208,
RTC_SPR21=1074008212,
RTC_SPR22=1074008216,
RTC_SPR23=1074008220,
RTC_TAMPCTRL=1074008336,
RTC_TAMPSTS=1074008340,
RTC_TAMPER0_PADCTL=1074008356,
RTC_TAMPER1_PADCTL=1074008360,
RTC_XI32_PADCTL=1074008364,
RTC_XO32_PADCTL=1074008368,
RTC_MTAR=1074008384,
RTC_MCAR=1074008388,
SC0_SC_RBR=1074331648,
SC0_SC_THR=1074331648,
SC0_SC_CTL=1074331652,
SC0_SC_ALTCTL=1074331656,
SC0_SC_EGTR=1074331660,
SC0_SC_RFTMR=1074331664,
SC0_SC_ETUCR=1074331668,
SC0_SC_IER=1074331672,
SC0_SC_ISR=1074331676,
SC0_SC_SR=1074331680,
SC0_SC_PINCSR=1074331684,
SC0_SC_TMR0=1074331688,
SC0_SC_TMR1=1074331692,
SC0_SC_TMR2=1074331696,
SC0_SC_UACTL=1074331700,
SC0_SC_TDRA=1074331704,
SC0_SC_TDRB=1074331708,
SC1_SC_RBR=1074335744,
SC1_SC_THR=1074335744,
SC1_SC_CTL=1074335748,
SC1_SC_ALTCTL=1074335752,
SC1_SC_EGTR=1074335756,
SC1_SC_RFTMR=1074335760,
SC1_SC_ETUCR=1074335764,
SC1_SC_IER=1074335768,
SC1_SC_ISR=1074335772,
SC1_SC_SR=1074335776,
SC1_SC_PINCSR=1074335780,
SC1_SC_TMR0=1074335784,
SC1_SC_TMR1=1074335788,
SC1_SC_TMR2=1074335792,
SC1_SC_UACTL=1074335796,
SC1_SC_TDRA=1074335800,
SC1_SC_TDRB=1074335804,
SC2_SC_RBR=1074339840,
SC2_SC_THR=1074339840,
SC2_SC_CTL=1074339844,
SC2_SC_ALTCTL=1074339848,
SC2_SC_EGTR=1074339852,
SC2_SC_RFTMR=1074339856,
SC2_SC_ETUCR=1074339860,
SC2_SC_IER=1074339864,
SC2_SC_ISR=1074339868,
SC2_SC_SR=1074339872,
SC2_SC_PINCSR=1074339876,
SC2_SC_TMR0=1074339880,
SC2_SC_TMR1=1074339884,
SC2_SC_TMR2=1074339888,
SC2_SC_UACTL=1074339892,
SC2_SC_TDRA=1074339896,
SC2_SC_TDRB=1074339900,
SC3_SC_RBR=1074343936,
SC3_SC_THR=1074343936,
SC3_SC_CTL=1074343940,
SC3_SC_ALTCTL=1074343944,
SC3_SC_EGTR=1074343948,
SC3_SC_RFTMR=1074343952,
SC3_SC_ETUCR=1074343956,
SC3_SC_IER=1074343960,
SC3_SC_ISR=1074343964,
SC3_SC_SR=1074343968,
SC3_SC_PINCSR=1074343972,
SC3_SC_TMR0=1074343976,
SC3_SC_TMR1=1074343980,
SC3_SC_TMR2=1074343984,
SC3_SC_UACTL=1074343988,
SC3_SC_TDRA=1074343992,
SC3_SC_TDRB=1074343996,
SC4_SC_RBR=1074348032,
SC4_SC_THR=1074348032,
SC4_SC_CTL=1074348036,
SC4_SC_ALTCTL=1074348040,
SC4_SC_EGTR=1074348044,
SC4_SC_RFTMR=1074348048,
SC4_SC_ETUCR=1074348052,
SC4_SC_IER=1074348056,
SC4_SC_ISR=1074348060,
SC4_SC_SR=1074348064,
SC4_SC_PINCSR=1074348068,
SC4_SC_TMR0=1074348072,
SC4_SC_TMR1=1074348076,
SC4_SC_TMR2=1074348080,
SC4_SC_UACTL=1074348084,
SC4_SC_TDRA=1074348088,
SC4_SC_TDRB=1074348092,
SC5_SC_RBR=1074352128,
SC5_SC_THR=1074352128,
SC5_SC_CTL=1074352132,
SC5_SC_ALTCTL=1074352136,
SC5_SC_EGTR=1074352140,
SC5_SC_RFTMR=1074352144,
SC5_SC_ETUCR=1074352148,
SC5_SC_IER=1074352152,
SC5_SC_ISR=1074352156,
SC5_SC_SR=1074352160,
SC5_SC_PINCSR=1074352164,
SC5_SC_TMR0=1074352168,
SC5_SC_TMR1=1074352172,
SC5_SC_TMR2=1074352176,
SC5_SC_UACTL=1074352180,
SC5_SC_TDRA=1074352184,
SC5_SC_TDRB=1074352188,
SDH_SDHOSTFMI_FB_0=1073795072,
SDH_SDHOSTFMI_FB_1=1073795076,
SDH_SDHOSTFMI_FB_2=1073795080,
SDH_SDHOSTFMI_FB_3=1073795084,
SDH_SDHOSTFMI_FB_4=1073795088,
SDH_SDHOSTFMI_FB_5=1073795092,
SDH_SDHOSTFMI_FB_6=1073795096,
SDH_SDHOSTFMI_FB_7=1073795100,
SDH_SDHOSTFMI_FB_8=1073795104,
SDH_SDHOSTFMI_FB_9=1073795108,
SDH_SDHOSTFMI_FB_10=1073795112,
SDH_SDHOSTFMI_FB_11=1073795116,
SDH_SDHOSTFMI_FB_12=1073795120,
SDH_SDHOSTFMI_FB_13=1073795124,
SDH_SDHOSTFMI_FB_14=1073795128,
SDH_SDHOSTFMI_FB_15=1073795132,
SDH_SDHOSTFMI_FB_16=1073795136,
SDH_SDHOSTFMI_FB_17=1073795140,
SDH_SDHOSTFMI_FB_18=1073795144,
SDH_SDHOSTFMI_FB_19=1073795148,
SDH_SDHOSTFMI_FB_20=1073795152,
SDH_SDHOSTFMI_FB_21=1073795156,
SDH_SDHOSTFMI_FB_22=1073795160,
SDH_SDHOSTFMI_FB_23=1073795164,
SDH_SDHOSTFMI_FB_24=1073795168,
SDH_SDHOSTFMI_FB_25=1073795172,
SDH_SDHOSTFMI_FB_26=1073795176,
SDH_SDHOSTFMI_FB_27=1073795180,
SDH_SDHOSTFMI_FB_28=1073795184,
SDH_SDHOSTFMI_FB_29=1073795188,
SDH_SDHOSTFMI_FB_30=1073795192,
SDH_SDHOSTFMI_FB_31=1073795196,
SDH_SDHOSTDMACCSR=1073796096,
SDH_SDHOSTDMACSAR=1073796104,
SDH_SDHOSTDMACBCR=1073796108,
SDH_SDHOSTDMACIER=1073796112,
SDH_SDHOSTDMACISR=1073796116,
SDH_SDHOSTFMICR=1073797120,
SDH_SDHOSTFMIIER=1073797124,
SDH_SDHOSTFMIISR=1073797128,
SDH_SDHOSTCR=1073797152,
SDH_SDHOSTARG=1073797156,
SDH_SDHOSTIER=1073797160,
SDH_SDHOSTISR=1073797164,
SDH_SDHOSTRSP0=1073797168,
SDH_SDHOSTRSP1=1073797172,
SDH_SDHOSTBLEN=1073797176,
SDH_SDHOSTTMOUT=1073797180,
SPI0_SPI_CTL=1074135040,
SPI0_SPI_CLKDIV=1074135044,
SPI0_SPI_SSCR=1074135048,
SPI0_SPI_PDMACTL=1074135052,
SPI0_SPI_FIFOCTL=1074135056,
SPI0_SPI_STATUS=1074135060,
SPI0_SPI_TX=1074135072,
SPI0_SPI_RX=1074135088,
SPI1_SPI_CTL=1074139136,
SPI1_SPI_CLKDIV=1074139140,
SPI1_SPI_SSCR=1074139144,
SPI1_SPI_PDMACTL=1074139148,
SPI1_SPI_FIFOCTL=1074139152,
SPI1_SPI_STATUS=1074139156,
SPI1_SPI_TX=1074139168,
SPI1_SPI_RX=1074139184,
SPI2_SPI_CTL=1074143232,
SPI2_SPI_CLKDIV=1074143236,
SPI2_SPI_SSCR=1074143240,
SPI2_SPI_PDMACTL=1074143244,
SPI2_SPI_FIFOCTL=1074143248,
SPI2_SPI_STATUS=1074143252,
SPI2_SPI_TX=1074143264,
SPI2_SPI_RX=1074143280,
SPI3_SPI_CTL=1074147328,
SPI3_SPI_CLKDIV=1074147332,
SPI3_SPI_SSCR=1074147336,
SPI3_SPI_PDMACTL=1074147340,
SPI3_SPI_FIFOCTL=1074147344,
SPI3_SPI_STATUS=1074147348,
SPI3_SPI_TX=1074147360,
SPI3_SPI_RX=1074147376,
TMR01_TCSR0=1074069504,
TMR01_TCMPR0=1074069508,
TMR01_TISR0=1074069512,
TMR01_TDR0=1074069516,
TMR01_TCAP0=1074069520,
TMR01_TEXCON0=1074069524,
TMR01_TEXISR0=1074069528,
TMR01_TCSR1=1074069536,
TMR01_TCMPR1=1074069540,
TMR01_TISR1=1074069544,
TMR01_TDR1=1074069548,
TMR01_TCAP1=1074069552,
TMR01_TEXCON1=1074069556,
TMR01_TEXISR1=1074069560,
TMR23_TCSR2=1074073600,
TMR23_TCMPR2=1074073604,
TMR23_TISR2=1074073608,
TMR23_TDR2=1074073612,
TMR23_TCAP2=1074073616,
TMR23_TEXCON2=1074073620,
TMR23_TEXISR2=1074073624,
TMR23_TCSR3=1074073632,
TMR23_TCMPR3=1074073636,
TMR23_TISR3=1074073640,
TMR23_TDR3=1074073644,
TMR23_TCAP3=1074073648,
TMR23_TEXCON3=1074073652,
TMR23_TEXISR3=1074073656,
WDT_WTCR=1074003968,
WDT_WTCRALT=1074003972,
WWDT_WWDTRLD=1074004224,
WWDT_WWDTCR=1074004228,
WWDT_WWDTSR=1074004232,
WWDT_WWDTCVR=1074004236,
UART0_UA_RBR=1074200576,
UART0_UA_THR=1074200576,
UART0_UA_IER=1074200580,
UART0_UA_FCR=1074200584,
UART0_UA_LCR=1074200588,
UART0_UA_MCR=1074200592,
UART0_UA_MSR=1074200596,
UART0_UA_FSR=1074200600,
UART0_UA_ISR=1074200604,
UART0_UA_TOR=1074200608,
UART0_UA_BAUD=1074200612,
UART0_UA_IRCR=1074200616,
UART0_UA_ALT_CSR=1074200620,
UART0_UA_FUN_SEL=1074200624,
UART0_UA_LIN_CTL=1074200628,
UART0_UA_LIN_SR=1074200632,
UART0_UA_DEBUG=1074200636,
UART0_UA_SC_CTL=1074200640,
UART0_UA_SC_FSR=1074200644,
UART1_UA_RBR=1074204672,
UART1_UA_THR=1074204672,
UART1_UA_IER=1074204676,
UART1_UA_FCR=1074204680,
UART1_UA_LCR=1074204684,
UART1_UA_MCR=1074204688,
UART1_UA_MSR=1074204692,
UART1_UA_FSR=1074204696,
UART1_UA_ISR=1074204700,
UART1_UA_TOR=1074204704,
UART1_UA_BAUD=1074204708,
UART1_UA_IRCR=1074204712,
UART1_UA_ALT_CSR=1074204716,
UART1_UA_FUN_SEL=1074204720,
UART1_UA_LIN_CTL=1074204724,
UART1_UA_LIN_SR=1074204728,
UART1_UA_DEBUG=1074204732,
UART1_UA_SC_CTL=1074204736,
UART1_UA_SC_FSR=1074204740,
UART2_UA_RBR=1074208768,
UART2_UA_THR=1074208768,
UART2_UA_IER=1074208772,
UART2_UA_FCR=1074208776,
UART2_UA_LCR=1074208780,
UART2_UA_MCR=1074208784,
UART2_UA_MSR=1074208788,
UART2_UA_FSR=1074208792,
UART2_UA_ISR=1074208796,
UART2_UA_TOR=1074208800,
UART2_UA_BAUD=1074208804,
UART2_UA_IRCR=1074208808,
UART2_UA_ALT_CSR=1074208812,
UART2_UA_FUN_SEL=1074208816,
UART2_UA_LIN_CTL=1074208820,
UART2_UA_LIN_SR=1074208824,
UART2_UA_DEBUG=1074208828,
UART2_UA_SC_CTL=1074208832,
UART2_UA_SC_FSR=1074208836,
UART3_UA_RBR=1074212864,
UART3_UA_THR=1074212864,
UART3_UA_IER=1074212868,
UART3_UA_FCR=1074212872,
UART3_UA_LCR=1074212876,
UART3_UA_MCR=1074212880,
UART3_UA_MSR=1074212884,
UART3_UA_FSR=1074212888,
UART3_UA_ISR=1074212892,
UART3_UA_TOR=1074212896,
UART3_UA_BAUD=1074212900,
UART3_UA_IRCR=1074212904,
UART3_UA_ALT_CSR=1074212908,
UART3_UA_FUN_SEL=1074212912,
UART3_UA_LIN_CTL=1074212916,
UART3_UA_LIN_SR=1074212920,
UART3_UA_DEBUG=1074212924,
UART3_UA_SC_CTL=1074212928,
UART3_UA_SC_FSR=1074212932,
UART4_UA_RBR=1074216960,
UART4_UA_THR=1074216960,
UART4_UA_IER=1074216964,
UART4_UA_FCR=1074216968,
UART4_UA_LCR=1074216972,
UART4_UA_MCR=1074216976,
UART4_UA_MSR=1074216980,
UART4_UA_FSR=1074216984,
UART4_UA_ISR=1074216988,
UART4_UA_TOR=1074216992,
UART4_UA_BAUD=1074216996,
UART4_UA_IRCR=1074217000,
UART4_UA_ALT_CSR=1074217004,
UART4_UA_FUN_SEL=1074217008,
UART4_UA_LIN_CTL=1074217012,
UART4_UA_LIN_SR=1074217016,
UART4_UA_DEBUG=1074217020,
UART4_UA_SC_CTL=1074217024,
UART4_UA_SC_FSR=1074217028,
UART5_UA_RBR=1074221056,
UART5_UA_THR=1074221056,
UART5_UA_IER=1074221060,
UART5_UA_FCR=1074221064,
UART5_UA_LCR=1074221068,
UART5_UA_MCR=1074221072,
UART5_UA_MSR=1074221076,
UART5_UA_FSR=1074221080,
UART5_UA_ISR=1074221084,
UART5_UA_TOR=1074221088,
UART5_UA_BAUD=1074221092,
UART5_UA_IRCR=1074221096,
UART5_UA_ALT_CSR=1074221100,
UART5_UA_FUN_SEL=1074221104,
UART5_UA_LIN_CTL=1074221108,
UART5_UA_LIN_SR=1074221112,
UART5_UA_DEBUG=1074221116,
UART5_UA_SC_CTL=1074221120,
UART5_UA_SC_FSR=1074221124,
USBD_INT_STAT_L=1073844224,
USBD_IRQ_ENB_L=1073844232,
USBD_USB_IRQ_STAT=1073844240,
USBD_USB_IRQ_ENB=1073844244,
USBD_USB_OPER=1073844248,
USBD_USB_FRAME_CNT=1073844252,
USBD_USB_ADDR=1073844256,
USBD_USB_TEST=1073844260,
USBD_CEP_DATA_BUF=1073844264,
USBD_CEP_CTRL_STAT=1073844268,
USBD_CEP_IRQ_ENABLE=1073844272,
USBD_CEP_IRQ_STAT=1073844276,
USBD_IN_TRF_CNT=1073844280,
USBD_OUT_TRF_CNT=1073844284,
USBD_CEP_CNT=1073844288,
USBD_SETUP1_0=1073844292,
USBD_SETUP3_2=1073844296,
USBD_SETUP5_4=1073844300,
USBD_SETUP7_6=1073844304,
USBD_CEP_START_ADDR=1073844308,
USBD_CEP_END_ADDR=1073844312,
USBD_DMA_CTRL_STS=1073844316,
USBD_DMA_CNT=1073844320,
USBD_EPA_DATA_BUF=1073844324,
USBD_EPA_IRQ_STAT=1073844328,
USBD_EPA_IRQ_ENB=1073844332,
USBD_EPA_DATA_CNT=1073844336,
USBD_EPA_RSP_SC=1073844340,
USBD_EPA_MPS=1073844344,
USBD_EPA_TRF_CNT=1073844348,
USBD_EPA_CFG=1073844352,
USBD_EPA_START_ADDR=1073844356,
USBD_EPA_END_ADDR=1073844360,
USBD_EPB_DATA_BUF=1073844364,
USBD_EPB_IRQ_STAT=1073844368,
USBD_EPB_IRQ_ENB=1073844372,
USBD_EPB_DATA_CNT=1073844376,
USBD_EPB_RSP_SC=1073844380,
USBD_EPB_MPS=1073844384,
USBD_EPB_TRF_CNT=1073844388,
USBD_EPB_CFG=1073844392,
USBD_EPB_START_ADDR=1073844396,
USBD_EPB_END_ADDR=1073844400,
USBD_EPC_DATA_BUF=1073844404,
USBD_EPC_IRQ_STAT=1073844408,
USBD_EPC_IRQ_ENB=1073844412,
USBD_EPC_DATA_CNT=1073844416,
USBD_EPC_RSP_SC=1073844420,
USBD_EPC_MPS=1073844424,
USBD_EPC_TRF_CNT=1073844428,
USBD_EPC_CFG=1073844432,
USBD_EPC_START_ADDR=1073844436,
USBD_EPC_END_ADDR=1073844440,
USBD_EPD_DATA_BUF=1073844444,
USBD_EPD_IRQ_STAT=1073844448,
USBD_EPD_IRQ_ENB=1073844452,
USBD_EPD_DATA_CNT=1073844456,
USBD_EPD_RSP_SC=1073844460,
USBD_EPD_MPS=1073844464,
USBD_EPD_TRF_CNT=1073844468,
USBD_EPD_CFG=1073844472,
USBD_EPD_START_ADDR=1073844476,
USBD_EPD_END_ADDR=1073844480,
USBD_EPE_DATA_BUF=1073844484,
USBD_EPE_IRQ_STAT=1073844488,
USBD_EPE_IRQ_ENB=1073844492,
USBD_EPE_DATA_CNT=1073844496,
USBD_EPE_RSP_SC=1073844500,
USBD_EPE_MPS=1073844504,
USBD_EPE_TRF_CNT=1073844508,
USBD_EPE_CFG=1073844512,
USBD_EPE_START_ADDR=1073844516,
USBD_EPE_END_ADDR=1073844520,
USBD_EPF_DATA_BUF=1073844524,
USBD_EPF_IRQ_STAT=1073844528,
USBD_EPF_IRQ_ENB=1073844532,
USBD_EPF_DATA_CNT=1073844536,
USBD_EPF_RSP_SC=1073844540,
USBD_EPF_MPS=1073844544,
USBD_EPF_TRF_CNT=1073844548,
USBD_EPF_CFG=1073844552,
USBD_EPF_START_ADDR=1073844556,
USBD_EPF_END_ADDR=1073844560,
USBD_EPG_DATA_BUF=1073844564,
USBD_EPG_IRQ_STAT=1073844568,
USBD_EPG_IRQ_ENB=1073844572,
USBD_EPG_DATA_CNT=1073844576,
USBD_EPG_RSP_SC=1073844580,
USBD_EPG_MPS=1073844584,
USBD_EPG_TRF_CNT=1073844588,
USBD_EPG_CFG=1073844592,
USBD_EPG_START_ADDR=1073844596,
USBD_EPG_END_ADDR=1073844600,
USBD_EPH_DATA_BUF=1073844604,
USBD_EPH_IRQ_STAT=1073844608,
USBD_EPH_IRQ_ENB=1073844612,
USBD_EPH_DATA_CNT=1073844616,
USBD_EPH_RSP_SC=1073844620,
USBD_EPH_MPS=1073844624,
USBD_EPH_TRF_CNT=1073844628,
USBD_EPH_CFG=1073844632,
USBD_EPH_START_ADDR=1073844636,
USBD_EPH_END_ADDR=1073844640,
USBD_EPI_DATA_BUF=1073844644,
USBD_EPI_IRQ_STAT=1073844648,
USBD_EPI_IRQ_ENB=1073844652,
USBD_EPI_DATA_CNT=1073844656,
USBD_EPI_RSP_SC=1073844660,
USBD_EPI_MPS=1073844664,
USBD_EPI_TRF_CNT=1073844668,
USBD_EPI_CFG=1073844672,
USBD_EPI_START_ADDR=1073844676,
USBD_EPI_END_ADDR=1073844680,
USBD_EPJ_DATA_BUF=1073844684,
USBD_EPJ_IRQ_STAT=1073844688,
USBD_EPJ_IRQ_ENB=1073844692,
USBD_EPJ_DATA_CNT=1073844696,
USBD_EPJ_RSP_SC=1073844700,
USBD_EPJ_MPS=1073844704,
USBD_EPJ_TRF_CNT=1073844708,
USBD_EPJ_CFG=1073844712,
USBD_EPJ_START_ADDR=1073844716,
USBD_EPJ_END_ADDR=1073844720,
USBD_EPK_DATA_BUF=1073844724,
USBD_EPK_IRQ_STAT=1073844728,
USBD_EPK_IRQ_ENB=1073844732,
USBD_EPK_DATA_CNT=1073844736,
USBD_EPK_RSP_SC=1073844740,
USBD_EPK_MPS=1073844744,
USBD_EPK_TRF_CNT=1073844748,
USBD_EPK_CFG=1073844752,
USBD_EPK_START_ADDR=1073844756,
USBD_EPK_END_ADDR=1073844760,
USBD_EPL_DATA_BUF=1073844764,
USBD_EPL_IRQ_STAT=1073844768,
USBD_EPL_IRQ_ENB=1073844772,
USBD_EPL_DATA_CNT=1073844776,
USBD_EPL_RSP_SC=1073844780,
USBD_EPL_MPS=1073844784,
USBD_EPL_TRF_CNT=1073844788,
USBD_EPL_CFG=1073844792,
USBD_EPL_START_ADDR=1073844796,
USBD_EPL_END_ADDR=1073844800,
USBD_AHB_DMA_ADDR=1073846016,
USBD_USB_PHY_CTL=1073846020,
UHC_HcRev=1073778688,
UHC_HcControl=1073778692,
UHC_HcComSts=1073778696,
UHC_HcIntSts=1073778700,
UHC_HcIntEn=1073778704,
UHC_HcIntDis=1073778708,
UHC_HcHCCA=1073778712,
UHC_HcPerCED=1073778716,
UHC_HcCtrHED=1073778720,
UHC_HcCtrCED=1073778724,
UHC_HcBlkHED=1073778728,
UHC_HcBlkCED=1073778732,
UHC_HcDoneH=1073778736,
UHC_HcFmIntv=1073778740,
UHC_HcFmRem=1073778744,
UHC_HcFNum=1073778748,
UHC_HcPerSt=1073778752,
UHC_HcLSTH=1073778756,
UHC_HcRhDeA=1073778760,
UHC_HcRhDeB=1073778764,
UHC_HcRhSts=1073778768,
UHC_HcRhPrt1=1073778772,
UHC_HcRhPrt2=1073778776,
UHC_MiscCtrl=1073779200,
UHC_OpModEn=1073779204,
OTG_OTG_CTL=1074057216,
OTG_OTG_PHYCTL=1074057220,
OTG_OTG_IE=1074057224,
OTG_OTG_IS=1074057228,
OTG_OTG_STS=1074057232,
}
g_NUC4xx_regs=REG
function read_NUC400_Registers(e,e,e,e)
local e={}
e["CLK_PWRCON"],
e["CLK_AHBCLK"],
e["CLK_APBCLK0"],
e["CLK_APBCLK1"],
e["CLK_CLKSEL0"],
e["CLK_CLKSEL1"],
e["CLK_CLKSEL2"],
e["CLK_CLKSEL3"],
e["CLK_CLKDIV0"],
e["CLK_CLKDIV1"],
e["CLK_CLKDIV2"],
e["CLK_CLKDIV3"]=ice:ReadMem32(g_NUC4xx_regs.CLK_PWRCON,12)
e["CLK_PLLCON"],
e["CLK_PLL2CON"],
e["CLK_FRQDIV"],
e["GCR_VREFCR"]=ice:ReadMemMulti(g_NUC4xx_regs.CLK_PLLCON,
g_NUC4xx_regs.CLK_PLL2CON,
g_NUC4xx_regs.CLK_FRQDIV,
g_NUC4xx_regs.GCR_VREFCR)
e["GCR_GPA_MFPL"],
e["GCR_GPA_MFPH"],
e["GCR_GPB_MFPL"],
e["GCR_GPB_MFPH"],
e["GCR_GPC_MFPL"],
e["GCR_GPC_MFPH"],
e["GCR_GPD_MFPL"],
e["GCR_GPD_MFPH"],
e["GCR_GPE_MFPL"],
e["GCR_GPE_MFPH"]=ice:ReadMem32(g_NUC4xx_regs.GCR_GPA_MFPL,10)
e["GCR_GPF_MFPL"],
e["GCR_GPF_MFPH"],
e["GCR_GPG_MFPL"],
e["GCR_GPG_MFPH"],
e["GCR_GPH_MFPL"],
e["GCR_GPH_MFPH"],
e["GCR_GPI_MFPL"],
e["GCR_GPI_MFPH"]=ice:ReadMem32(g_NUC4xx_regs.GCR_GPF_MFPL,8)
e["GCR_IRCTRIMCTL"]=ice:ReadMem32(g_NUC4xx_regs.GCR_IRCTRIMCTL)
e["GP_GPIOA_PMD"],
e["GP_GPIOA_OFFD"],
e["GP_GPIOA_DOUT"],
e["GP_GPIOA_DMASK"],
e["GP_GPIOA_PIN"]=ice:ReadMem32(g_NUC4xx_regs.GP_GPIOA_PMD,5)
e["GP_GPIOB_PMD"],
e["GP_GPIOB_OFFD"],
e["GP_GPIOB_DOUT"],
e["GP_GPIOB_DMASK"],
e["GP_GPIOB_PIN"]=ice:ReadMem32(g_NUC4xx_regs.GP_GPIOB_PMD,5)
e["GP_GPIOC_PMD"],
e["GP_GPIOC_OFFD"],
e["GP_GPIOC_DOUT"],
e["GP_GPIOC_DMASK"],
e["GP_GPIOC_PIN"]=ice:ReadMem32(g_NUC4xx_regs.GP_GPIOC_PMD,5)
e["GP_GPIOD_PMD"],
e["GP_GPIOD_OFFD"],
e["GP_GPIOD_DOUT"],
e["GP_GPIOD_DMASK"],
e["GP_GPIOD_PIN"]=ice:ReadMem32(g_NUC4xx_regs.GP_GPIOD_PMD,5)
e["GP_GPIOE_PMD"],
e["GP_GPIOE_OFFD"],
e["GP_GPIOE_DOUT"],
e["GP_GPIOE_DMASK"],
e["GP_GPIOE_PIN"]=ice:ReadMem32(g_NUC4xx_regs.GP_GPIOE_PMD,5)
e["GP_GPIOF_PMD"],
e["GP_GPIOF_OFFD"],
e["GP_GPIOF_DOUT"],
e["GP_GPIOF_DMASK"],
e["GP_GPIOF_PIN"]=ice:ReadMem32(g_NUC4xx_regs.GP_GPIOF_PMD,5)
e["GP_GPIOG_PMD"],
e["GP_GPIOG_OFFD"],
e["GP_GPIOG_DOUT"],
e["GP_GPIOG_DMASK"],
e["GP_GPIOG_PIN"]=ice:ReadMem32(g_NUC4xx_regs.GP_GPIOG_PMD,5)
e["GP_GPIOH_PMD"],
e["GP_GPIOH_OFFD"],
e["GP_GPIOH_DOUT"],
e["GP_GPIOH_DMASK"],
e["GP_GPIOH_PIN"]=ice:ReadMem32(g_NUC4xx_regs.GP_GPIOH_PMD,5)
e["GP_GPIOI_PMD"],
e["GP_GPIOI_OFFD"],
e["GP_GPIOI_DOUT"],
e["GP_GPIOI_DMASK"],
e["GP_GPIOI_PIN"]=ice:ReadMem32(g_NUC4xx_regs.GP_GPIOI_PMD,5)
e["GP_GPIOA_HS"],
e["GP_GPIOB_HS"],
e["GP_GPIOC_HS"],
e["GP_GPIOD_HS"]=ice:ReadMemMulti(g_NUC4xx_regs.GP_GPIOA_HS,
g_NUC4xx_regs.GP_GPIOB_HS,
g_NUC4xx_regs.GP_GPIOC_HS,
g_NUC4xx_regs.GP_GPIOD_HS)
e["GP_GPIOE_HS"],
e["GP_GPIOF_HS"],
e["GP_GPIOG_HS"],
e["GP_GPIOH_HS"]=ice:ReadMemMulti(g_NUC4xx_regs.GP_GPIOE_HS,
g_NUC4xx_regs.GP_GPIOF_HS,
g_NUC4xx_regs.GP_GPIOG_HS,
g_NUC4xx_regs.GP_GPIOH_HS)
e["GP_GPIOI_HS"]=ice:ReadMem32(g_NUC4xx_regs.GP_GPIOI_HS)
e["I2S0_I2SCON"],
e["I2S0_I2SCLKDIV"],
e["I2S1_I2SCON"],
e["I2S1_I2SCLKDIV"]=ice:ReadMemMulti(g_NUC4xx_regs.I2S0_I2SCON,
g_NUC4xx_regs.I2S0_I2SCLKDIV,
g_NUC4xx_regs.I2S1_I2SCON,
g_NUC4xx_regs.I2S1_I2SCLKDIV)
e["UART0_UA_BAUD"],
e["UART1_UA_BAUD"],
e["UART2_UA_BAUD"],
e["UART3_UA_BAUD"]=ice:ReadMemMulti(g_NUC4xx_regs.UART0_UA_BAUD,
g_NUC4xx_regs.UART1_UA_BAUD,
g_NUC4xx_regs.UART2_UA_BAUD,
g_NUC4xx_regs.UART3_UA_BAUD)
e["UART4_UA_BAUD"],
e["UART5_UA_BAUD"]=ice:ReadMemMulti(g_NUC4xx_regs.UART4_UA_BAUD,
g_NUC4xx_regs.UART5_UA_BAUD)
e["SPI0_SPI_CTL"],
e["SPI1_SPI_CTL"],
e["SPI2_SPI_CTL"],
e["SPI3_SPI_CTL"]=ice:ReadMemMulti(g_NUC4xx_regs.SPI0_SPI_CTL,
g_NUC4xx_regs.SPI1_SPI_CTL,
g_NUC4xx_regs.SPI2_SPI_CTL,
g_NUC4xx_regs.SPI3_SPI_CTL)
e["SPI0_SPI_CLKDIV"],
e["SPI1_SPI_CLKDIV"],
e["SPI2_SPI_CLKDIV"],
e["SPI3_SPI_CLKDIV"]=ice:ReadMemMulti(g_NUC4xx_regs.SPI0_SPI_CLKDIV,
g_NUC4xx_regs.SPI1_SPI_CLKDIV,
g_NUC4xx_regs.SPI2_SPI_CLKDIV,
g_NUC4xx_regs.SPI3_SPI_CLKDIV)
e["CAN0_CAN_BTIME"],
e["CAN0_CAN_BRPE"],
e["CAN1_CAN_BTIME"],
e["CAN1_CAN_BRPE"]=ice:ReadMemMulti(g_NUC4xx_regs.CAN0_CAN_BTIME,
g_NUC4xx_regs.CAN0_CAN_BRPE,
g_NUC4xx_regs.CAN1_CAN_BTIME,
g_NUC4xx_regs.CAN1_CAN_BRPE)
e["I2C0_I2CON"],
e["I2C0_I2CLK"]=ice:ReadMemMulti(g_NUC4xx_regs.I2C0_I2CON,
g_NUC4xx_regs.I2C0_I2CLK)
e["I2C1_I2CON"],
e["I2C1_I2CLK"]=ice:ReadMemMulti(g_NUC4xx_regs.I2C1_I2CON,
g_NUC4xx_regs.I2C1_I2CLK)
e["I2C2_I2CON"],
e["I2C2_I2CLK"]=ice:ReadMemMulti(g_NUC4xx_regs.I2C2_I2CON,
g_NUC4xx_regs.I2C2_I2CLK)
e["I2C3_I2CON"],
e["I2C3_I2CLK"]=ice:ReadMemMulti(g_NUC4xx_regs.I2C3_I2CON,
g_NUC4xx_regs.I2C3_I2CLK)
e["I2C4_I2CON"],
e["I2C4_I2CLK"]=ice:ReadMemMulti(g_NUC4xx_regs.I2C4_I2CON,
g_NUC4xx_regs.I2C4_I2CLK)
e["SC0_SC_UACTL"],
e["SC1_SC_UACTL"],
e["SC2_SC_UACTL"],
e["SC3_SC_UACTL"]=ice:ReadMemMulti(g_NUC4xx_regs.SC0_SC_UACTL,
g_NUC4xx_regs.SC1_SC_UACTL,
g_NUC4xx_regs.SC2_SC_UACTL,
g_NUC4xx_regs.SC3_SC_UACTL)
e["SC4_SC_UACTL"],
e["SC5_SC_UACTL"]=ice:ReadMemMulti(g_NUC4xx_regs.SC4_SC_UACTL,
g_NUC4xx_regs.SC5_SC_UACTL)
e["SC0_SC_ETUCR"],
e["SC1_SC_ETUCR"],
e["SC2_SC_ETUCR"],
e["SC3_SC_ETUCR"]=ice:ReadMemMulti(g_NUC4xx_regs.SC0_SC_ETUCR,
g_NUC4xx_regs.SC1_SC_ETUCR,
g_NUC4xx_regs.SC2_SC_ETUCR,
g_NUC4xx_regs.SC3_SC_ETUCR)
e["SC4_SC_ETUCR"],
e["SC5_SC_ETUCR"]=ice:ReadMemMulti(g_NUC4xx_regs.SC4_SC_ETUCR,
g_NUC4xx_regs.SC5_SC_ETUCR)
e["SC0_SC_CTL"],
e["SC1_SC_CTL"],
e["SC2_SC_CTL"],
e["SC3_SC_CTL"]=ice:ReadMemMulti(g_NUC4xx_regs.SC0_SC_CTL,
g_NUC4xx_regs.SC1_SC_CTL,
g_NUC4xx_regs.SC2_SC_CTL,
g_NUC4xx_regs.SC3_SC_CTL)
e["SC4_SC_CTL"],
e["SC5_SC_CTL"],
e["EBI_EBICON"],
e["CAP_CAPCTL"]=ice:ReadMemMulti(g_NUC4xx_regs.SC4_SC_CTL,
g_NUC4xx_regs.SC5_SC_CTL,
g_NUC4xx_regs.EBI_EBICON,
g_NUC4xx_regs.CAP_CAPCTL)
e["EBI_EXTIME0"],
e["EBI_EXTIME1"],
e["EBI_EXTIME2"],
e["EBI_EXTIME3"]=ice:ReadMemMulti(g_NUC4xx_regs.EBI_EXTIME0,
g_NUC4xx_regs.EBI_EXTIME1,
g_NUC4xx_regs.EBI_EXTIME2,
g_NUC4xx_regs.EBI_EXTIME3)
e["CAP0_CTR0"],
e["CAP1_CTR0"],
e["QEI0_CTR"],
e["QEI1_CTR"]=ice:ReadMemMulti(g_NUC4xx_regs.CAP0_CTR0,
g_NUC4xx_regs.CAP1_CTR0,
g_NUC4xx_regs.QEI0_CTR,
g_NUC4xx_regs.QEI1_CTR)
e["TMR01_TCSR0"],
e["TMR01_TCSR1"],
e["TMR23_TCSR2"],
e["TMR23_TCSR3"]=ice:ReadMemMulti(g_NUC4xx_regs.TMR01_TCSR0,
g_NUC4xx_regs.TMR01_TCSR1,
g_NUC4xx_regs.TMR23_TCSR2,
g_NUC4xx_regs.TMR23_TCSR3)
e["PWM0_PWM_CPR"],
e["PWM0_PWM_CDR"],
e["PWM1_PWM_CPR"],
e["PWM1_PWM_CDR"]=ice:ReadMemMulti(g_NUC4xx_regs.PWM0_PWM_CPR,
g_NUC4xx_regs.PWM0_PWM_CDR,
g_NUC4xx_regs.PWM1_PWM_CPR,
g_NUC4xx_regs.PWM1_PWM_CDR)
e["EPWM0_PWMCON0"],
e["EPWM1_PWMCON1"],
e["OPA_OPACR"]=ice:ReadMemMulti(g_NUC4xx_regs.EPWM0_PWMCON0,
g_NUC4xx_regs.EPWM1_PWMCON1,
g_NUC4xx_regs.OPA_OPACR)
return e
end
local n={
[0]=kPinDirection_In,
[1]=kPinDirection_PushPullOut,
[2]=kPinDirection_OpenDrainOut,
[3]=kPinDirection_Bi,
}
local f={
[0]="INPUT",
[1]="OUTPUT",
[2]="Open-Drain",
[3]="Quasi-bidirectional",
}
function get_mfp_regs(t,a,e)
local e={"GCR_GP"..a.."_MFP"..e}
return reg2str("Multi-Function register",g_NUC4xx_regs,t,e)
end
function get_clk_informnation(t,e)
return reg2str("Clock setting registers",g_NUC4xx_regs,t,e)
end
function get_OSC22M_clock(o,a)
local t
local e
table.insert(a,"CLK_PWRCON")
local i=ext.band(o["CLK_PWRCON"],4)
if i==0 then
t=0
e="invalid internal <b>22.1184MHz</b> high speed oscillator clock (see PWRCON[2].OSC22M_EN)"
else
table.insert(a,"GCR_IRCTRIMCTL")
local a=ext.band(o["GCR_IRCTRIMCTL"],3)
if a==0 then
t=22118400
e="internal <b>22.1184MHz</b> high speed oscillator clock"
elseif a==1 then
t=22118400
e="internal <b>22.1184MHz</b> high speed oscillator clock (auto trim)"
elseif a==2 then
t=24000000
e="internal <b>24MHz</b> high speed oscillator clock (auto trim)"
else
t=0
e="invalid HIRC trim frequency selection (see GCR_IRCTRIMCTL[1:0].FREQSEL)"
end
end
return t,e
end
function get_OSC10K_clock(a,o)
local e
local t
table.insert(o,"CLK_PWRCON")
local a=ext.band(a["CLK_PWRCON"],8)
if a==0 then
e=0
t="invalid internal <b>10kHz</b> low speed oscillator clock (see PWRCON[3].OSC10K_EN)"
else
e=10000
t="internal <b>10kHz</b> low speed oscillator clock"
end
return e,t
end
function get_XTL12M_clock(a,o)
local e
local t
table.insert(o,"CLK_PWRCON")
local a=ext.band(a["CLK_PWRCON"],1)
if a==0 then
e=0
t="invalid external <b>4~24M</b> high speed crystal clock (see PWRCON[0].XTL12M_EN)"
else
e=12000000
t="external <b>4~24M</b> high speed crystal clock, <font color=blue>when</font> external input clock is <font color=blue>12M</font>"
end
return e,t
end
function get_XTL32K_clock(a,o)
local t
local e
table.insert(o,"CLK_PWRCON")
local a=ext.band(a["CLK_PWRCON"],2)
if a==0 then
t=0
e="invalid external <b>32.768kHz</b> low speed crystal clock (see PWRCON[1].XTL32K_EN)"
else
t=32768
e="external <b>32.768kHz</b> low speed crystal clock"
end
return t,e
end
function get_PLL_clock(a,o)
local t
local e
table.insert(o,"CLK_PLLCON")
if ext.band(a["CLK_PLLCON"],65536)~=0 then
t=0
e="invalid <b>PLL</b> clock, PLL is in Power-down mode (see PLLCON[16].PD)"
else
if ext.band(a["CLK_PLLCON"],524288)~=0 then
t,e=get_OSC22M_clock(a,o)
else
t,e=get_XTL12M_clock(a,o)
end
if t~=0 then
if ext.band(a["CLK_PLLCON"],131072)~=0 then
e=string.format("<b>PLL</b> clock (<b>%sHz</b>), bypassed from %s",val2str(t),e)
else
local n={1,2,2,4}
local i=ext.band(a["CLK_PLLCON"],511)+2
local o=ext.rshift(ext.band(a["CLK_PLLCON"],15872),9)+2
local a=n[ext.rshift(ext.band(a["CLK_PLLCON"],49152),14)+1]
t=t*i/o/a
e=string.format("<b>PLL</b> clock (<b>%sHz</b>), from %s",val2str(t),e)
end
else
e="<b>PLL</b> clock from "..e
end
end
return t,e
end
function get_USBPLL_clock(a,o)
local e
local t
e,t=get_XTL12M_clock(a,o)
table.insert(o,"CLK_PLL2CON")
local i=ext.band(a["CLK_PLL2CON"],256)
if i==0 then
e=0
t="invalid USB PHY PLL clock (see PLL2CON[8].USBPLL_EN)"
else
if e~=0 then
e=480000000
table.insert(o,"CLK_CLKDIV0")
local a=ext.rshift(ext.band(a["CLK_CLKDIV0"],240),4)
e=e/2/(a+1)
t=string.format("<b>USB PLL</b> clock (<b>%sHz</b>), from %s",val2str(e),t)
else
t="<b>USB PLL</b> clock from "..t
end
end
return e,t
end
function get_sys_clock(o,a,n)
table.insert(a,"CLK_CLKSEL0")
local i=ext.band(o["CLK_CLKSEL0"],7)
local t
local e
if i==0 then
t,e=get_XTL12M_clock(o,a)
elseif i==1 then
t,e=get_XTL32K_clock(o,a)
elseif i==2 then
t,e=get_PLL_clock(o,a)
elseif i==3 then
t,e=get_OSC10K_clock(o,a)
elseif i==4 then
t,e=get_USBPLL_clock(o,a)
elseif i==7 then
t,e=get_OSC22M_clock(o,a)
else
t=0
e="invalid <b>"..n.."</b> clock (see CLKSEL0[2:0].HCLK_S)"
return t,e
end
if t==0 then
e="<b>"..n.."</b> clock from "..e
else
table.insert(a,"CLK_CLKDIV0")
local a=ext.band(o["CLK_CLKDIV0"],15)
t=t/(a+1)
e=string.format("<b>%s</b> clock (<b>%sHz</b>), from %s",n,val2str(t),e)
end
return t,e
end
function get_HCLK_clock(t,e)
return get_sys_clock(t,e,"HCLK")
end
function get_PCLK_clock(o,a)
local t
local e
t,e=get_HCLK_clock(o,a)
if t==0 then
e="<b>PCLK</b> clock from "..e
else
table.insert(a,"CLK_CLKSEL0")
local a=ext.rshift(ext.band(o["CLK_CLKSEL0"],64),6)
if a==1 then
t=t/2
end
e=string.format("<b>PCLK</b> clock (<b>%sHz</b>), from %s",val2str(t),e)
end
return t,e
end
function fill_NUC400_GPIO(o,s,t,e,c)
local a=s["GP_GPIO"..t.."_PMD"]
local m=s["GP_GPIO"..t.."_OFFD"]
local r=s["GP_GPIO"..t.."_DOUT"]
local h=s["GP_GPIO"..t.."_DMASK"]
local d=s["GP_GPIO"..t.."_PIN"]
local l=s["GP_GPIO"..t.."_HS"]
local u=string.format("P%s.%d",t,e)
o["highlight_text"]=u
o["normal_color"]=kColor_Invalid
o["highlight_color"]=kColor_GPIO
o["pin_bg_color"]=kBgColor_GPIO
local i=ext.band(ext.rshift(a,e*2),3)
o["direction"]=n[i]
if n[i]==kPinDirection_In
or n[i]==kPinDirection_Bi then
if ext.band(d,ext.lshift(1,e))==0 then
o["status"]=kPinStatus_Low
else
o["status"]=kPinStatus_High
end
else
if ext.band(h,ext.lshift(1,e))~=0 then
o["status"]=kPinStatus_Unknown
elseif ext.band(r,ext.lshift(1,e))==0 then
o["status"]=kPinStatus_Low
else
o["status"]=kPinStatus_High
end
end
local a=string.format("P%s.%d is in <b>%s</b> mode<br>",
t,e,f[i])
if n[i]==kPinDirection_In
or n[i]==kPinDirection_Bi then
if ext.band(d,ext.lshift(1,e))==0 then
a=a.."Pin input <b>low</b><br>"
else
a=a.."Pin input <b>high</b><br>"
end
end
if n[i]==kPinDirection_PushPullOut
or n[i]==kPinDirection_OpenDrainOut
or n[i]==kPinDirection_Bi then
if ext.band(h,ext.lshift(1,e))~=0 then
a=a.."Pin output <b>masked</b><br>"
elseif ext.band(r,ext.lshift(1,e))==0 then
a=a.."Pin output <b>low</b><br>"
else
a=a.."Pin output <b>high</b><br>"
end
end
if ext.band(m,ext.lshift(1,e+16))==0 then
a=a.."IO digital input path <b>enabled</b><br>"
else
a=a.."IO digital input path <b>disabled</b>(digital input tied to low)<br>"
end
if c then
if ext.band(l,ext.lshift(1,e))==0 then
a=a.."IO output with <b>basic</b> slew rate<br>"
else
a=a.."IO output with <b>higher</b> slew rate<br>"
end
end
local l
if e>=0 and e<=7 then
l="L"
elseif e>=8 and e<=15 then
l="H"
else
warn=warn.."Bit error, it should be 0~15.<br>"
end
local h=""
if n[i]==kPinDirection_PushPullOut
or n[i]==kPinDirection_Bi then
if ext.band(r,ext.lshift(1,e))==0 and ext.band(d,ext.lshift(1,e))~=0 then
h=string.format("Leakage warning: GPIO%s_DOUT[%d] = 0, GPIO%s_PIN[%d] = 1<br>",t,e,t,e)
elseif ext.band(r,ext.lshift(1,e))~=0 and ext.band(d,ext.lshift(1,e))==0 then
h=string.format("Leakage warning: GPIO%s_DOUT[%d] = 1, GPIO%s_PIN[%d] = 0<br>",t,e,t,e)
end
end
if h~=""then
o["pin_no_color"]=kBgColor_Error
h="<font color=red>"..h.."</font>"
end
local e={
"GP_GPIO"..t.."_PMD",
"GP_GPIO"..t.."_OFFD",
"GP_GPIO"..t.."_DOUT",
"GP_GPIO"..t.."_DMASK",
"GP_GPIO"..t.."_PIN",
"GP_GPIO"..t.."_HS"}
local e=reg2str("GPIO setting registers",g_NUC4xx_regs,s,e)
o["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s"..
"<b>Information</b><br>"..
"%s",
u,
h,
get_mfp_regs(s,t,l),
e,
a)
end
function fill_invalid_GPIO(e,n,a,t)
e["highlight_text"]=string.format("P%s.%d",a,t)
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_Invalid
e["pin_bg_color"]=kBgColor_Invalid
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
e["pin_no_color"]=kBgColor_Error
local o
if t>=0 and t<=7 then
o="L"
elseif t>=8 and t<=15 then
o="H"
else
warn=warn.."Bit error, it should be 0~15.<br>"
end
local i="<font color=red>Undefined setting in Multi-Function registers for this pin</font><br>"
e["information"]=string.format(
"<b>P%s.%d</b><br>%s<br>"..
"%s",
a,t,
i,
get_mfp_regs(n,a,o))
end
function fill_NUC400_PS2(e,o,s,h,n)
local a=""
local t=""
local i={}
e["highlight_text"]=n
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_Normal
e["pin_bg_color"]=kBgColor_Normal
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
table.insert(i,"CLK_APBCLK0")
if ext.band(o["CLK_APBCLK0"],2147483648)~=0 then
local n
local e
n,e=get_OSC22M_clock(o,i)
if n~=0 then
a="PS2 clock from "..e..".<br>"
else
t="PS2 clock is not available, "..e..".<br>"
end
else
t="PS2 clock is not available (see APBCLK0[31].PS2_EN).<br>"
end
if t~=""then
t="<font color=red>"..t.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if a~=""then
a="<b>Information</b><br>"..a
end
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
n,
t,
get_mfp_regs(o,s,h),
get_clk_informnation(o,i),
a)
end
function fill_NUC400_ACMP(e,a,n,s,i)
local t=""
local o={}
e["highlight_text"]=i
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_CMP
e["pin_bg_color"]=kBgColor_CMP
e["direction"]=kPinDirection_In
e["status"]=kPinStatus_Unknown
table.insert(o,"CLK_APBCLK0")
if ext.band(a["CLK_APBCLK0"],128)==0 then
t="ACMP clock is not available (see APBCLK0[7].ACMP_EN).<br>"
t="<font color=red>"..t.."</font>"
e["pin_no_color"]=kBgColor_Error
end
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s",
i,
t,
get_mfp_regs(a,n,s),
get_clk_informnation(a,o))
end
function fill_NUC400_I2S(n,a,l,d,r,e)
local t=""
local s=""
local i={}
n["highlight_text"]=r
n["normal_color"]=kColor_Invalid
n["highlight_color"]=kColor_I2S
n["pin_bg_color"]=kBgColor_I2S
n["direction"]=kPinDirection_Unknown
n["status"]=kPinStatus_Unknown
table.insert(i,"CLK_APBCLK0")
if ext.band(a["CLK_APBCLK0"],ext.lshift(536870912,e))~=0 then
table.insert(i,"CLK_CLKSEL3")
local h=ext.band(ext.rshift(a["CLK_CLKSEL3"],16+e*2),3)
local o
local n
if h==0 then
o,n=get_XTL12M_clock(a,i)
elseif h==1 then
o,n=get_PLL_clock(a,i)
elseif h==2 then
o,n=get_PCLK_clock(a,i)
else
o,n=get_OSC22M_clock(a,i)
end
if o~=0 then
local s=string.format("I2S%d_I2SCLKDIV",e)
local h=string.format("I2S%d_I2SCON",e)
table.insert(i,s)
table.insert(i,h)
local i=ext.band(a[h],1)
if i~=0 then
t=string.format("I2S%d controller enabled.<br>",e)
else
t=string.format("I2S%d controller <font color=red>disabled</font>, (see I2S%d.I2SCON[0].I2SEN).<br>",e,e)
end
t=t..string.format("I2S%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(o),n)
local i=ext.band(ext.rshift(a[s],8),511)
local a=ext.band(a[s],63)
local n=o/(2*(i+1))
local i=o
if a~=0 then
i=o/(2*a)
end
t=t..string.format("I2S%d BCLK frequency: <b>%sHz</b><br>",e,val2str(n))
t=t..string.format("I2S%d MCLK frequency: <b>%sHz</b><br>",e,val2str(i))
else
s=string.format("I2S%d clock is not available, %s.<br>",e,n)
end
else
s=string.format("I2S%d clock is not available (see APBCLK0[%d].I2S%d_EN).<br>",e,e+29,e)
end
if s~=""then
s="<font color=red>"..s.."</font>"
n["pin_no_color"]=kBgColor_Error
end
if t~=""then
t="<b>Information</b><br>"..t
end
n["information"]=string.format(
"<b>%s</b><br>%s<br>%s%s%s",
r,
s,
get_mfp_regs(a,l,d),
get_clk_informnation(a,i),
t)
end
function fill_NUC400_UART(i,e,u,l,d,o)
local n=""
local a=""
local t={}
local s=0
i["highlight_text"]=d
i["normal_color"]=kColor_Invalid
i["highlight_color"]=kColor_UART
i["pin_bg_color"]=kBgColor_UART
i["direction"]=kPinDirection_Unknown
i["status"]=kPinStatus_Unknown
function get_uart_baudate(s)
local i=string.format("UART%d",o)
local a=string.format("UART%d_UA_BAUD",o)
table.insert(t,a)
local o=ext.band(e[a],536870912)
local n=ext.band(e[a],268435456)
local h=ext.rshift(ext.band(e[a],251658240),24)
local a=ext.band(e[a],65535)
local t=0
local e=""
if o==0 and n==0 then
t=s/(16*(a+2))
elseif o~=0 and n==0 then
if h>=8 then
t=s/((h+1)*(a+2))
else
e="invalid "..i.."'s UA_BAUD value, DIVIDER_X must >= 8"
end
elseif o~=0 and n~=0 then
if a>=9 then
t=s/(a+2)
else
e="invalid "..i.."'s UA_BAUD value, BRD must >= 9"
end
else
e="invalid "..i.."'s UA_BAUD value"
end
return t,e
end
table.insert(t,"CLK_APBCLK0")
if ext.band(e["CLK_APBCLK0"],ext.lshift(65536,o))~=0 then
table.insert(t,"CLK_CLKSEL1")
local r=ext.band(ext.rshift(e["CLK_CLKSEL1"],24),3)
local d=ext.band(ext.rshift(e["CLK_CLKDIV0"],8),15)
local h
local i
if r==0 then
h,i=get_XTL12M_clock(e,t)
elseif r==1 then
h,i=get_PLL_clock(e,t)
else
h,i=get_OSC22M_clock(e,t)
end
s=h/(d+1)
if s~=0 then
table.insert(t,"CLK_CLKDIV0")
n=string.format("UART%d clock frequency: <b>%sHz</b>, from %s.<br>",o,val2str(s),i)
else
a=string.format("UART%d clock is not available, %s.<br>",o,i)
end
else
a=string.format("UART%d clock is not available (see APBCLK0[%d].UART%d_EN).<br>",
o,o+16,o)
end
if a==""then
local e,t=get_uart_baudate(s)
if e~=0 then
n=n..string.format("UART baudrate: <b>%d</b><br>",e)
else
a=t..".<br>"
end
end
if a~=""then
a="<font color=red>"..a.."</font>"
i["pin_no_color"]=kBgColor_Error
end
if n~=""then
n="<b>Information</b><br>"..n
end
i["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
d,
a,
get_mfp_regs(e,u,l),
get_clk_informnation(e,t),
n)
end
function fill_NUC400_SPI(t,a,l,d,r,e)
local o=""
local n=""
local i={}
t["highlight_text"]=r
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_SPI
t["pin_bg_color"]=kBgColor_SPI
t["direction"]=kPinDirection_Unknown
t["status"]=kPinStatus_Unknown
table.insert(i,"CLK_APBCLK0")
if ext.band(a["CLK_APBCLK0"],ext.lshift(4096,e))~=0 then
table.insert(i,"CLK_CLKSEL1")
local t
local s
local h=ext.band(ext.rshift(a["CLK_CLKSEL1"],e+4),1)
if h==0 then
t,s=get_PLL_clock(a,i)
else
t,s=get_PCLK_clock(a,i)
end
if t~=0 then
local h=string.format("SPI%d_SPI_CTL",e)
local n=string.format("SPI%d_SPI_CLKDIV",e)
table.insert(i,h)
local h=ext.band(a[h],262144)
if h~=0 then
o=string.format("SPI%d is in <b>slave</b> mode.<br>",e)
else
o=string.format("SPI%d is in <b>master</b> mode.<br>",e)
table.insert(i,n)
local a=ext.band(a[n],255)
local t=t/(a+1)
o=o..string.format("SPI%d clock frequency: <b>%sHz</b>, from %s.<br>",
e,val2str(t),s)
end
else
n=string.format("SPI%d clock is not available, %s.<br>",e,s)
end
else
n=string.format("SPI%d clock is not available (see APBCLK0[%d].SPI%d_EN).<br>",
e,e+12,e)
end
if n~=""then
n="<font color=red>"..n.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if o~=""then
o="<b>Information</b><br>"..o
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
r,
n,
get_mfp_regs(a,l,d),
get_clk_informnation(a,i),
o)
end
function fill_NUC400_SPI_IO(e,a,o,t)
local o=string.format("SPI%d_SPI_CTL",o)
local a=ext.band(a[o],262144)
if a==0 then
if t then
e["direction"]=kPinDirection_In
else
e["direction"]=kPinDirection_PushPullOut
end
else
if t then
e["direction"]=kPinDirection_PushPullOut
else
e["direction"]=kPinDirection_In
end
end
end
function fill_NUC400_ADC(a,e,d,r,h)
local o=""
local i=""
local t={}
a["highlight_text"]=h
a["normal_color"]=kColor_Invalid
a["highlight_color"]=kColor_ADC
a["pin_bg_color"]=kBgColor_ADC
a["direction"]=kPinDirection_In
a["status"]=kPinStatus_Unknown
table.insert(t,"CLK_APBCLK0")
if ext.band(e["CLK_APBCLK0"],268435456)~=0 then
table.insert(t,"CLK_CLKSEL1")
local s=ext.rshift(ext.band(e["CLK_CLKSEL1"],12),2)
local h=ext.rshift(ext.band(e["CLK_CLKDIV0"],16711680),16)
local n
local a
if s==0 then
n,a=get_XTL12M_clock(e,t)
elseif s==1 then
n,a=get_PLL_clock(e,t)
elseif s==3 then
n,a=get_OSC22M_clock(e,t)
else
n,a=get_PCLK_clock(e,t)
end
local n=n/(h+1)
if n~=0 then
table.insert(t,"CLK_CLKDIV0")
table.insert(t,"GCR_VREFCR")
local e=ext.band(e["GCR_VREFCR"],256)
if e==0 then
o="ADC is in <b>basic</b> ADC mode.<br>"
o=o..string.format("ADC clock frequency: <b>%sHz</b>, from %s.<br>",val2str(n),a)
else
o="ADC is in <font color=red><b>enhanced</b></font> ADC mode, (see VREFCR[8].ADC_SEL).<br>"
end
else
i="ADC clock is not available, "..a..".<br>"
end
else
i="ADC clock is not available (see APBCLK0[28].ADC_EN).<br>"
end
if i~=""then
i="<font color=red>"..i.."</font>"
a["pin_no_color"]=kBgColor_Error
end
if o~=""then
o="<b>Information</b><br>"..o
end
a["information"]=string.format("<b>%s</b><br>%s<br>%s%s%s",
h,
i,
get_mfp_regs(e,d,r),
get_clk_informnation(e,t),
o)
end
function fill_NUC400_EADC(e,a,s,h,n)
local t=""
local o=""
local i={}
e["highlight_text"]=n
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_ADC
e["pin_bg_color"]=kBgColor_ADC
e["direction"]=kPinDirection_In
e["status"]=kPinStatus_Unknown
table.insert(i,"CLK_APBCLK1")
if ext.band(a["CLK_APBCLK1"],2147483648)~=0 then
local s=ext.rshift(ext.band(a["CLK_CLKDIV0"],16711680),16)
local n
local e
n,e=get_PCLK_clock(a,i)
local n=n/(s+1)
if n~=0 then
table.insert(i,"CLK_CLKDIV0")
table.insert(i,"GCR_VREFCR")
local a=ext.band(a["GCR_VREFCR"],256)
if a~=0 then
t="ADC is in <b>enhanced</b> ADC mode.<br>"
t=t..string.format("EADC clock frequency: <b>%sHz</b>, from %s.<br>",val2str(n),e)
else
t="ADC is in <font color=red><b>basic</b></font> ADC mode, (see VREFCR[8].ADC_SEL).<br>"
end
else
o="EADC clock is not available, "..e..".<br>"
end
else
o="EADC clock is not available (see APBCLK1[31].EADC_EN).<br>"
end
if o~=""then
o="<font color=red>"..o.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if t~=""then
t="<b>Information</b><br>"..t
end
e["information"]=string.format("<b>%s</b><br>%s<br>%s%s%s",
n,
o,
get_mfp_regs(a,s,h),
get_clk_informnation(a,i),
t)
end
function fill_NUC400_USB(e,a,s,o,t)
local i=""
local n={}
e["highlight_text"]=t
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_USB
e["pin_bg_color"]=kBgColor_USB
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
if s==nil or o==nil then
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s",
t,
i,
get_clk_informnation(a,n))
else
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s",
t,
i,
get_mfp_regs(a,s,o),
get_clk_informnation(a,n))
end
end
function fill_NUC400_USB_OTG(e,a,n,s,o)
local t=""
local i={}
e["highlight_text"]=o
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_USB
e["pin_bg_color"]=kBgColor_USB
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
table.insert(i,"CLK_APBCLK0")
if ext.band(a["CLK_APBCLK0"],67108864)==0 then
t="USB OTG clock is not available (see APBCLK0[26].OTG_EN).<br>"
t="<font color=red>"..t.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if n==nil or s==nil then
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s",
o,
t,
get_clk_informnation(a,i))
else
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s",
o,
t,
get_mfp_regs(a,n,s),
get_clk_informnation(a,i))
end
end
function fill_NUC400_CAN(e,t,r,d,h,a)
local i=""
local o=""
local n={}
e["highlight_text"]=h
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_CAN
e["pin_bg_color"]=kBgColor_CAN
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
function get_can_bitrate(s,a)
local e=string.format("CAN%d_CAN_BTIME",a)
local a=string.format("CAN%d_CAN_BRPE",a)
table.insert(n,e)
table.insert(n,a)
local i=ext.band(ext.rshift(t[e],8),15)
local o=ext.band(ext.rshift(t[e],12),7)
local e=
ext.bor(ext.band(t[e],63),
ext.lshift(ext.band(t[a],15),6))
local e=s/(e+1)/(i+o+3)/1000
return e
end
table.insert(n,"CLK_APBCLK0")
if ext.band(t["CLK_APBCLK0"],ext.lshift(16777216,a))~=0 then
local e
local s
e,s=get_PCLK_clock(t,n)
if e~=0 then
local e=get_can_bitrate(e,a)
i=string.format("CAN bitrate: <b>%sHz</b>, from %s.<br>",val2str(e),s)
else
o=string.format("CAN%d clock is not available, %s.<br>",a,s)
end
else
o=string.format("CAN%d clock is not available (see APBCLK0[%d].CAN%d_EN).<br>",
a,a+24,a)
end
if o~=""then
o="<font color=red>"..o.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if i~=""then
i="<b>Information</b><br>"..i
end
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
h,
o,
get_mfp_regs(t,r,d),
get_clk_informnation(t,n),
i)
end
function fill_NUC400_I2C(a,o,l,d,r,e)
local i=""
local t=""
local n={}
a["highlight_text"]=r
a["normal_color"]=kColor_Invalid
a["highlight_color"]=kColor_I2C
a["pin_bg_color"]=kBgColor_I2C
a["direction"]=kPinDirection_Unknown
a["status"]=kPinStatus_Unknown
local s=0
if e<4 then
table.insert(n,"CLK_APBCLK0")
s=ext.band(o["CLK_APBCLK0"],ext.lshift(256,e))
elseif e==4 then
table.insert(n,"CLK_APBCLK1")
s=ext.band(o["CLK_APBCLK1"],256)
end
if s~=0 then
local s=string.format("I2C%d_I2CON",e)
local a=string.format("I2C%d_I2CLK",e)
table.insert(n,s)
local s=ext.band(o[s],64)
if s~=0 then
local s,h=get_PCLK_clock(o,n)
if s~=0 then
table.insert(n,a)
local t=ext.band(o[a],255)
local t=s/(4*(t+1))
i=i..string.format("I2C%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(t),h)
else
t=string.format("I2C%d clock is not available, %s.<br>",e,h)
end
else
t=string.format("I2C%d controller disabled (see I2C%d.I2CON[6].ENS1).<br>",e,e)
end
else
if e<4 then
t=string.format("I2C%d clock is not available (see APBCLK0[%d].I2C%d_EN).<br>",e,8+e,e)
elseif e==4 then
t=string.format("I2C%d clock is not available (see APBCLK1[%d].I2C%d_EN).<br>",e,8,e)
end
end
if t~=""then
t="<font color=red>"..t.."</font>"
a["pin_no_color"]=kBgColor_Error
end
if i~=""then
i="<b>Information</b><br>"..i
end
a["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
r,
t,
get_mfp_regs(o,l,d),
get_clk_informnation(o,n),
i)
end
function fill_NUC400_CLKO(t,e,r,d,h)
local n=""
local o=""
local a={}
t["highlight_text"]=h
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_CLK
t["pin_bg_color"]=kBgColor_CLK
t["direction"]=kPinDirection_PushPullOut
t["status"]=kPinStatus_Unknown
table.insert(a,"CLK_APBCLK0")
if ext.band(e["CLK_APBCLK0"],64)~=0 then
table.insert(a,"CLK_FRQDIV")
local t=ext.band(e["CLK_FRQDIV"],16)
if t~=0 then
table.insert(a,"CLK_CLKSEL1")
local s=ext.rshift(ext.band(e["CLK_CLKSEL1"],805306368),28)
local i
local t
if s==0 then
i,t=get_XTL12M_clock(e,a)
elseif s==1 then
i,t=get_XTL32K_clock(e,a)
elseif s==2 then
i,t=get_HCLK_clock(e,a)
else
i,t=get_OSC22M_clock(e,a)
end
local a
local s=ext.band(e["CLK_FRQDIV"],32)
if s~=0 then
a=i
else
local e=ext.band(e["CLK_FRQDIV"],15)
a=i/ext.lshift(1,(e+1))
end
if a~=0 then
n=string.format("FRQDIV clock frequency: <b>%sHz</b>, from %s.<br>",val2str(a),t)
else
o="FRQDIV clock is not available, "..t..".<br>"
end
else
o="Frequency divider disabled (see FRQDIV[4].DIVIDER_EN).<br>"
end
else
o="FRQDIV clock is not available (see APBCLK0[6].FDIV_EN).<br>"
end
if o~=""then
o="<font color=red>"..o.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if n~=""then
n="<b>Information</b><br>"..n
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
h,
o,
get_mfp_regs(e,r,d),
get_clk_informnation(e,a),
n)
end
function fill_NUC400_EBI(t,a,r,h,s)
local e=""
local o=""
local i={}
t["highlight_text"]=s
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_EBI
t["pin_bg_color"]=kBgColor_EBI
t["direction"]=kPinDirection_PushPullOut
t["status"]=kPinStatus_Unknown
table.insert(i,"CLK_AHBCLK")
local n=ext.band(a["CLK_AHBCLK"],8)
if n~=0 then
local t
local n
t,n=get_HCLK_clock(a,i)
if t~=0 then
table.insert(i,"EBI_EBICON")
local s=ext.band(ext.rshift(a["EBI_EBICON"],8),7)
local o=t
if s<=5 then
o=ext.rshift(t,s)
end
e=e..string.format("EBI MCLK frequency : <b>%sHz</b>, from %s.<br>",
val2str(o),n)
for o=0,3 do
local t=string.format("EBI_EXTIME%d",o)
table.insert(i,t)
local i=ext.band(ext.rshift(a[t],30),1)
local n=ext.band(ext.rshift(a[t],29),1)
local t=ext.band(ext.rshift(a[t],28),1)
if t~=0 then
e=e..string.format("EBI Bank%d: address/data bus separating mode <b>%s</b>, and data width <b>%d-bit</b><br>",
o,(i~=0)and"enabled"or"disabled",(n~=0)and 16 or 8)
else
e=e..string.format("EBI Bank%d <b>disabled</b><br>",o)
end
end
else
o=string.format("EBI clock is not available, %s.<br>",n)
end
else
o="EBI clock is not available (see AHBCLK[3].EBI_EN).<br>"
end
if o~=""then
o="<font color=red>"..o.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if e~=""then
e="<b>Information</b><br>"..e
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
s,
o,
get_mfp_regs(a,r,h),
get_clk_informnation(a,i),
e)
end
function fill_NUC400_Normal(e,i,a,o,t)
local n=""
e["highlight_text"]=t
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_Normal
e["pin_bg_color"]=kBgColor_Normal
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
n=t.."<br>"
if a==nil or o==nil then
e["information"]=string.format(
"<b>%s</b><br>",
t)
else
e["information"]=string.format(
"<b>%s</b><br><br>"..
"%s",
t,
get_mfp_regs(i,a,o))
end
end
function fill_NUC400_SC(n,t,l,u,d,e)
local o=""
local i=""
local a={}
local h=0
n["highlight_text"]=d
n["normal_color"]=kColor_Invalid
n["highlight_color"]=kColor_SC
n["pin_bg_color"]=kBgColor_SC
n["direction"]=kPinDirection_PushPullOut
n["status"]=kPinStatus_Unknown
table.insert(a,"CLK_APBCLK1")
if ext.band(t["CLK_APBCLK1"],ext.lshift(1,e))~=0 then
local r=string.format("SC%d_SC_CTL",e)
table.insert(a,r)
if ext.band(t[r],1)~=0 then
table.insert(a,"CLK_CLKSEL3")
local r=ext.band(ext.rshift(t["CLK_CLKSEL3"],e*2),3)
local s
local n
if r==0 then
s,n=get_XTL12M_clock(t,a)
elseif r==1 then
s,n=get_PLL_clock(t,a)
elseif r==2 then
s,n=get_PCLK_clock(t,a)
else
s,n=get_OSC22M_clock(t,a)
end
local r
if e<=3 then
table.insert(a,"CLK_CLKDIV1")
r=ext.band(ext.rshift(t["CLK_CLKDIV1"],e*8),255)
elseif e<=5 then
table.insert(a,"CLK_CLKDIV2")
r=ext.band(ext.rshift(t["CLK_CLKDIV2"],(e-4)*8),255)
else
i=string.format("SC%d do not exist.<br>",e)
end
if i==""then
h=s/(r+1)
if h~=0 then
o=o..string.format("SC%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(h),n)
else
i=string.format("SC%d clock is not available, ",e)..n..".<br>"
end
end
else
i=string.format("SC%d engine disabled (see %s[0].SC_CEN).<br>",e,r)
end
else
i=string.format("SC%d clock is not available (see APBCLK1[%d].SC%d_EN).<br>",e,e,e)
end
if i==""then
local i=string.format("SC%d_SC_UACTL",e)
local n=string.format("SC%d_SC_ETUCR",e)
table.insert(a,i)
table.insert(a,n)
local a=ext.band(t[n],4095)
local a=h/(a+1)
if ext.band(t[i],1)~=0 then
o=string.format("SC%d is in <b>UART</b> mode.<br>",e)..o
..string.format("UART baudrate: <b>%d</b><br>",a)
else
o=string.format("SC%d is in <b>Smart Card</b> mode.<br>",e)..o
end
end
if i~=""then
i="<font color=red>"..i.."</font>"
n["pin_no_color"]=kBgColor_Error
end
if o~=""then
o="<b>Information</b><br>"..o
end
n["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
d,
i,
get_mfp_regs(t,l,u),
get_clk_informnation(t,a),
o)
end
function fill_NUC400_EMC(e,t,h,r,s)
local a=""
local o=""
local i={}
e["highlight_text"]=s
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_EMC
e["pin_bg_color"]=kBgColor_EMC
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
table.insert(i,"CLK_AHBCLK")
local n=ext.band(t["CLK_AHBCLK"],32)
if n~=0 then
table.insert(i,"CLK_CLKSEL0")
local s=ext.rshift(ext.band(t["CLK_CLKSEL0"],1024),10)
local n
local e
if s==0 then
n,e=get_XTL12M_clock(t,i)
else
n,e=get_PLL_clock(t,i)
end
if n~=0 then
table.insert(i,"CLK_CLKDIV3")
local t=ext.band(ext.rshift(t["CLK_CLKDIV3"],16),255)
local t=n/(t+1)
a=a..string.format("EMC MDCLK clock frequency: <b>%sHz</b>, from %s.<br>",val2str(t),e)
else
o=string.format("EMC clock is not available, %s.<br>",e)
end
else
o="EMC clock is not available (see AHBCLK[5].EMC_EN).<br>"
end
if o~=""then
o="<font color=red>"..o.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if a~=""then
a="<b>Information</b><br>"..a
end
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
s,
o,
get_mfp_regs(t,h,r),
get_clk_informnation(t,i),
a)
end
function fill_NUC400_SD(a,e,d,r,h,t)
local n=""
local o=""
local t={}
a["highlight_text"]=h
a["normal_color"]=kColor_Invalid
a["highlight_color"]=kColor_SD
a["pin_bg_color"]=kBgColor_SD
a["direction"]=kPinDirection_Unknown
a["status"]=kPinStatus_Unknown
table.insert(t,"CLK_AHBCLK")
if ext.band(e["CLK_AHBCLK"],64)~=0 then
table.insert(t,"CLK_CLKSEL0")
local s=ext.band(ext.rshift(e["CLK_CLKSEL0"],20),3)
local h=ext.band(ext.rshift(e["CLK_CLKDIV0"],24),255)
local a
local i
if s==0 then
a,i=get_XTL12M_clock(e,t)
elseif s==1 then
a,i=get_USBPLL_clock(e,t)
elseif s==2 then
a,i=get_HCLK_clock(e,t)
else
a,i=get_OSC22M_clock(e,t)
end
if a~=0 then
table.insert(t,"CLK_CLKDIV0")
local e=a/(h+1)
n=string.format("SDHOST clock frequency: <b>%sHz</b>, from %s.<br>",val2str(e),i)
else
o="SDHOST clock is not available, "..i..".<br>"
end
else
o="SDHOST clock is not available (see AHBCLK[6].SDHOST_EN).<br>"
end
if o~=""then
o="<font color=red>"..o.."</font>"
a["pin_no_color"]=kBgColor_Error
end
if n~=""then
n="<b>Information</b><br>"..n
end
a["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
h,
o,
get_mfp_regs(e,d,r),
get_clk_informnation(e,t),
n)
end
function fill_NUC400_ECAP(t,o,d,r,h,e)
local i=""
local a=""
local n={}
t["highlight_text"]=h
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_CAP
t["pin_bg_color"]=kBgColor_CAP
t["direction"]=kPinDirection_In
t["status"]=kPinStatus_Unknown
table.insert(n,"CLK_APBCLK1")
if ext.band(o["CLK_APBCLK1"],ext.lshift(67108864,e))~=0 then
local s
local t
s,t=get_HCLK_clock(o,n)
if s~=0 then
local h=string.format("CAP%d_CTR0",e)
table.insert(n,h)
local o=ext.band(o[h],536870912)
if o~=0 then
i=string.format("ECAP%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(s),t)
else
a=string.format("Input capture function disabled (see CAP%d.CAP_CTR0[29].CAP_EN).<br>",e)
end
else
a=string.format("ECAP%d clock is not available, %s.<br>",e,t)
end
else
a=string.format("ECAP%d clock is not available (see APBCLK1[%d].ECAP%d_EN).<br>",e,e+26,e)
end
if a~=""then
a="<font color=red>"..a.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if i~=""then
i="<b>Information</b><br>"..i
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>%s%s%s",
h,
a,
get_mfp_regs(o,d,r),
get_clk_informnation(o,n),
i)
end
function fill_NUC400_QEI(t,o,l,d,r,e)
local i=""
local a=""
local n={}
t["highlight_text"]=r
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_QEI
t["pin_bg_color"]=kBgColor_QEI
t["direction"]=kPinDirection_In
t["status"]=kPinStatus_Unknown
table.insert(n,"CLK_APBCLK1")
if ext.band(o["CLK_APBCLK1"],ext.lshift(4194304,e))~=0 then
local s
local t
s,t=get_HCLK_clock(o,n)
if s~=0 then
local h=string.format("QEI%d_CTR",e)
table.insert(n,h)
local o=ext.band(o[h],536870912)
if o~=0 then
i=string.format("QEI%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(s),t)
else
a=string.format("QEI%d controller function disabled (see QEI%d.QEI_CTR[29].QEI_EN).<br>",e,e)
end
else
a=string.format("QEI%d clock is not available, %s.<br>",e,t)
end
else
a=string.format("QEI%d clock is not available (see APBCLK1[%d].QEI%d_EN).<br>",e,e+22,e)
end
if a~=""then
a="<font color=red>"..a.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if i~=""then
i="<b>Information</b><br>"..i
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>%s%s%s",
r,
a,
get_mfp_regs(o,l,d),
get_clk_informnation(o,n),
i)
end
function fill_NUC400_VCAP(t,e,d,r,h)
local n=""
local o=""
local a={}
t["highlight_text"]=h
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_CAP
t["pin_bg_color"]=kBgColor_CAP
t["direction"]=kPinDirection_Unknown
t["status"]=kPinStatus_Unknown
table.insert(a,"CLK_AHBCLK")
if ext.band(e["CLK_AHBCLK"],256)~=0 then
table.insert(a,"CLK_CLKSEL0")
local s=ext.rshift(ext.band(e["CLK_CLKSEL0"],196608),16)
local i
local t
if s==0 then
i,t=get_XTL12M_clock(e,a)
elseif s==1 then
i,t=get_USBPLL_clock(e,a)
elseif s==2 then
i,t=get_HCLK_clock(e,a)
else
i,t=get_OSC22M_clock(e,a)
end
if i~=0 then
table.insert(a,"CAP_CAPCTL")
local e=ext.band(e["CAP_CAPCTL"],1)
if e~=0 then
n=string.format("CAP clock frequency: <b>%sHz</b>, from %s.<br>",val2str(i),t)
else
o=string.format("Capture engine disabled (see CAPCTL[0].CAPEN).<br>")
end
else
o=string.format("CAP clock is not available, %s.<br>",t)
end
else
o="VCAP clock is not available (see AHBCLK[8].CAP_EN).<br>"
end
if o~=""then
o="<font color=red>"..o.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if n~=""then
n="<b>Information</b><br>"..n
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>%s%s%s",
h,
o,
get_mfp_regs(e,d,r),
get_clk_informnation(e,a),
n)
end
function fill_NUC400_TM(i,t,l,d,r,e)
local o=""
local n=""
local a={}
i["highlight_text"]=r
i["normal_color"]=kColor_Invalid
i["highlight_color"]=kColor_TM
i["pin_bg_color"]=kBgColor_TM
i["direction"]=kPinDirection_Unknown
i["status"]=kPinStatus_Unknown
table.insert(a,"CLK_APBCLK0")
local h=ext.band(t["CLK_APBCLK0"],ext.lshift(4,e))
local s
if h~=0 then
local i=string.format("TMR%d%d_TCSR%d",ext.rshift(e,1)*2,ext.rshift(e,1)*2+1,e)
table.insert(a,i)
local i=ext.band(t[i],16777216)
if i~=0 then
o=string.format("TMR%d external counting pin function enabled.<br>",e)
else
table.insert(a,"CLK_CLKSEL1")
s=ext.band(ext.rshift(t["CLK_CLKSEL1"],8+e*4),7)
local i
local h
if s==0 then
i,h=get_XTL12M_clock(t,a)
elseif s==1 then
i,h=get_XTL32K_clock(t,a)
elseif s==2 then
i,h=get_PCLK_clock(t,a)
elseif s==3 then
o=string.format("TMR%d clock source from external trigger.<br>",e)
elseif s==5 then
i,h=get_OSC10K_clock(t,a)
elseif s==7 then
i,h=get_OSC22M_clock(t,a)
else
n=string.format("TMR%d clock source is undefined (see CLKSEL1[%d:%d].TMR%d_S).<br>",
e,8+e*4+2,8+e*4,e)
end
if n==""and o==""then
if i~=0 then
o=string.format("TMR%d clock frequency: <b>%sHz</b>, from %s.<br>",
e,val2str(i),h)
else
n=string.format("TMR%d clock is not available, %s.<br>",e,h)
end
end
end
else
n=string.format("TMR%d clock is not available (see APBCLK0[%d].TMR%d_EN).<br>",e,e+2,e)
end
if n~=""then
n="<font color=red>"..n.."</font>"
i["pin_no_color"]=kBgColor_Error
end
if o~=""then
o="<b>Information</b><br>"..o
end
i["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
r,
n,
get_mfp_regs(t,l,d),
get_clk_informnation(t,a),
o)
end
function fill_NUC400_OPA(e,t,n,s,i,a)
local o=""
local o={}
e["highlight_text"]=i
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_OPA
e["pin_bg_color"]=kBgColor_OPA
e["direction"]=kPinDirection_In
e["status"]=kPinStatus_Unknown
table.insert(o,"CLK_APBCLK1")
local h=ext.band(t["CLK_APBCLK1"],1073741824)
if h==0 then
warn="OPA clock is not available (see APBCLK1[30].OPA_EN).<br>"
else
table.insert(o,"OPA_OPACR")
local e=ext.band(t["OPA_OPACR"],ext.lshift(1,a))
if e==0 then
warn=string.format("OP Amplifier %d disabled (see OPACR[%d].OP%d_EN).<br>",a,a,a)
end
end
if warn~=""then
warn="<font color=red>"..warn.."</font>"
e["pin_no_color"]=kBgColor_Error
end
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s",
i,
warn,
get_mfp_regs(t,n,s),
get_clk_informnation(t,o))
end
function fill_NUC400_PWM(s,t,m,c,u,a,e)
local l=""
local o=""
local n={}
s["highlight_text"]=u
s["normal_color"]=kColor_Invalid
s["highlight_color"]=kColor_PWM
s["pin_bg_color"]=kBgColor_PWM
s["direction"]=kPinDirection_Unknown
s["status"]=kPinStatus_Unknown
local r
local h
local i
local d
local f
if a==0 and(e==0 or e==1)then
r=16
h="PWM0_01"
d="CBP01"
CBPxy_Bit=0
i=ext.rshift(ext.band(t["CLK_CLKSEL2"],7),0)
elseif a==0 and(e==2 or e==3)then
r=17
h="PWM0_23"
d="CBP23"
CBPxy_Bit=8
i=ext.rshift(ext.band(t["CLK_CLKSEL2"],112),4)
elseif a==0 and(e==4 or e==5)then
r=18
h="PWM0_45"
d="CBP45"
CBPxy_Bit=16
i=ext.rshift(ext.band(t["CLK_CLKSEL2"],1792),8)
elseif a==1 and(e==0 or e==1)then
r=19
h="PWM1_01"
d="CBP01"
CBPxy_Bit=0
i=ext.rshift(ext.band(t["CLK_CLKSEL2"],28672),12)
elseif a==1 and(e==2 or e==3)then
r=20
h="PWM1_23"
d="CBP23"
CBPxy_Bit=8
i=ext.rshift(ext.band(t["CLK_CLKSEL2"],458752),16)
elseif a==1 and(e==4 or e==5)then
r=21
h="PWM1_45"
d="CBP45"
CBPxy_Bit=16
i=ext.rshift(ext.band(t["CLK_CLKSEL2"],7340032),20)
else
o=string.format("PWM%d channel%d do not exist.<br>",a,e)
end
if o==""then
table.insert(n,"CLK_APBCLK1")
local s=ext.band(t["CLK_APBCLK1"],ext.lshift(1,r))
if s~=0 then
table.insert(n,"CLK_CLKSEL2")
local r
local s
if i==0 then
r,s=get_XTL12M_clock(t,n)
elseif i==1 then
r,s=get_XTL32K_clock(t,n)
elseif i==2 then
r,s=get_PCLK_clock(t,n)
elseif i==3 then
r,s=get_OSC22M_clock(t,n)
elseif i==4 then
r,s=get_OSC10K_clock(t,n)
else
o=string.format("PWM%d channel%d clock source select error (see CLKSEL2.%s_S).<br>",
a,e,h)
end
if o==""then
if r==0 then
o=string.format("PWM%d channel%d clock is not available, %s.<br>",a,e,s)
else
local h=string.format("PWM%d",a).."_PWM_CDR"
local i=string.format("PWM%d",a).."_PWM_CPR"
table.insert(n,h)
table.insert(n,i)
local n=ext.band(ext.rshift(t[h],e*4),7)
local n=({2,4,8,16,1,0,0,0})[n+1]
local t=ext.band(ext.rshift(t[i],CBPxy_Bit),255)
if t==0 then
o=string.format("PWM%d channel%d counter will be stopped since PWM_CPR[%d:%d].%s = 0<br>",
a,e,
CBPxy_Bit+7,
CBPxy_Bit,
d)
elseif n==0 then
o=string.format("PWM%d channel%d counter clock is not available (see PWM_CDR[%d:%d].CBD%d).<br>",
a,e,
4*e+2,
4*e,
e)
else
local t=r/(t+1)
local o=t/n
l=string.format("PWM%d channel%d clock frequency: <b>%sHz</b> (Pre-Scaled), from %s.<br>"..
"PWM%d channel%d counter frequency: <b>%sHz</b><br>",
a,e,val2str(t),s,
a,e,val2str(o))
end
end
end
else
o=string.format("PWM%d channel%d clock is not available (see APBCLK1[%d].%s_EN).<br>",
a,e,r,h)
end
end
if o~=""then
o="<font color=red>"..o.."</font>"
s["pin_no_color"]=kBgColor_Error
end
if l~=""then
l="<b>Information</b><br>"..l
end
s["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
u,
o,
get_mfp_regs(t,m,c),
get_clk_informnation(t,n),
l)
end
function fill_NUC400_EPWM(a,i,d,l,r,t)
local n=""
local e=""
local h={}
a["highlight_text"]=r
a["normal_color"]=kColor_Invalid
a["highlight_color"]=kColor_PWM
a["pin_bg_color"]=kBgColor_PWM
a["direction"]=kPinDirection_Unknown
a["status"]=kPinStatus_Unknown
local s
local o
local o
if t==0 then
s=28
o="EPWM0_PWMCON0"
elseif t==1 then
s=29
o="EPWM1_PWMCON1"
else
e=string.format("EPWM%d do not exist",t)
end
if e==""then
table.insert(h,"CLK_APBCLK1")
local a=ext.band(i["CLK_APBCLK1"],ext.lshift(1,s))
if a~=0 then
local s
local a
s,a=get_HCLK_clock(i,h)
if s==0 then
e=string.format("EPWM%d clock is not available, %s.<br>",t,a)
else
table.insert(h,o)
local h=ext.band(i[o],128)
if h~=0 then
local e=ext.rshift(ext.band(i[o],12),2)
local e=s/({1,2,4,16})[e+1]
n=string.format("EPWM%d counter frequency: <b>%sHz</b>, from %s.<br>",
t,val2str(e),a)
else
e=string.format("EPWM%d counter stops running (see %s[7].PWMRUN).<br>",t,o)
end
end
else
e=string.format("EPWM%d clock is not available (see APBCLK1[%d].EPWM%d_EN).<br>",
t,s,t)
end
end
if e~=""then
e="<font color=red>"..e.."</font>"
a["pin_no_color"]=kBgColor_Error
end
if n~=""then
n="<b>Information</b><br>"..n
end
a["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
r,
e,
get_mfp_regs(i,d,l),
get_clk_informnation(i,h),
n)
end