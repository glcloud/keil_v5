REG=
{
SYS_SYS_PDID=1073741824,
SYS_SYS_RSTSTS=1073741828,
SYS_SYS_IPRST0=1073741832,
SYS_SYS_IPRST1=1073741836,
SYS_SYS_IPRST2=1073741840,
SYS_SYS_ALTCTL=1073741844,
SYS_SYS_BODCTL=1073741848,
SYS_SYS_IVSCTL=1073741852,
SYS_SYS_PORCTL0=1073741860,
SYS_SYS_VREFCTL=1073741864,
SYS_SYS_USBPHY=1073741868,
SYS_SYS_GPA_MFPL=1073741872,
SYS_SYS_GPA_MFPH=1073741876,
SYS_SYS_GPB_MFPL=1073741880,
SYS_SYS_GPB_MFPH=1073741884,
SYS_SYS_GPC_MFPL=1073741888,
SYS_SYS_GPC_MFPH=1073741892,
SYS_SYS_GPD_MFPL=1073741896,
SYS_SYS_GPD_MFPH=1073741900,
SYS_SYS_GPE_MFPL=1073741904,
SYS_SYS_GPE_MFPH=1073741908,
SYS_SYS_GPF_MFPL=1073741912,
SYS_SYS_GPF_MFPH=1073741916,
SYS_SYS_GPG_MFPL=1073741920,
SYS_SYS_GPG_MFPH=1073741924,
SYS_SYS_GPH_MFPL=1073741928,
SYS_SYS_GPH_MFPH=1073741932,
SYS_SYS_GPA_MFOS=1073741952,
SYS_SYS_GPB_MFOS=1073741956,
SYS_SYS_GPC_MFOS=1073741960,
SYS_SYS_GPD_MFOS=1073741964,
SYS_SYS_GPE_MFOS=1073741968,
SYS_SYS_GPF_MFOS=1073741972,
SYS_SYS_GPG_MFOS=1073741976,
SYS_SYS_GPH_MFOS=1073741980,
SYS_SYS_HXTF_CTL=1073742000,
SYS_SYS_HIRCF_CTL=1073742004,
SYS_SYS_SRAMICTL=1073742016,
SYS_SYS_SRAMSTS=1073742020,
SYS_SYS_SRAMEADR=1073742024,
SYS_SYS_SRAMBCTL=1073742032,
SYS_SYS_SRAMBSTS=1073742036,
SYS_SYS_SRAMPTY=1073742040,
SYS_SYS_SRAMPCTL=1073742044,
SYS_SYS_SRAMPPCT=1073742048,
SYS_SYS_TCTL48M=1073742052,
SYS_SYS_TIEN48M=1073742056,
SYS_SYS_TISTS48M=1073742060,
SYS_SYS_TCTL12M=1073742064,
SYS_SYS_TIEN12M=1073742068,
SYS_SYS_TISTS12M=1073742072,
SYS_SYS_REGLCTL=1073742080,
SYS_SYS_RCADJ48M=1073742092,
SYS_SYS_RCADJ=1073742096,
SYS_SYS_TSOFFSET=1073742100,
SYS_SYS_VREFTRIM=1073742104,
SYS_SYS_LDOTRIM=1073742112,
SYS_SYS_LDOULVT=1073742124,
SYS_SYS_LDOLVT=1073742128,
SYS_SYS_LDOHVT=1073742132,
SYS_SYS_LIRCT=1073742136,
SYS_SYS_RC3P3KT=1073742140,
SYS_SYS_TCOSC48M=1073742144,
SYS_SYS_TCOSC32K_RTC=1073742156,
SYS_SYS_BUCKCTL=1073742160,
SYS_SYS_LDOEAT=1073742184,
SYS_SYS_TCHIPCTL=1073742208,
SYS_SYS_SRAMRMC=1073742212,
SYS_SYS_HIRCTCTL=1073742216,
SYS_SYS_HXTTCTL=1073742224,
SYS_SYS_ACMPTCTL=1073742228,
SYS_SYS_USBTCTL=1073742232,
SYS_SYS_BLOPTION=1073742272,
SYS_SYS_PORCTL1=1073742316,
SYS_SYS_ETMCTL=1073742320,
SYS_SYS_PLCTL=1073742328,
SYS_SYS_PLSTS=1073742332,
SCS_SYST_CTRL=3758153744,
SCS_SYST_LOAD=3758153748,
SCS_SYST_VAL=3758153752,
SCS_CPUID=3758157056,
SCS_ICSR=3758157060,
SCS_VTOR=3758157064,
SCS_AIRCR=3758157068,
SCS_SCR=3758157072,
SCS_CCR=3758157076,
SCS_SHPR2=3758157084,
SCS_SHPR3=3758157088,
SCS_SHCSR=3758157092,
SCS_DFSR=3758157104,
SCS_MPU_TYPE=3758157200,
SCS_MPU_CTRL=3758157204,
SCS_MPU_RNR=3758157208,
SCS_MPU_RBAR=3758157212,
SCS_MPU_RLAR=3758157216,
SCS_MPU_MAIR0=3758157248,
SCS_MPU_MAIR1=3758157252,
SCS_SAU_CTRL=3758157264,
SCS_SAU_TYPE=3758157268,
SCS_SAU_RNR=3758157272,
SCS_SAU_RBAR=3758157276,
SCS_SAU_RLAR=3758157280,
SCS_DHCSR=3758157296,
SCS_DCRSR=3758157300,
SCS_DCRDR=3758157304,
SCS_DEMCR=3758157308,
SCS_DAUTHCTRL=3758157316,
SCS_DSCSR=3758157320,
NVIC_NVIC_ISER0=3758153984,
NVIC_NVIC_ISER1=3758153988,
NVIC_NVIC_ISER2=3758153992,
NVIC_NVIC_ISER3=3758153996,
NVIC_NVIC_ICER0=3758154112,
NVIC_NVIC_ICER1=3758154116,
NVIC_NVIC_ICER2=3758154120,
NVIC_NVIC_ICER3=3758154124,
NVIC_NVIC_ISPR0=3758154240,
NVIC_NVIC_ISPR1=3758154244,
NVIC_NVIC_ISPR2=3758154248,
NVIC_NVIC_ISPR3=3758154252,
NVIC_NVIC_ICPR0=3758154368,
NVIC_NVIC_ICPR1=3758154372,
NVIC_NVIC_ICPR2=3758154376,
NVIC_NVIC_ICPR3=3758154380,
NVIC_NVIC_IABR0=3758154496,
NVIC_NVIC_IABR1=3758154500,
NVIC_NVIC_IABR2=3758154504,
NVIC_NVIC_IABR3=3758154508,
NVIC_NVIC_ITNS0=3758154624,
NVIC_NVIC_ITNS1=3758154628,
NVIC_NVIC_ITNS2=3758154632,
NVIC_NVIC_ITNS3=3758154636,
NVIC_NVIC_IPR0=3758154752,
NVIC_NVIC_IPR1=3758154756,
NVIC_NVIC_IPR2=3758154760,
NVIC_NVIC_IPR3=3758154764,
NVIC_NVIC_IPR4=3758154768,
NVIC_NVIC_IPR5=3758154772,
NVIC_NVIC_IPR6=3758154776,
NVIC_NVIC_IPR7=3758154780,
NVIC_NVIC_IPR8=3758154784,
NVIC_NVIC_IPR9=3758154788,
NVIC_NVIC_IPR10=3758154792,
NVIC_NVIC_IPR11=3758154796,
NVIC_NVIC_IPR12=3758154800,
NVIC_NVIC_IPR13=3758154804,
NVIC_NVIC_IPR14=3758154808,
NVIC_NVIC_IPR15=3758154812,
NVIC_NVIC_IPR16=3758154816,
NVIC_NVIC_IPR17=3758154820,
NVIC_NVIC_IPR18=3758154824,
NVIC_NVIC_IPR19=3758154828,
NVIC_NVIC_IPR20=3758154832,
NVIC_NVIC_IPR21=3758154836,
NVIC_NVIC_IPR22=3758154840,
NVIC_NVIC_IPR23=3758154844,
NVIC_NVIC_IPR24=3758154848,
NVIC_NVIC_IPR25=3758154852,
NMI_NMIEN=1073742592,
NMI_NMISTS=1073742596,
CLK_CLK_PWRCTL=1073742336,
CLK_CLK_AHBCLK=1073742340,
CLK_CLK_APBCLK0=1073742344,
CLK_CLK_APBCLK1=1073742348,
CLK_CLK_CLKSEL0=1073742352,
CLK_CLK_CLKSEL1=1073742356,
CLK_CLK_CLKSEL2=1073742360,
CLK_CLK_CLKSEL3=1073742364,
CLK_CLK_CLKDIV0=1073742368,
CLK_CLK_CLKDIV1=1073742372,
CLK_CLK_CLKDIV4=1073742384,
CLK_CLK_PCLKDIV=1073742388,
CLK_CLK_PLLCTL=1073742400,
CLK_CLK_PLLICP=1073742408,
CLK_CLK_STATUS=1073742416,
CLK_CLK_CLKOCTL=1073742432,
CLK_CLK_CLKDCTL=1073742448,
CLK_CLK_CLKDSTS=1073742452,
CLK_CLK_CDUPB=1073742456,
CLK_CLK_CDLOWB=1073742460,
CLK_CLK_PMUCTL=1073742480,
CLK_CLK_PMUSTS=1073742484,
CLK_CLK_LDOCTL=1073742488,
CLK_CLK_SWKDBCTL=1073742492,
CLK_CLK_PASWKCTL=1073742496,
CLK_CLK_PBSWKCTL=1073742500,
CLK_CLK_PCSWKCTL=1073742504,
CLK_CLK_PDSWKCTL=1073742508,
CLK_CLK_IOPDCTL=1073742512,
CLK_CLK_HXTFSEL=1073742516,
CLK_CLK_TESTCLK=1073742576,
SCU_PNSSET0=1073934336,
SCU_PNSSET1=1073934340,
SCU_PNSSET2=1073934344,
SCU_PNSSET3=1073934348,
SCU_PNSSET4=1073934352,
SCU_PNSSET5=1073934356,
SCU_PNSSET6=1073934360,
SCU_IONSSET=1073934368,
SCU_SRAMNSSET=1073934372,
SCU_FNSADDR=1073934376,
SCU_SVIOIEN=1073934380,
SCU_SVINTSTS=1073934384,
SCU_APB0VSRC=1073934388,
SCU_APB0VA=1073934392,
SCU_APB1VSRC=1073934396,
SCU_APB1VA=1073934400,
SCU_GPIOVSRC=1073934404,
SCU_GPIOVA=1073934408,
SCU_EBIVSRC=1073934412,
SCU_EBIVA=1073934416,
SCU_USBHVSRC=1073934420,
SCU_USBHVA=1073934424,
SCU_CRCVSRC=1073934428,
SCU_CRCVA=1073934432,
SCU_SD0VSRC=1073934436,
SCU_SD0VA=1073934440,
SCU_PDMA0VSRC=1073934452,
SCU_PDMA0VA=1073934456,
SCU_PDMA1VSRC=1073934460,
SCU_PDMA1VA=1073934464,
SCU_SRAM0VSRC=1073934468,
SCU_SRAM0VA=1073934472,
SCU_SRAM1VSRC=1073934476,
SCU_SRAM1VA=1073934480,
SCU_FMCVSRC=1073934484,
SCU_FMCVA=1073934488,
SCU_FLASHVSRC=1073934492,
SCU_FLASHVA=1073934496,
SCU_SCUVSRC=1073934500,
SCU_SCUVA=1073934504,
SCU_SYSVSRC=1073934508,
SCU_SYSVA=1073934512,
SCU_CRPTVSRC=1073934516,
SCU_CRPTVA=1073934520,
SCU_NSMCTL=1073934848,
SCU_NSMLOAD=1073934852,
SCU_NSMVAL=1073934856,
SCU_NSMSTS=1073934860,
SCU_BBE=1073935104,
SCU_IDAUANS=1073935108,
TRNG_TRNG_CTL=1074499584,
TRNG_TRNG_DATA=1074499588,
TRNG_TRNG_ACT=1074499596,
FMC_FMC_ISPCTL=1073790976,
FMC_FMC_ISPADDR=1073790980,
FMC_FMC_ISPDAT=1073790984,
FMC_FMC_ISPCMD=1073790988,
FMC_FMC_ISPTRG=1073790992,
FMC_FMC_FTCTL=1073791000,
FMC_FMC_ICPCTL=1073791004,
FMC_FMC_ISPSTS=1073791040,
FMC_FMC_CYCCTL=1073791052,
FMC_FMC_KPKEY0=1073791056,
FMC_FMC_KPKEY1=1073791060,
FMC_FMC_KPKEY2=1073791064,
FMC_FMC_KPKEYTRG=1073791068,
FMC_FMC_KPKEYSTS=1073791072,
FMC_FMC_KPKEYCNT=1073791076,
FMC_FMC_KPCNT=1073791080,
FMC_FMC_MPDAT0=1073791104,
FMC_FMC_MPDAT1=1073791108,
FMC_FMC_MPDAT2=1073791112,
FMC_FMC_MPDAT3=1073791116,
FMC_FMC_MPSTS=1073791168,
FMC_FMC_MPADDR=1073791172,
FMC_FMC_XOMR0STS=1073791184,
FMC_FMC_XOMR1STS=1073791188,
FMC_FMC_XOMR2STS=1073791192,
FMC_FMC_XOMR3STS=1073791196,
FMC_FMC_XOMSTS=1073791200,
FMC_FMC_FUNCASS=1073795064,
GPIO_PA_MODE=1073758208,
GPIO_PA_DINOFF=1073758212,
GPIO_PA_DOUT=1073758216,
GPIO_PA_DATMSK=1073758220,
GPIO_PA_PIN=1073758224,
GPIO_PA_DBEN=1073758228,
GPIO_PA_INTTYPE=1073758232,
GPIO_PA_INTEN=1073758236,
GPIO_PA_INTSRC=1073758240,
GPIO_PA_SMTEN=1073758244,
GPIO_PA_SLEWCTL=1073758248,
GPIO_PA_PUSEL=1073758256,
GPIO_PA_DBCTL=1073758260,
GPIO_PB_MODE=1073758272,
GPIO_PB_DINOFF=1073758276,
GPIO_PB_DOUT=1073758280,
GPIO_PB_DATMSK=1073758284,
GPIO_PB_PIN=1073758288,
GPIO_PB_DBEN=1073758292,
GPIO_PB_INTTYPE=1073758296,
GPIO_PB_INTEN=1073758300,
GPIO_PB_INTSRC=1073758304,
GPIO_PB_SMTEN=1073758308,
GPIO_PB_SLEWCTL=1073758312,
GPIO_PB_PUSEL=1073758320,
GPIO_PB_DBCTL=1073758324,
GPIO_PC_MODE=1073758336,
GPIO_PC_DINOFF=1073758340,
GPIO_PC_DOUT=1073758344,
GPIO_PC_DATMSK=1073758348,
GPIO_PC_PIN=1073758352,
GPIO_PC_DBEN=1073758356,
GPIO_PC_INTTYPE=1073758360,
GPIO_PC_INTEN=1073758364,
GPIO_PC_INTSRC=1073758368,
GPIO_PC_SMTEN=1073758372,
GPIO_PC_SLEWCTL=1073758376,
GPIO_PC_PUSEL=1073758384,
GPIO_PC_DBCTL=1073758388,
GPIO_PD_MODE=1073758400,
GPIO_PD_DINOFF=1073758404,
GPIO_PD_DOUT=1073758408,
GPIO_PD_DATMSK=1073758412,
GPIO_PD_PIN=1073758416,
GPIO_PD_DBEN=1073758420,
GPIO_PD_INTTYPE=1073758424,
GPIO_PD_INTEN=1073758428,
GPIO_PD_INTSRC=1073758432,
GPIO_PD_SMTEN=1073758436,
GPIO_PD_SLEWCTL=1073758440,
GPIO_PD_PUSEL=1073758448,
GPIO_PD_DBCTL=1073758452,
GPIO_PE_MODE=1073758464,
GPIO_PE_DINOFF=1073758468,
GPIO_PE_DOUT=1073758472,
GPIO_PE_DATMSK=1073758476,
GPIO_PE_PIN=1073758480,
GPIO_PE_DBEN=1073758484,
GPIO_PE_INTTYPE=1073758488,
GPIO_PE_INTEN=1073758492,
GPIO_PE_INTSRC=1073758496,
GPIO_PE_SMTEN=1073758500,
GPIO_PE_SLEWCTL=1073758504,
GPIO_PE_DRVCTL=1073758508,
GPIO_PE_PUSEL=1073758512,
GPIO_PE_DBCTL=1073758516,
GPIO_PF_MODE=1073758528,
GPIO_PF_DINOFF=1073758532,
GPIO_PF_DOUT=1073758536,
GPIO_PF_DATMSK=1073758540,
GPIO_PF_PIN=1073758544,
GPIO_PF_DBEN=1073758548,
GPIO_PF_INTTYPE=1073758552,
GPIO_PF_INTEN=1073758556,
GPIO_PF_INTSRC=1073758560,
GPIO_PF_SMTEN=1073758564,
GPIO_PF_SLEWCTL=1073758568,
GPIO_PF_PUSEL=1073758576,
GPIO_PF_DBCTL=1073758580,
GPIO_PG_MODE=1073758592,
GPIO_PG_DINOFF=1073758596,
GPIO_PG_DOUT=1073758600,
GPIO_PG_DATMSK=1073758604,
GPIO_PG_PIN=1073758608,
GPIO_PG_DBEN=1073758612,
GPIO_PG_INTTYPE=1073758616,
GPIO_PG_INTEN=1073758620,
GPIO_PG_INTSRC=1073758624,
GPIO_PG_SMTEN=1073758628,
GPIO_PG_SLEWCTL=1073758632,
GPIO_PG_PUSEL=1073758640,
GPIO_PG_DBCTL=1073758644,
GPIO_PH_MODE=1073758656,
GPIO_PH_DINOFF=1073758660,
GPIO_PH_DOUT=1073758664,
GPIO_PH_DATMSK=1073758668,
GPIO_PH_PIN=1073758672,
GPIO_PH_DBEN=1073758676,
GPIO_PH_INTTYPE=1073758680,
GPIO_PH_INTEN=1073758684,
GPIO_PH_INTSRC=1073758688,
GPIO_PH_SMTEN=1073758692,
GPIO_PH_SLEWCTL=1073758696,
GPIO_PH_PUSEL=1073758704,
GPIO_PH_DBCTL=1073758708,
GPIO_PA0_PDIO=1073760256,
GPIO_PA1_PDIO=1073760260,
GPIO_PA2_PDIO=1073760264,
GPIO_PA3_PDIO=1073760268,
GPIO_PA4_PDIO=1073760272,
GPIO_PA5_PDIO=1073760276,
GPIO_PA6_PDIO=1073760280,
GPIO_PA7_PDIO=1073760284,
GPIO_PA8_PDIO=1073760288,
GPIO_PA9_PDIO=1073760292,
GPIO_PA10_PDIO=1073760296,
GPIO_PA11_PDIO=1073760300,
GPIO_PA12_PDIO=1073760304,
GPIO_PA13_PDIO=1073760308,
GPIO_PA14_PDIO=1073760312,
GPIO_PA15_PDIO=1073760316,
GPIO_PB0_PDIO=1073760320,
GPIO_PB1_PDIO=1073760324,
GPIO_PB2_PDIO=1073760328,
GPIO_PB3_PDIO=1073760332,
GPIO_PB4_PDIO=1073760336,
GPIO_PB5_PDIO=1073760340,
GPIO_PB6_PDIO=1073760344,
GPIO_PB7_PDIO=1073760348,
GPIO_PB8_PDIO=1073760352,
GPIO_PB9_PDIO=1073760356,
GPIO_PB10_PDIO=1073760360,
GPIO_PB11_PDIO=1073760364,
GPIO_PB12_PDIO=1073760368,
GPIO_PB13_PDIO=1073760372,
GPIO_PB14_PDIO=1073760376,
GPIO_PB15_PDIO=1073760380,
GPIO_PC0_PDIO=1073760384,
GPIO_PC1_PDIO=1073760388,
GPIO_PC2_PDIO=1073760392,
GPIO_PC3_PDIO=1073760396,
GPIO_PC4_PDIO=1073760400,
GPIO_PC5_PDIO=1073760404,
GPIO_PC6_PDIO=1073760408,
GPIO_PC7_PDIO=1073760412,
GPIO_PC8_PDIO=1073760416,
GPIO_PC9_PDIO=1073760420,
GPIO_PC10_PDIO=1073760424,
GPIO_PC11_PDIO=1073760428,
GPIO_PC12_PDIO=1073760432,
GPIO_PC13_PDIO=1073760436,
GPIO_PC14_PDIO=1073760440,
GPIO_PC15_PDIO=1073760444,
GPIO_PD0_PDIO=1073760448,
GPIO_PD1_PDIO=1073760452,
GPIO_PD2_PDIO=1073760456,
GPIO_PD3_PDIO=1073760460,
GPIO_PD4_PDIO=1073760464,
GPIO_PD5_PDIO=1073760468,
GPIO_PD6_PDIO=1073760472,
GPIO_PD7_PDIO=1073760476,
GPIO_PD8_PDIO=1073760480,
GPIO_PD9_PDIO=1073760484,
GPIO_PD10_PDIO=1073760488,
GPIO_PD11_PDIO=1073760492,
GPIO_PD12_PDIO=1073760496,
GPIO_PD13_PDIO=1073760500,
GPIO_PD14_PDIO=1073760504,
GPIO_PD15_PDIO=1073760508,
GPIO_PE0_PDIO=1073760512,
GPIO_PE1_PDIO=1073760516,
GPIO_PE2_PDIO=1073760520,
GPIO_PE3_PDIO=1073760524,
GPIO_PE4_PDIO=1073760528,
GPIO_PE5_PDIO=1073760532,
GPIO_PE6_PDIO=1073760536,
GPIO_PE7_PDIO=1073760540,
GPIO_PE8_PDIO=1073760544,
GPIO_PE9_PDIO=1073760548,
GPIO_PE10_PDIO=1073760552,
GPIO_PE11_PDIO=1073760556,
GPIO_PE12_PDIO=1073760560,
GPIO_PE13_PDIO=1073760564,
GPIO_PE14_PDIO=1073760568,
GPIO_PE15_PDIO=1073760572,
GPIO_PF0_PDIO=1073760576,
GPIO_PF1_PDIO=1073760580,
GPIO_PF2_PDIO=1073760584,
GPIO_PF3_PDIO=1073760588,
GPIO_PF4_PDIO=1073760592,
GPIO_PF5_PDIO=1073760596,
GPIO_PF6_PDIO=1073760600,
GPIO_PF7_PDIO=1073760604,
GPIO_PF8_PDIO=1073760608,
GPIO_PF9_PDIO=1073760612,
GPIO_PF10_PDIO=1073760616,
GPIO_PF11_PDIO=1073760620,
GPIO_PF12_PDIO=1073760624,
GPIO_PF13_PDIO=1073760628,
GPIO_PF14_PDIO=1073760632,
GPIO_PF15_PDIO=1073760636,
GPIO_PG0_PDIO=1073760640,
GPIO_PG1_PDIO=1073760644,
GPIO_PG2_PDIO=1073760648,
GPIO_PG3_PDIO=1073760652,
GPIO_PG4_PDIO=1073760656,
GPIO_PG5_PDIO=1073760660,
GPIO_PG6_PDIO=1073760664,
GPIO_PG7_PDIO=1073760668,
GPIO_PG8_PDIO=1073760672,
GPIO_PG9_PDIO=1073760676,
GPIO_PG10_PDIO=1073760680,
GPIO_PG11_PDIO=1073760684,
GPIO_PG12_PDIO=1073760688,
GPIO_PG13_PDIO=1073760692,
GPIO_PG14_PDIO=1073760696,
GPIO_PG15_PDIO=1073760700,
GPIO_PH0_PDIO=1073760704,
GPIO_PH1_PDIO=1073760708,
GPIO_PH2_PDIO=1073760712,
GPIO_PH3_PDIO=1073760716,
GPIO_PH4_PDIO=1073760720,
GPIO_PH5_PDIO=1073760724,
GPIO_PH6_PDIO=1073760728,
GPIO_PH7_PDIO=1073760732,
GPIO_PH8_PDIO=1073760736,
GPIO_PH9_PDIO=1073760740,
GPIO_PH10_PDIO=1073760744,
GPIO_PH11_PDIO=1073760748,
GPIO_PH12_PDIO=1073760752,
GPIO_PH13_PDIO=1073760756,
GPIO_PH14_PDIO=1073760760,
GPIO_PH15_PDIO=1073760764,
PDMA0_PDMAx_DSCT0_CTL=1073774592,
PDMA0_PDMAx_DSCT1_CTL=1073774608,
PDMA0_PDMAx_DSCT2_CTL=1073774624,
PDMA0_PDMAx_DSCT3_CTL=1073774640,
PDMA0_PDMAx_DSCT4_CTL=1073774656,
PDMA0_PDMAx_DSCT5_CTL=1073774672,
PDMA0_PDMAx_DSCT6_CTL=1073774688,
PDMA0_PDMAx_DSCT7_CTL=1073774704,
PDMA0_PDMAx_DSCT0_SA=1073774596,
PDMA0_PDMAx_DSCT1_SA=1073774612,
PDMA0_PDMAx_DSCT2_SA=1073774628,
PDMA0_PDMAx_DSCT3_SA=1073774644,
PDMA0_PDMAx_DSCT4_SA=1073774660,
PDMA0_PDMAx_DSCT5_SA=1073774676,
PDMA0_PDMAx_DSCT6_SA=1073774692,
PDMA0_PDMAx_DSCT7_SA=1073774708,
PDMA0_PDMAx_DSCT0_DA=1073774600,
PDMA0_PDMAx_DSCT1_DA=1073774616,
PDMA0_PDMAx_DSCT2_DA=1073774632,
PDMA0_PDMAx_DSCT3_DA=1073774648,
PDMA0_PDMAx_DSCT4_DA=1073774664,
PDMA0_PDMAx_DSCT5_DA=1073774680,
PDMA0_PDMAx_DSCT6_DA=1073774696,
PDMA0_PDMAx_DSCT7_DA=1073774712,
PDMA0_PDMAx_DSCT0_NEXT=1073774604,
PDMA0_PDMAx_DSCT1_NEXT=1073774620,
PDMA0_PDMAx_DSCT2_NEXT=1073774636,
PDMA0_PDMAx_DSCT3_NEXT=1073774652,
PDMA0_PDMAx_DSCT4_NEXT=1073774668,
PDMA0_PDMAx_DSCT5_NEXT=1073774684,
PDMA0_PDMAx_DSCT6_NEXT=1073774700,
PDMA0_PDMAx_DSCT7_NEXT=1073774716,
PDMA0_PDMAx_CURSCAT0=1073774720,
PDMA0_PDMAx_CURSCAT1=1073774724,
PDMA0_PDMAx_CURSCAT2=1073774728,
PDMA0_PDMAx_CURSCAT3=1073774732,
PDMA0_PDMAx_CURSCAT4=1073774736,
PDMA0_PDMAx_CURSCAT5=1073774740,
PDMA0_PDMAx_CURSCAT6=1073774744,
PDMA0_PDMAx_CURSCAT7=1073774748,
PDMA0_PDMAx_CHCTL=1073775616,
PDMA0_PDMAx_PAUSE=1073775620,
PDMA0_PDMAx_SWREQ=1073775624,
PDMA0_PDMAx_TRGSTS=1073775628,
PDMA0_PDMAx_PRISET=1073775632,
PDMA0_PDMAx_PRICLR=1073775636,
PDMA0_PDMAx_INTEN=1073775640,
PDMA0_PDMAx_INTSTS=1073775644,
PDMA0_PDMAx_ABTSTS=1073775648,
PDMA0_PDMAx_TDSTS=1073775652,
PDMA0_PDMAx_ALIGN=1073775656,
PDMA0_PDMAx_TACTSTS=1073775660,
PDMA0_PDMAx_TOUTPSC=1073775664,
PDMA0_PDMAx_TOUTEN=1073775668,
PDMA0_PDMAx_TOUTIEN=1073775672,
PDMA0_PDMAx_SCATBA=1073775676,
PDMA0_PDMAx_TOC0_1=1073775680,
PDMA0_PDMAx_CHRST=1073775712,
PDMA0_PDMAx_RAZWISTS=1073775716,
PDMA0_PDMAx_SPI=1073775720,
PDMA0_PDMAx_REQSEL0_3=1073775744,
PDMA0_PDMAx_REQSEL4_7=1073775748,
PDMA0_PDMAx_STCR0=1073775872,
PDMA0_PDMAx_ASOCR0=1073775876,
PDMA0_PDMAx_STCR1=1073775880,
PDMA0_PDMAx_ASOCR1=1073775884,
PDMA0_PDMAx_STCR2=1073775888,
PDMA0_PDMAx_ASOCR2=1073775892,
PDMA0_PDMAx_STCR3=1073775896,
PDMA0_PDMAx_ASOCR3=1073775900,
PDMA0_PDMAx_STCR4=1073775904,
PDMA0_PDMAx_ASOCR4=1073775908,
PDMA0_PDMAx_STCR5=1073775912,
PDMA0_PDMAx_ASOCR5=1073775916,
PDMA1_PDMAx_DSCT0_CTL=1073840128,
PDMA1_PDMAx_DSCT1_CTL=1073840144,
PDMA1_PDMAx_DSCT2_CTL=1073840160,
PDMA1_PDMAx_DSCT3_CTL=1073840176,
PDMA1_PDMAx_DSCT4_CTL=1073840192,
PDMA1_PDMAx_DSCT5_CTL=1073840208,
PDMA1_PDMAx_DSCT6_CTL=1073840224,
PDMA1_PDMAx_DSCT7_CTL=1073840240,
PDMA1_PDMAx_DSCT0_SA=1073840132,
PDMA1_PDMAx_DSCT1_SA=1073840148,
PDMA1_PDMAx_DSCT2_SA=1073840164,
PDMA1_PDMAx_DSCT3_SA=1073840180,
PDMA1_PDMAx_DSCT4_SA=1073840196,
PDMA1_PDMAx_DSCT5_SA=1073840212,
PDMA1_PDMAx_DSCT6_SA=1073840228,
PDMA1_PDMAx_DSCT7_SA=1073840244,
PDMA1_PDMAx_DSCT0_DA=1073840136,
PDMA1_PDMAx_DSCT1_DA=1073840152,
PDMA1_PDMAx_DSCT2_DA=1073840168,
PDMA1_PDMAx_DSCT3_DA=1073840184,
PDMA1_PDMAx_DSCT4_DA=1073840200,
PDMA1_PDMAx_DSCT5_DA=1073840216,
PDMA1_PDMAx_DSCT6_DA=1073840232,
PDMA1_PDMAx_DSCT7_DA=1073840248,
PDMA1_PDMAx_DSCT0_NEXT=1073840140,
PDMA1_PDMAx_DSCT1_NEXT=1073840156,
PDMA1_PDMAx_DSCT2_NEXT=1073840172,
PDMA1_PDMAx_DSCT3_NEXT=1073840188,
PDMA1_PDMAx_DSCT4_NEXT=1073840204,
PDMA1_PDMAx_DSCT5_NEXT=1073840220,
PDMA1_PDMAx_DSCT6_NEXT=1073840236,
PDMA1_PDMAx_DSCT7_NEXT=1073840252,
PDMA1_PDMAx_CURSCAT0=1073840256,
PDMA1_PDMAx_CURSCAT1=1073840260,
PDMA1_PDMAx_CURSCAT2=1073840264,
PDMA1_PDMAx_CURSCAT3=1073840268,
PDMA1_PDMAx_CURSCAT4=1073840272,
PDMA1_PDMAx_CURSCAT5=1073840276,
PDMA1_PDMAx_CURSCAT6=1073840280,
PDMA1_PDMAx_CURSCAT7=1073840284,
PDMA1_PDMAx_CHCTL=1073841152,
PDMA1_PDMAx_PAUSE=1073841156,
PDMA1_PDMAx_SWREQ=1073841160,
PDMA1_PDMAx_TRGSTS=1073841164,
PDMA1_PDMAx_PRISET=1073841168,
PDMA1_PDMAx_PRICLR=1073841172,
PDMA1_PDMAx_INTEN=1073841176,
PDMA1_PDMAx_INTSTS=1073841180,
PDMA1_PDMAx_ABTSTS=1073841184,
PDMA1_PDMAx_TDSTS=1073841188,
PDMA1_PDMAx_ALIGN=1073841192,
PDMA1_PDMAx_TACTSTS=1073841196,
PDMA1_PDMAx_TOUTPSC=1073841200,
PDMA1_PDMAx_TOUTEN=1073841204,
PDMA1_PDMAx_TOUTIEN=1073841208,
PDMA1_PDMAx_SCATBA=1073841212,
PDMA1_PDMAx_TOC0_1=1073841216,
PDMA1_PDMAx_CHRST=1073841248,
PDMA1_PDMAx_RAZWISTS=1073841252,
PDMA1_PDMAx_SPI=1073841256,
PDMA1_PDMAx_REQSEL0_3=1073841280,
PDMA1_PDMAx_REQSEL4_7=1073841284,
PDMA1_PDMAx_STCR0=1073841408,
PDMA1_PDMAx_ASOCR0=1073841412,
PDMA1_PDMAx_STCR1=1073841416,
PDMA1_PDMAx_ASOCR1=1073841420,
PDMA1_PDMAx_STCR2=1073841424,
PDMA1_PDMAx_ASOCR2=1073841428,
PDMA1_PDMAx_STCR3=1073841432,
PDMA1_PDMAx_ASOCR3=1073841436,
PDMA1_PDMAx_STCR4=1073841440,
PDMA1_PDMAx_ASOCR4=1073841444,
PDMA1_PDMAx_STCR5=1073841448,
PDMA1_PDMAx_ASOCR5=1073841452,
TMR01_TIMER0_CTL=1074069504,
TMR01_TIMER0_CMP=1074069508,
TMR01_TIMER0_INTSTS=1074069512,
TMR01_TIMER0_CNT=1074069516,
TMR01_TIMER0_CAP=1074069520,
TMR01_TIMER0_EXTCTL=1074069524,
TMR01_TIMER0_EINTSTS=1074069528,
TMR01_TIMER0_TRGCTL=1074069532,
TMR01_TIMER0_ALTCTL=1074069536,
TMR01_TIMER0_PWMCTL=1074069568,
TMR01_TIMER0_PWMCLKSRC=1074069572,
TMR01_TIMER0_PWMCLKPSC=1074069576,
TMR01_TIMER0_PWMCNTCLR=1074069580,
TMR01_TIMER0_PWMPERIOD=1074069584,
TMR01_TIMER0_PWMCMPDAT=1074069588,
TMR01_TIMER0_PWMDTCTL=1074069592,
TMR01_TIMER0_PWMCNT=1074069596,
TMR01_TIMER0_PWMMSKEN=1074069600,
TMR01_TIMER0_PWMMSK=1074069604,
TMR01_TIMER0_PWMBNF=1074069608,
TMR01_TIMER0_PWMFAILBRK=1074069612,
TMR01_TIMER0_PWMBRKCTL=1074069616,
TMR01_TIMER0_PWMPOLCTL=1074069620,
TMR01_TIMER0_PWMPOEN=1074069624,
TMR01_TIMER0_PWMSWBRK=1074069628,
TMR01_TIMER0_PWMINTEN0=1074069632,
TMR01_TIMER0_PWMINTEN1=1074069636,
TMR01_TIMER0_PWMINTSTS0=1074069640,
TMR01_TIMER0_PWMINTSTS1=1074069644,
TMR01_TIMER0_PWMADCTS=1074069648,
TMR01_TIMER0_PWMSCTL=1074069652,
TMR01_TIMER0_PWMSTRG=1074069656,
TMR01_TIMER0_PWMSTATUS=1074069660,
TMR01_TIMER0_PWMPBUF=1074069664,
TMR01_TIMER0_PWMCMPBUF=1074069668,
TMR01_TIMER1_CTL=1074069760,
TMR01_TIMER1_CMP=1074069764,
TMR01_TIMER1_INTSTS=1074069768,
TMR01_TIMER1_CNT=1074069772,
TMR01_TIMER1_CAP=1074069776,
TMR01_TIMER1_EXTCTL=1074069780,
TMR01_TIMER1_EINTSTS=1074069784,
TMR01_TIMER1_TRGCTL=1074069788,
TMR01_TIMER1_ALTCTL=1074069792,
TMR01_TIMER1_PWMCTL=1074069824,
TMR01_TIMER1_PWMCLKSRC=1074069828,
TMR01_TIMER1_PWMCLKPSC=1074069832,
TMR01_TIMER1_PWMCNTCLR=1074069836,
TMR01_TIMER1_PWMPERIOD=1074069840,
TMR01_TIMER1_PWMCMPDAT=1074069844,
TMR01_TIMER1_PWMDTCTL=1074069848,
TMR01_TIMER1_PWMCNT=1074069852,
TMR01_TIMER1_PWMMSKEN=1074069856,
TMR01_TIMER1_PWMMSK=1074069860,
TMR01_TIMER1_PWMBNF=1074069864,
TMR01_TIMER1_PWMFAILBRK=1074069868,
TMR01_TIMER1_PWMBRKCTL=1074069872,
TMR01_TIMER1_PWMPOLCTL=1074069876,
TMR01_TIMER1_PWMPOEN=1074069880,
TMR01_TIMER1_PWMSWBRK=1074069884,
TMR01_TIMER1_PWMINTEN0=1074069888,
TMR01_TIMER1_PWMINTEN1=1074069892,
TMR01_TIMER1_PWMINTSTS0=1074069896,
TMR01_TIMER1_PWMINTSTS1=1074069900,
TMR01_TIMER1_PWMADCTS=1074069904,
TMR01_TIMER1_PWMSCTL=1074069908,
TMR01_TIMER1_PWMSSTRG=1074069912,
TMR01_TIMER1_PWMSTATUS=1074069916,
TMR01_TIMER1_PWMPBUF=1074069920,
TMR01_TIMER1_PWMCMPBUF=1074069924,
TMR23_TIMER2_CTL=1074073600,
TMR23_TIMER2_CMP=1074073604,
TMR23_TIMER2_INTSTS=1074073608,
TMR23_TIMER2_CNT=1074073612,
TMR23_TIMER2_CAP=1074073616,
TMR23_TIMER2_EXTCTL=1074073620,
TMR23_TIMER2_EINTSTS=1074073624,
TMR23_TIMER2_TRGCTL=1074073628,
TMR23_TIMER2_ALTCTL=1074073632,
TMR23_TIMER2_PWMCTL=1074073664,
TMR23_TIMER2_PWMCLKSRC=1074073668,
TMR23_TIMER2_PWMCLKPSC=1074073672,
TMR23_TIMER2_PWMCNTCLR=1074073676,
TMR23_TIMER2_PWMPERIOD=1074073680,
TMR23_TIMER2_PWMCMPDAT=1074073684,
TMR23_TIMER2_PWMDTCTL=1074073688,
TMR23_TIMER2_PWMCNT=1074073692,
TMR23_TIMER2_PWMMSKEN=1074073696,
TMR23_TIMER2_PWMMSK=1074073700,
TMR23_TIMER2_PWMBNF=1074073704,
TMR23_TIMER2_PWMFAILBRK=1074073708,
TMR23_TIMER2_PWMBRKCTL=1074073712,
TMR23_TIMER2_PWMPOLCTL=1074073716,
TMR23_TIMER2_PWMPOEN=1074073720,
TMR23_TIMER2_PWMSWBRK=1074073724,
TMR23_TIMER2_PWMINTEN0=1074073728,
TMR23_TIMER2_PWMINTEN1=1074073732,
TMR23_TIMER2_PWMINTSTS0=1074073736,
TMR23_TIMER2_PWMINTSTS1=1074073740,
TMR23_TIMER2_PWMADCTS=1074073744,
TMR23_TIMER2_PWMSCTL=1074073748,
TMR23_TIMER2_PWMSTRG=1074073752,
TMR23_TIMER2_PWMSTATUS=1074073756,
TMR23_TIMER2_PWMPBUF=1074073760,
TMR23_TIMER2_PWMCMPBUF=1074073764,
TMR23_TIMER3_CTL=1074073856,
TMR23_TIMER3_CMP=1074073860,
TMR23_TIMER3_INTSTS=1074073864,
TMR23_TIMER3_CNT=1074073868,
TMR23_TIMER3_CAP=1074073872,
TMR23_TIMER3_EXTCTL=1074073876,
TMR23_TIMER3_EINTSTS=1074073880,
TMR23_TIMER3_TRGCTL=1074073884,
TMR23_TIMER3_ALTCTL=1074073888,
TMR23_TIMER3_PWMCTL=1074073920,
TMR23_TIMER3_PWMCLKSRC=1074073924,
TMR23_TIMER3_PWMCLKPSC=1074073928,
TMR23_TIMER3_PWMCNTCLR=1074073932,
TMR23_TIMER3_PWMPERIOD=1074073936,
TMR23_TIMER3_PWMCMPDAT=1074073940,
TMR23_TIMER3_PWMDTCTL=1074073944,
TMR23_TIMER3_PWMCNT=1074073948,
TMR23_TIMER3_PWMMSKEN=1074073952,
TMR23_TIMER3_PWMMSK=1074073956,
TMR23_TIMER3_PWMBNF=1074073960,
TMR23_TIMER3_PWMFAILBRK=1074073964,
TMR23_TIMER3_PWMBRKCTL=1074073968,
TMR23_TIMER3_PWMPOLCTL=1074073972,
TMR23_TIMER3_PWMPOEN=1074073976,
TMR23_TIMER3_PWMSWBRK=1074073980,
TMR23_TIMER3_PWMINTEN0=1074073984,
TMR23_TIMER3_PWMINTEN1=1074073988,
TMR23_TIMER3_PWMINTSTS0=1074073992,
TMR23_TIMER3_PWMINTSTS1=1074073996,
TMR23_TIMER3_PWMADCTS=1074074000,
TMR23_TIMER3_PWMSCTL=1074074004,
TMR23_TIMER3_PWMSSTRG=1074074008,
TMR23_TIMER3_PWMSTATUS=1074074012,
TMR23_TIMER3_PWMPBUF=1074074016,
TMR23_TIMER3_PWMCMPBUF=1074074020,
WDT_WDT_CTL=1074003968,
WDT_WDT_ALTCTL=1074003972,
WDT_WDT_RSTCNT=1074003976,
WWDT_WWDT_RLDCNT=1074004224,
WWDT_WWDT_CTL=1074004228,
WWDT_WWDT_STATUS=1074004232,
WWDT_WWDT_CNT=1074004236,
RTC_RTC_INIT=1074008064,
RTC_RTC_RWEN=1074008068,
RTC_RTC_FREQADJ=1074008072,
RTC_RTC_TIME=1074008076,
RTC_RTC_CAL=1074008080,
RTC_RTC_CLKFMT=1074008084,
RTC_RTC_WEEKDAY=1074008088,
RTC_RTC_TALM=1074008092,
RTC_RTC_CALM=1074008096,
RTC_RTC_LEAPYEAR=1074008100,
RTC_RTC_INTEN=1074008104,
RTC_RTC_INTSTS=1074008108,
RTC_RTC_TICK=1074008112,
RTC_RTC_TAMSK=1074008116,
RTC_RTC_CAMSK=1074008120,
RTC_RTC_SPRCTL=1074008124,
RTC_RTC_SPR0=1074008128,
RTC_RTC_SPR1=1074008132,
RTC_RTC_SPR2=1074008136,
RTC_RTC_SPR3=1074008140,
RTC_RTC_SPR4=1074008144,
RTC_RTC_SPR5=1074008148,
RTC_RTC_SPR6=1074008152,
RTC_RTC_SPR7=1074008156,
RTC_RTC_SPR8=1074008160,
RTC_RTC_SPR9=1074008164,
RTC_RTC_SPR10=1074008168,
RTC_RTC_SPR11=1074008172,
RTC_RTC_SPR12=1074008176,
RTC_RTC_SPR13=1074008180,
RTC_RTC_SPR14=1074008184,
RTC_RTC_SPR15=1074008188,
RTC_RTC_SPR16=1074008192,
RTC_RTC_SPR17=1074008196,
RTC_RTC_SPR18=1074008200,
RTC_RTC_SPR19=1074008204,
RTC_RTC_LXTCTL=1074008320,
RTC_RTC_GPIOCTL0=1074008324,
RTC_RTC_GPIOCTL1=1074008328,
RTC_RTC_DSTCTL=1074008336,
RTC_RTC_TAMPCTL=1074008352,
RTC_RTC_TAMPSEED=1074008360,
RTC_RTC_TAMPTIME=1074008368,
RTC_RTC_TAMPCAL=1074008372,
RTC_RTC_CLKDCTL=1074008384,
RTC_RTC_CDBR=1074008388,
RTC_RTC_TAMPDBG=1074008448,
RTC_RTC_TAMPRFPL=1074008452,
RTC_RTC_TAMPRFPH=1074008456,
RTC_RTC_TEST=1074008560,
RTC_RTC_BUSYCTL=1074008564,
RTC_RTC_LDOCTL=1074008568,
RTC_RTC_RC3P3KCTL=1074008572,
RTC_RTC_ACCCTL=1074008576,
EPWM0_EPWM_CTL0=1074102272,
EPWM0_EPWM_CTL1=1074102276,
EPWM0_EPWM_SYNC=1074102280,
EPWM0_EPWM_SWSYNC=1074102284,
EPWM0_EPWM_CLKSRC=1074102288,
EPWM0_EPWM_CLKPSC0_1=1074102292,
EPWM0_EPWM_CLKPSC2_3=1074102296,
EPWM0_EPWM_CLKPSC4_5=1074102300,
EPWM0_EPWM_CNTEN=1074102304,
EPWM0_EPWM_CNTCLR=1074102308,
EPWM0_EPWM_LOAD=1074102312,
EPWM0_EPWM_PERIOD0=1074102320,
EPWM0_EPWM_PERIOD1=1074102324,
EPWM0_EPWM_PERIOD2=1074102328,
EPWM0_EPWM_PERIOD3=1074102332,
EPWM0_EPWM_PERIOD4=1074102336,
EPWM0_EPWM_PERIOD5=1074102340,
EPWM0_EPWM_CMPDAT0=1074102352,
EPWM0_EPWM_CMPDAT1=1074102356,
EPWM0_EPWM_CMPDAT2=1074102360,
EPWM0_EPWM_CMPDAT3=1074102364,
EPWM0_EPWM_CMPDAT4=1074102368,
EPWM0_EPWM_CMPDAT5=1074102372,
EPWM0_EPWM_DTCTL0_1=1074102384,
EPWM0_EPWM_DTCTL2_3=1074102388,
EPWM0_EPWM_DTCTL4_5=1074102392,
EPWM0_EPWM_PHS0_1=1074102400,
EPWM0_EPWM_PHS2_3=1074102404,
EPWM0_EPWM_PHS4_5=1074102408,
EPWM0_EPWM_CNT0=1074102416,
EPWM0_EPWM_CNT1=1074102420,
EPWM0_EPWM_CNT2=1074102424,
EPWM0_EPWM_CNT3=1074102428,
EPWM0_EPWM_CNT4=1074102432,
EPWM0_EPWM_CNT5=1074102436,
EPWM0_EPWM_WGCTL0=1074102448,
EPWM0_EPWM_WGCTL1=1074102452,
EPWM0_EPWM_MSKEN=1074102456,
EPWM0_EPWM_MSK=1074102460,
EPWM0_EPWM_BNF=1074102464,
EPWM0_EPWM_FAILBRK=1074102468,
EPWM0_EPWM_BRKCTL0_1=1074102472,
EPWM0_EPWM_BRKCTL2_3=1074102476,
EPWM0_EPWM_BRKCTL4_5=1074102480,
EPWM0_EPWM_POLCTL=1074102484,
EPWM0_EPWM_POEN=1074102488,
EPWM0_EPWM_SWBRK=1074102492,
EPWM0_EPWM_INTEN0=1074102496,
EPWM0_EPWM_INTEN1=1074102500,
EPWM0_EPWM_INTSTS0=1074102504,
EPWM0_EPWM_INTSTS1=1074102508,
EPWM0_EPWM_DACTRGEN=1074102516,
EPWM0_EPWM_EADCTS0=1074102520,
EPWM0_EPWM_EADCTS1=1074102524,
EPWM0_EPWM_FTCMPDAT0_1=1074102528,
EPWM0_EPWM_FTCMPDAT2_3=1074102532,
EPWM0_EPWM_FTCMPDAT4_5=1074102536,
EPWM0_EPWM_SSCTL=1074102544,
EPWM0_EPWM_SSTRG=1074102548,
EPWM0_EPWM_LEBCTL=1074102552,
EPWM0_EPWM_LEBCNT=1074102556,
EPWM0_EPWM_STATUS=1074102560,
EPWM0_EPWM_IFA0=1074102576,
EPWM0_EPWM_IFA1=1074102580,
EPWM0_EPWM_IFA2=1074102584,
EPWM0_EPWM_IFA3=1074102588,
EPWM0_EPWM_IFA4=1074102592,
EPWM0_EPWM_IFA5=1074102596,
EPWM0_EPWM_AINTSTS=1074102608,
EPWM0_EPWM_AINTEN=1074102612,
EPWM0_EPWM_APDMACTL=1074102616,
EPWM0_EPWM_CAPINEN=1074102784,
EPWM0_EPWM_CAPCTL=1074102788,
EPWM0_EPWM_CAPSTS=1074102792,
EPWM0_EPWM_RCAPDAT0=1074102796,
EPWM0_EPWM_FCAPDAT0=1074102800,
EPWM0_EPWM_RCAPDAT1=1074102804,
EPWM0_EPWM_FCAPDAT1=1074102808,
EPWM0_EPWM_RCAPDAT2=1074102812,
EPWM0_EPWM_FCAPDAT2=1074102816,
EPWM0_EPWM_RCAPDAT3=1074102820,
EPWM0_EPWM_FCAPDAT3=1074102824,
EPWM0_EPWM_RCAPDAT4=1074102828,
EPWM0_EPWM_FCAPDAT4=1074102832,
EPWM0_EPWM_RCAPDAT5=1074102836,
EPWM0_EPWM_FCAPDAT5=1074102840,
EPWM0_EPWM_PDMACTL=1074102844,
EPWM0_EPWM_PDMACAP0_1=1074102848,
EPWM0_EPWM_PDMACAP2_3=1074102852,
EPWM0_EPWM_PDMACAP4_5=1074102856,
EPWM0_EPWM_CAPIEN=1074102864,
EPWM0_EPWM_CAPIF=1074102868,
EPWM0_EPWM_SELFTEST=1074103040,
EPWM0_EPWM_PBUF0=1074103044,
EPWM0_EPWM_PBUF1=1074103048,
EPWM0_EPWM_PBUF2=1074103052,
EPWM0_EPWM_PBUF3=1074103056,
EPWM0_EPWM_PBUF4=1074103060,
EPWM0_EPWM_PBUF5=1074103064,
EPWM0_EPWM_CMPBUF0=1074103068,
EPWM0_EPWM_CMPBUF1=1074103072,
EPWM0_EPWM_CMPBUF2=1074103076,
EPWM0_EPWM_CMPBUF3=1074103080,
EPWM0_EPWM_CMPBUF4=1074103084,
EPWM0_EPWM_CMPBUF5=1074103088,
EPWM0_EPWM_CPSCBUF0_1=1074103092,
EPWM0_EPWM_CPSCBUF2_3=1074103096,
EPWM0_EPWM_CPSCBUF4_5=1074103100,
EPWM0_EPWM_FTCBUF0_1=1074103104,
EPWM0_EPWM_FTCBUF2_3=1074103108,
EPWM0_EPWM_FTCBUF4_5=1074103112,
EPWM0_EPWM_FTCI=1074103116,
EPWM1_EPWM_CTL0=1074106368,
EPWM1_EPWM_CTL1=1074106372,
EPWM1_EPWM_SYNC=1074106376,
EPWM1_EPWM_SWSYNC=1074106380,
EPWM1_EPWM_CLKSRC=1074106384,
EPWM1_EPWM_CLKPSC0_1=1074106388,
EPWM1_EPWM_CLKPSC2_3=1074106392,
EPWM1_EPWM_CLKPSC4_5=1074106396,
EPWM1_EPWM_CNTEN=1074106400,
EPWM1_EPWM_CNTCLR=1074106404,
EPWM1_EPWM_LOAD=1074106408,
EPWM1_EPWM_PERIOD0=1074106416,
EPWM1_EPWM_PERIOD1=1074106420,
EPWM1_EPWM_PERIOD2=1074106424,
EPWM1_EPWM_PERIOD3=1074106428,
EPWM1_EPWM_PERIOD4=1074106432,
EPWM1_EPWM_PERIOD5=1074106436,
EPWM1_EPWM_CMPDAT0=1074106448,
EPWM1_EPWM_CMPDAT1=1074106452,
EPWM1_EPWM_CMPDAT2=1074106456,
EPWM1_EPWM_CMPDAT3=1074106460,
EPWM1_EPWM_CMPDAT4=1074106464,
EPWM1_EPWM_CMPDAT5=1074106468,
EPWM1_EPWM_DTCTL0_1=1074106480,
EPWM1_EPWM_DTCTL2_3=1074106484,
EPWM1_EPWM_DTCTL4_5=1074106488,
EPWM1_EPWM_PHS0_1=1074106496,
EPWM1_EPWM_PHS2_3=1074106500,
EPWM1_EPWM_PHS4_5=1074106504,
EPWM1_EPWM_CNT0=1074106512,
EPWM1_EPWM_CNT1=1074106516,
EPWM1_EPWM_CNT2=1074106520,
EPWM1_EPWM_CNT3=1074106524,
EPWM1_EPWM_CNT4=1074106528,
EPWM1_EPWM_CNT5=1074106532,
EPWM1_EPWM_WGCTL0=1074106544,
EPWM1_EPWM_WGCTL1=1074106548,
EPWM1_EPWM_MSKEN=1074106552,
EPWM1_EPWM_MSK=1074106556,
EPWM1_EPWM_BNF=1074106560,
EPWM1_EPWM_FAILBRK=1074106564,
EPWM1_EPWM_BRKCTL0_1=1074106568,
EPWM1_EPWM_BRKCTL2_3=1074106572,
EPWM1_EPWM_BRKCTL4_5=1074106576,
EPWM1_EPWM_POLCTL=1074106580,
EPWM1_EPWM_POEN=1074106584,
EPWM1_EPWM_SWBRK=1074106588,
EPWM1_EPWM_INTEN0=1074106592,
EPWM1_EPWM_INTEN1=1074106596,
EPWM1_EPWM_INTSTS0=1074106600,
EPWM1_EPWM_INTSTS1=1074106604,
EPWM1_EPWM_DACTRGEN=1074106612,
EPWM1_EPWM_EADCTS0=1074106616,
EPWM1_EPWM_EADCTS1=1074106620,
EPWM1_EPWM_FTCMPDAT0_1=1074106624,
EPWM1_EPWM_FTCMPDAT2_3=1074106628,
EPWM1_EPWM_FTCMPDAT4_5=1074106632,
EPWM1_EPWM_SSCTL=1074106640,
EPWM1_EPWM_SSTRG=1074106644,
EPWM1_EPWM_LEBCTL=1074106648,
EPWM1_EPWM_LEBCNT=1074106652,
EPWM1_EPWM_STATUS=1074106656,
EPWM1_EPWM_IFA0=1074106672,
EPWM1_EPWM_IFA1=1074106676,
EPWM1_EPWM_IFA2=1074106680,
EPWM1_EPWM_IFA3=1074106684,
EPWM1_EPWM_IFA4=1074106688,
EPWM1_EPWM_IFA5=1074106692,
EPWM1_EPWM_AINTSTS=1074106704,
EPWM1_EPWM_AINTEN=1074106708,
EPWM1_EPWM_APDMACTL=1074106712,
EPWM1_EPWM_CAPINEN=1074106880,
EPWM1_EPWM_CAPCTL=1074106884,
EPWM1_EPWM_CAPSTS=1074106888,
EPWM1_EPWM_RCAPDAT0=1074106892,
EPWM1_EPWM_FCAPDAT0=1074106896,
EPWM1_EPWM_RCAPDAT1=1074106900,
EPWM1_EPWM_FCAPDAT1=1074106904,
EPWM1_EPWM_RCAPDAT2=1074106908,
EPWM1_EPWM_FCAPDAT2=1074106912,
EPWM1_EPWM_RCAPDAT3=1074106916,
EPWM1_EPWM_FCAPDAT3=1074106920,
EPWM1_EPWM_RCAPDAT4=1074106924,
EPWM1_EPWM_FCAPDAT4=1074106928,
EPWM1_EPWM_RCAPDAT5=1074106932,
EPWM1_EPWM_FCAPDAT5=1074106936,
EPWM1_EPWM_PDMACTL=1074106940,
EPWM1_EPWM_PDMACAP0_1=1074106944,
EPWM1_EPWM_PDMACAP2_3=1074106948,
EPWM1_EPWM_PDMACAP4_5=1074106952,
EPWM1_EPWM_CAPIEN=1074106960,
EPWM1_EPWM_CAPIF=1074106964,
EPWM1_EPWM_SELFTEST=1074107136,
EPWM1_EPWM_PBUF0=1074107140,
EPWM1_EPWM_PBUF1=1074107144,
EPWM1_EPWM_PBUF2=1074107148,
EPWM1_EPWM_PBUF3=1074107152,
EPWM1_EPWM_PBUF4=1074107156,
EPWM1_EPWM_PBUF5=1074107160,
EPWM1_EPWM_CMPBUF0=1074107164,
EPWM1_EPWM_CMPBUF1=1074107168,
EPWM1_EPWM_CMPBUF2=1074107172,
EPWM1_EPWM_CMPBUF3=1074107176,
EPWM1_EPWM_CMPBUF4=1074107180,
EPWM1_EPWM_CMPBUF5=1074107184,
EPWM1_EPWM_CPSCBUF0_1=1074107188,
EPWM1_EPWM_CPSCBUF2_3=1074107192,
EPWM1_EPWM_CPSCBUF4_5=1074107196,
EPWM1_EPWM_FTCBUF0_1=1074107200,
EPWM1_EPWM_FTCBUF2_3=1074107204,
EPWM1_EPWM_FTCBUF4_5=1074107208,
EPWM1_EPWM_FTCI=1074107212,
BPWM0_BPWM_CTL0=1074110464,
BPWM0_BPWM_CTL1=1074110468,
BPWM0_BPWM_CLKSRC=1074110480,
BPWM0_BPWM_CLKPSC=1074110484,
BPWM0_BPWM_CNTEN=1074110496,
BPWM0_BPWM_CNTCLR=1074110500,
BPWM0_BPWM_PERIOD=1074110512,
BPWM0_BPWM_CMPDAT0=1074110544,
BPWM0_BPWM_CMPDAT1=1074110548,
BPWM0_BPWM_CMPDAT2=1074110552,
BPWM0_BPWM_CMPDAT3=1074110556,
BPWM0_BPWM_CMPDAT4=1074110560,
BPWM0_BPWM_CMPDAT5=1074110564,
BPWM0_BPWM_CNT=1074110608,
BPWM0_BPWM_WGCTL0=1074110640,
BPWM0_BPWM_WGCTL1=1074110644,
BPWM0_BPWM_MSKEN=1074110648,
BPWM0_BPWM_MSK=1074110652,
BPWM0_BPWM_POLCTL=1074110676,
BPWM0_BPWM_POEN=1074110680,
BPWM0_BPWM_INTEN=1074110688,
BPWM0_BPWM_INTSTS=1074110696,
BPWM0_BPWM_EADCTS0=1074110712,
BPWM0_BPWM_EADCTS1=1074110716,
BPWM0_BPWM_SSCTL=1074110736,
BPWM0_BPWM_SSTRG=1074110740,
BPWM0_BPWM_STATUS=1074110752,
BPWM0_BPWM_CAPINEN=1074110976,
BPWM0_BPWM_CAPCTL=1074110980,
BPWM0_BPWM_CAPSTS=1074110984,
BPWM0_BPWM_RCAPDAT0=1074110988,
BPWM0_BPWM_FCAPDAT0=1074110992,
BPWM0_BPWM_RCAPDAT1=1074110996,
BPWM0_BPWM_FCAPDAT1=1074111000,
BPWM0_BPWM_RCAPDAT2=1074111004,
BPWM0_BPWM_FCAPDAT2=1074111008,
BPWM0_BPWM_RCAPDAT3=1074111012,
BPWM0_BPWM_FCAPDAT3=1074111016,
BPWM0_BPWM_RCAPDAT4=1074111020,
BPWM0_BPWM_FCAPDAT4=1074111024,
BPWM0_BPWM_RCAPDAT5=1074111028,
BPWM0_BPWM_FCAPDAT5=1074111032,
BPWM0_BPWM_CAPIEN=1074111056,
BPWM0_BPWM_CAPIF=1074111060,
BPWM0_BPWM_SELFTEST=1074111232,
BPWM0_BPWM_PBUF=1074111236,
BPWM0_BPWM_CMPBUF0=1074111260,
BPWM0_BPWM_CMPBUF1=1074111264,
BPWM0_BPWM_CMPBUF2=1074111268,
BPWM0_BPWM_CMPBUF3=1074111272,
BPWM0_BPWM_CMPBUF4=1074111276,
BPWM0_BPWM_CMPBUF5=1074111280,
BPWM1_BPWM_CTL0=1074114560,
BPWM1_BPWM_CTL1=1074114564,
BPWM1_BPWM_CLKSRC=1074114576,
BPWM1_BPWM_CLKPSC=1074114580,
BPWM1_BPWM_CNTEN=1074114592,
BPWM1_BPWM_CNTCLR=1074114596,
BPWM1_BPWM_PERIOD=1074114608,
BPWM1_BPWM_CMPDAT0=1074114640,
BPWM1_BPWM_CMPDAT1=1074114644,
BPWM1_BPWM_CMPDAT2=1074114648,
BPWM1_BPWM_CMPDAT3=1074114652,
BPWM1_BPWM_CMPDAT4=1074114656,
BPWM1_BPWM_CMPDAT5=1074114660,
BPWM1_BPWM_CNT=1074114704,
BPWM1_BPWM_WGCTL0=1074114736,
BPWM1_BPWM_WGCTL1=1074114740,
BPWM1_BPWM_MSKEN=1074114744,
BPWM1_BPWM_MSK=1074114748,
BPWM1_BPWM_POLCTL=1074114772,
BPWM1_BPWM_POEN=1074114776,
BPWM1_BPWM_INTEN=1074114784,
BPWM1_BPWM_INTSTS=1074114792,
BPWM1_BPWM_EADCTS0=1074114808,
BPWM1_BPWM_EADCTS1=1074114812,
BPWM1_BPWM_SSCTL=1074114832,
BPWM1_BPWM_SSTRG=1074114836,
BPWM1_BPWM_STATUS=1074114848,
BPWM1_BPWM_CAPINEN=1074115072,
BPWM1_BPWM_CAPCTL=1074115076,
BPWM1_BPWM_CAPSTS=1074115080,
BPWM1_BPWM_RCAPDAT0=1074115084,
BPWM1_BPWM_FCAPDAT0=1074115088,
BPWM1_BPWM_RCAPDAT1=1074115092,
BPWM1_BPWM_FCAPDAT1=1074115096,
BPWM1_BPWM_RCAPDAT2=1074115100,
BPWM1_BPWM_FCAPDAT2=1074115104,
BPWM1_BPWM_RCAPDAT3=1074115108,
BPWM1_BPWM_FCAPDAT3=1074115112,
BPWM1_BPWM_RCAPDAT4=1074115116,
BPWM1_BPWM_FCAPDAT4=1074115120,
BPWM1_BPWM_RCAPDAT5=1074115124,
BPWM1_BPWM_FCAPDAT5=1074115128,
BPWM1_BPWM_CAPIEN=1074115152,
BPWM1_BPWM_CAPIF=1074115156,
BPWM1_BPWM_SELFTEST=1074115328,
BPWM1_BPWM_PBUF=1074115332,
BPWM1_BPWM_CMPBUF0=1074115356,
BPWM1_BPWM_CMPBUF1=1074115360,
BPWM1_BPWM_CMPBUF2=1074115364,
BPWM1_BPWM_CMPBUF3=1074115368,
BPWM1_BPWM_CMPBUF4=1074115372,
BPWM1_BPWM_CMPBUF5=1074115376,
QEI0_QEI_CNT=1074462720,
QEI0_QEI_CNTHOLD=1074462724,
QEI0_QEI_CNTLATCH=1074462728,
QEI0_QEI_CNTCMP=1074462732,
QEI0_QEI_CNTMAX=1074462740,
QEI0_QEI_CTL=1074462744,
QEI0_QEI_STATUS=1074462764,
QEI1_QEI_CNT=1074466816,
QEI1_QEI_CNTHOLD=1074466820,
QEI1_QEI_CNTLATCH=1074466824,
QEI1_QEI_CNTCMP=1074466828,
QEI1_QEI_CNTMAX=1074466836,
QEI1_QEI_CTL=1074466840,
QEI1_QEI_STATUS=1074466860,
ECAP0_ECAP_CNT=1074479104,
ECAP0_ECAP_HLD0=1074479108,
ECAP0_ECAP_HLD1=1074479112,
ECAP0_ECAP_HLD2=1074479116,
ECAP0_ECAP_CNTCMP=1074479120,
ECAP0_ECAP_CTL0=1074479124,
ECAP0_ECAP_CTL1=1074479128,
ECAP0_ECAP_STATUS=1074479132,
ECAP1_ECAP_CNT=1074483200,
ECAP1_ECAP_HLD0=1074483204,
ECAP1_ECAP_HLD1=1074483208,
ECAP1_ECAP_HLD2=1074483212,
ECAP1_ECAP_CNTCMP=1074483216,
ECAP1_ECAP_CTL0=1074483220,
ECAP1_ECAP_CTL1=1074483224,
ECAP1_ECAP_STATUS=1074483228,
UART0_UART_DAT=1074200576,
UART0_UART_INTEN=1074200580,
UART0_UART_FIFO=1074200584,
UART0_UART_LINE=1074200588,
UART0_UART_MODEM=1074200592,
UART0_UART_MODEMSTS=1074200596,
UART0_UART_FIFOSTS=1074200600,
UART0_UART_INTSTS=1074200604,
UART0_UART_TOUT=1074200608,
UART0_UART_BAUD=1074200612,
UART0_UART_IRDA=1074200616,
UART0_UART_ALTCTL=1074200620,
UART0_UART_FUNCSEL=1074200624,
UART0_UART_LINCTL=1074200628,
UART0_UART_LINSTS=1074200632,
UART0_UART_BRCOMP=1074200636,
UART0_UART_WKCTL=1074200640,
UART0_UART_WKSTS=1074200644,
UART0_UART_DWKCOMP=1074200648,
UART1_UART_DAT=1074204672,
UART1_UART_INTEN=1074204676,
UART1_UART_FIFO=1074204680,
UART1_UART_LINE=1074204684,
UART1_UART_MODEM=1074204688,
UART1_UART_MODEMSTS=1074204692,
UART1_UART_FIFOSTS=1074204696,
UART1_UART_INTSTS=1074204700,
UART1_UART_TOUT=1074204704,
UART1_UART_BAUD=1074204708,
UART1_UART_IRDA=1074204712,
UART1_UART_ALTCTL=1074204716,
UART1_UART_FUNCSEL=1074204720,
UART1_UART_LINCTL=1074204724,
UART1_UART_LINSTS=1074204728,
UART1_UART_BRCOMP=1074204732,
UART1_UART_WKCTL=1074204736,
UART1_UART_WKSTS=1074204740,
UART1_UART_DWKCOMP=1074204744,
UART2_UART_DAT=1074208768,
UART2_UART_INTEN=1074208772,
UART2_UART_FIFO=1074208776,
UART2_UART_LINE=1074208780,
UART2_UART_MODEM=1074208784,
UART2_UART_MODEMSTS=1074208788,
UART2_UART_FIFOSTS=1074208792,
UART2_UART_INTSTS=1074208796,
UART2_UART_TOUT=1074208800,
UART2_UART_BAUD=1074208804,
UART2_UART_IRDA=1074208808,
UART2_UART_ALTCTL=1074208812,
UART2_UART_FUNCSEL=1074208816,
UART2_UART_LINCTL=1074208820,
UART2_UART_LINSTS=1074208824,
UART2_UART_BRCOMP=1074208828,
UART2_UART_WKCTL=1074208832,
UART2_UART_WKSTS=1074208836,
UART2_UART_DWKCOMP=1074208840,
UART3_UART_DAT=1074212864,
UART3_UART_INTEN=1074212868,
UART3_UART_FIFO=1074212872,
UART3_UART_LINE=1074212876,
UART3_UART_MODEM=1074212880,
UART3_UART_MODEMSTS=1074212884,
UART3_UART_FIFOSTS=1074212888,
UART3_UART_INTSTS=1074212892,
UART3_UART_TOUT=1074212896,
UART3_UART_BAUD=1074212900,
UART3_UART_IRDA=1074212904,
UART3_UART_ALTCTL=1074212908,
UART3_UART_FUNCSEL=1074212912,
UART3_UART_LINCTL=1074212916,
UART3_UART_LINSTS=1074212920,
UART3_UART_BRCOMP=1074212924,
UART3_UART_WKCTL=1074212928,
UART3_UART_WKSTS=1074212932,
UART3_UART_DWKCOMP=1074212936,
UART4_UART_DAT=1074216960,
UART4_UART_INTEN=1074216964,
UART4_UART_FIFO=1074216968,
UART4_UART_LINE=1074216972,
UART4_UART_MODEM=1074216976,
UART4_UART_MODEMSTS=1074216980,
UART4_UART_FIFOSTS=1074216984,
UART4_UART_INTSTS=1074216988,
UART4_UART_TOUT=1074216992,
UART4_UART_BAUD=1074216996,
UART4_UART_IRDA=1074217000,
UART4_UART_ALTCTL=1074217004,
UART4_UART_FUNCSEL=1074217008,
UART4_UART_LINCTL=1074217012,
UART4_UART_LINSTS=1074217016,
UART4_UART_BRCOMP=1074217020,
UART4_UART_WKCTL=1074217024,
UART4_UART_WKSTS=1074217028,
UART4_UART_DWKCOMP=1074217032,
UART5_UART_DAT=1074221056,
UART5_UART_INTEN=1074221060,
UART5_UART_FIFO=1074221064,
UART5_UART_LINE=1074221068,
UART5_UART_MODEM=1074221072,
UART5_UART_MODEMSTS=1074221076,
UART5_UART_FIFOSTS=1074221080,
UART5_UART_INTSTS=1074221084,
UART5_UART_TOUT=1074221088,
UART5_UART_BAUD=1074221092,
UART5_UART_IRDA=1074221096,
UART5_UART_ALTCTL=1074221100,
UART5_UART_FUNCSEL=1074221104,
UART5_UART_LINCTL=1074221108,
UART5_UART_LINSTS=1074221112,
UART5_UART_BRCOMP=1074221116,
UART5_UART_WKCTL=1074221120,
UART5_UART_WKSTS=1074221124,
UART5_UART_DWKCOMP=1074221128,
SC0_SC_DAT=1074331648,
SC0_SC_CTL=1074331652,
SC0_SC_ALTCTL=1074331656,
SC0_SC_EGT=1074331660,
SC0_SC_RXTOUT=1074331664,
SC0_SC_ETUCTL=1074331668,
SC0_SC_INTEN=1074331672,
SC0_SC_INTSTS=1074331676,
SC0_SC_STATUS=1074331680,
SC0_SC_PINCTL=1074331684,
SC0_SC_TMRCTL0=1074331688,
SC0_SC_TMRCTL1=1074331692,
SC0_SC_TMRCTL2=1074331696,
SC0_SC_UARTCTL=1074331700,
SC0_SC_TMRDAT0=1074331704,
SC0_SC_TMRDAT1=1074331708,
SC0_SC_PETCTL=1074331712,
SC0_SC_BGTEXT=1074331716,
SC0_SC_EGTADJ=1074331720,
SC0_SC_ACTCTL=1074331724,
SC1_SC_DAT=1074335744,
SC1_SC_CTL=1074335748,
SC1_SC_ALTCTL=1074335752,
SC1_SC_EGT=1074335756,
SC1_SC_RXTOUT=1074335760,
SC1_SC_ETUCTL=1074335764,
SC1_SC_INTEN=1074335768,
SC1_SC_INTSTS=1074335772,
SC1_SC_STATUS=1074335776,
SC1_SC_PINCTL=1074335780,
SC1_SC_TMRCTL0=1074335784,
SC1_SC_TMRCTL1=1074335788,
SC1_SC_TMRCTL2=1074335792,
SC1_SC_UARTCTL=1074335796,
SC1_SC_TMRDAT0=1074335800,
SC1_SC_TMRDAT1=1074335804,
SC1_SC_PETCTL=1074335808,
SC1_SC_BGTEXT=1074335812,
SC1_SC_EGTADJ=1074335816,
SC1_SC_ACTCTL=1074335820,
SC2_SC_DAT=1074339840,
SC2_SC_CTL=1074339844,
SC2_SC_ALTCTL=1074339848,
SC2_SC_EGT=1074339852,
SC2_SC_RXTOUT=1074339856,
SC2_SC_ETUCTL=1074339860,
SC2_SC_INTEN=1074339864,
SC2_SC_INTSTS=1074339868,
SC2_SC_STATUS=1074339872,
SC2_SC_PINCTL=1074339876,
SC2_SC_TMRCTL0=1074339880,
SC2_SC_TMRCTL1=1074339884,
SC2_SC_TMRCTL2=1074339888,
SC2_SC_UARTCTL=1074339892,
SC2_SC_TMRDAT0=1074339896,
SC2_SC_TMRDAT1=1074339900,
SC2_SC_PETCTL=1074339904,
SC2_SC_BGTEXT=1074339908,
SC2_SC_EGTADJ=1074339912,
SC2_SC_ACTCTL=1074339916,
I2S_I2S_CTL0=1074036736,
I2S_I2S_CLKDIV=1074036740,
I2S_I2S_IEN=1074036744,
I2S_I2S_STATUS0=1074036748,
I2S_I2S_TXFIFO=1074036752,
I2S_I2S_RXFIFO=1074036756,
I2S_I2S_CTL1=1074036768,
I2S_I2S_STATUS1=1074036772,
QSPI0_SPIx_CTL=1074135040,
QSPI0_SPIx_CLKDIV=1074135044,
QSPI0_SPIx_SSCTL=1074135048,
QSPI0_SPIx_PDMACTL=1074135052,
QSPI0_SPIx_FIFOCTL=1074135056,
QSPI0_SPIx_STATUS=1074135060,
QSPI0_SPIx_TX=1074135072,
QSPI0_SPIx_RX=1074135088,
QSPI0_SPIx_INTERNAL=1074135112,
QSPI0_SPIx_I2SCTL=1074135136,
QSPI0_SPIx_I2SCLK=1074135140,
QSPI0_SPIx_I2SSTS=1074135144,
SPI0_SPIx_CTL=1074139136,
SPI0_SPIx_CLKDIV=1074139140,
SPI0_SPIx_SSCTL=1074139144,
SPI0_SPIx_PDMACTL=1074139148,
SPI0_SPIx_FIFOCTL=1074139152,
SPI0_SPIx_STATUS=1074139156,
SPI0_SPIx_TX=1074139168,
SPI0_SPIx_RX=1074139184,
SPI0_SPIx_INTERNAL=1074139208,
SPI0_SPIx_I2SCTL=1074139232,
SPI0_SPIx_I2SCLK=1074139236,
SPI0_SPIx_I2SSTS=1074139240,
SPI1_SPIx_CTL=1074143232,
SPI1_SPIx_CLKDIV=1074143236,
SPI1_SPIx_SSCTL=1074143240,
SPI1_SPIx_PDMACTL=1074143244,
SPI1_SPIx_FIFOCTL=1074143248,
SPI1_SPIx_STATUS=1074143252,
SPI1_SPIx_TX=1074143264,
SPI1_SPIx_RX=1074143280,
SPI1_SPIx_INTERNAL=1074143304,
SPI1_SPIx_I2SCTL=1074143328,
SPI1_SPIx_I2SCLK=1074143332,
SPI1_SPIx_I2SSTS=1074143336,
SPI2_SPIx_CTL=1074147328,
SPI2_SPIx_CLKDIV=1074147332,
SPI2_SPIx_SSCTL=1074147336,
SPI2_SPIx_PDMACTL=1074147340,
SPI2_SPIx_FIFOCTL=1074147344,
SPI2_SPIx_STATUS=1074147348,
SPI2_SPIx_TX=1074147360,
SPI2_SPIx_RX=1074147376,
SPI2_SPIx_INTERNAL=1074147400,
SPI2_SPIx_I2SCTL=1074147424,
SPI2_SPIx_I2SCLK=1074147428,
SPI2_SPIx_I2SSTS=1074147432,
SPI3_SPIx_CTL=1074151424,
SPI3_SPIx_CLKDIV=1074151428,
SPI3_SPIx_SSCTL=1074151432,
SPI3_SPIx_PDMACTL=1074151436,
SPI3_SPIx_FIFOCTL=1074151440,
SPI3_SPIx_STATUS=1074151444,
SPI3_SPIx_TX=1074151456,
SPI3_SPIx_RX=1074151472,
SPI3_SPIx_INTERNAL=1074151496,
SPI3_SPIx_I2SCTL=1074151520,
SPI3_SPIx_I2SCLK=1074151524,
SPI3_SPIx_I2SSTS=1074151528,
SPI4_SPI_CTL=1074155520,
SPI4_SPI_STATUS=1074155524,
SPI4_SPI_CLKDIV=1074155528,
SPI4_SPI_SSCTL=1074155532,
SPI4_SPI_RX0=1074155536,
SPI4_SPI_RX1=1074155540,
SPI4_SPI_TX0=1074155552,
SPI4_SPI_TX1=1074155556,
SPI4_SPI_PDMACTL=1074155576,
SPI4_SPI_FIFOCTL=1074155580,
SPI4_SPI_INTERNAL=1074155600,
I2C0_I2C_CTL0=1074266112,
I2C0_I2C_ADDR0=1074266116,
I2C0_I2C_DAT=1074266120,
I2C0_I2C_STATUS0=1074266124,
I2C0_I2C_CLKDIV=1074266128,
I2C0_I2C_TOCTL=1074266132,
I2C0_I2C_ADDR1=1074266136,
I2C0_I2C_ADDR2=1074266140,
I2C0_I2C_ADDR3=1074266144,
I2C0_I2C_ADDRMSK0=1074266148,
I2C0_I2C_ADDRMSK1=1074266152,
I2C0_I2C_ADDRMSK2=1074266156,
I2C0_I2C_ADDRMSK3=1074266160,
I2C0_I2C_WKCTL=1074266172,
I2C0_I2C_WKSTS=1074266176,
I2C0_I2C_CTL1=1074266180,
I2C0_I2C_STATUS1=1074266184,
I2C0_I2C_TMCTL=1074266188,
I2C0_I2C_BUSCTL=1074266192,
I2C0_I2C_BUSTCTL=1074266196,
I2C0_I2C_BUSSTS=1074266200,
I2C0_I2C_PKTSIZE=1074266204,
I2C0_I2C_PKTCRC=1074266208,
I2C0_I2C_BUSTOUT=1074266212,
I2C0_I2C_CLKTOUT=1074266216,
I2C1_I2C_CTL0=1074270208,
I2C1_I2C_ADDR0=1074270212,
I2C1_I2C_DAT=1074270216,
I2C1_I2C_STATUS0=1074270220,
I2C1_I2C_CLKDIV=1074270224,
I2C1_I2C_TOCTL=1074270228,
I2C1_I2C_ADDR1=1074270232,
I2C1_I2C_ADDR2=1074270236,
I2C1_I2C_ADDR3=1074270240,
I2C1_I2C_ADDRMSK0=1074270244,
I2C1_I2C_ADDRMSK1=1074270248,
I2C1_I2C_ADDRMSK2=1074270252,
I2C1_I2C_ADDRMSK3=1074270256,
I2C1_I2C_WKCTL=1074270268,
I2C1_I2C_WKSTS=1074270272,
I2C1_I2C_CTL1=1074270276,
I2C1_I2C_STATUS1=1074270280,
I2C1_I2C_TMCTL=1074270284,
I2C1_I2C_BUSCTL=1074270288,
I2C1_I2C_BUSTCTL=1074270292,
I2C1_I2C_BUSSTS=1074270296,
I2C1_I2C_PKTSIZE=1074270300,
I2C1_I2C_PKTCRC=1074270304,
I2C1_I2C_BUSTOUT=1074270308,
I2C1_I2C_CLKTOUT=1074270312,
I2C2_I2C_CTL0=1074274304,
I2C2_I2C_ADDR0=1074274308,
I2C2_I2C_DAT=1074274312,
I2C2_I2C_STATUS0=1074274316,
I2C2_I2C_CLKDIV=1074274320,
I2C2_I2C_TOCTL=1074274324,
I2C2_I2C_ADDR1=1074274328,
I2C2_I2C_ADDR2=1074274332,
I2C2_I2C_ADDR3=1074274336,
I2C2_I2C_ADDRMSK0=1074274340,
I2C2_I2C_ADDRMSK1=1074274344,
I2C2_I2C_ADDRMSK2=1074274348,
I2C2_I2C_ADDRMSK3=1074274352,
I2C2_I2C_WKCTL=1074274364,
I2C2_I2C_WKSTS=1074274368,
I2C2_I2C_CTL1=1074274372,
I2C2_I2C_STATUS1=1074274376,
I2C2_I2C_TMCTL=1074274380,
I2C2_I2C_BUSCTL=1074274384,
I2C2_I2C_BUSTCTL=1074274388,
I2C2_I2C_BUSSTS=1074274392,
I2C2_I2C_PKTSIZE=1074274396,
I2C2_I2C_PKTCRC=1074274400,
I2C2_I2C_BUSTOUT=1074274404,
I2C2_I2C_CLKTOUT=1074274408,
USCI0_USCI_CTL=1074593792,
USCI0_USCI_CTL=1074593792,
USCI0_USCI_CTL=1074593792,
USCI0_USCI_CTL=1074593792,
USCI0_USCI_INTEN=1074593796,
USCI0_USCI_INTEN=1074593796,
USCI0_USCI_INTEN=1074593796,
USCI0_USCI_BRGEN=1074593800,
USCI0_USCI_BRGEN=1074593800,
USCI0_USCI_BRGEN=1074593800,
USCI0_USCI_BRGEN=1074593800,
USCI0_USCI_DATIN0=1074593808,
USCI0_USCI_DATIN0=1074593808,
USCI0_USCI_DATIN0=1074593808,
USCI0_USCI_CTLIN0=1074593824,
USCI0_USCI_CTLIN0=1074593824,
USCI0_USCI_CTLIN0=1074593824,
USCI0_USCI_CLKIN=1074593832,
USCI0_USCI_CLKIN=1074593832,
USCI0_USCI_CLKIN=1074593832,
USCI0_USCI_LINECTL=1074593836,
USCI0_USCI_LINECTL=1074593836,
USCI0_USCI_LINECTL=1074593836,
USCI0_USCI_LINECTL=1074593836,
USCI0_USCI_TXDAT=1074593840,
USCI0_USCI_TXDAT=1074593840,
USCI0_USCI_TXDAT=1074593840,
USCI0_USCI_TXDAT=1074593840,
USCI0_USCI_RXDAT=1074593844,
USCI0_USCI_RXDAT=1074593844,
USCI0_USCI_RXDAT=1074593844,
USCI0_USCI_RXDAT=1074593844,
USCI0_USCI_BUFCTL=1074593848,
USCI0_USCI_BUFCTL=1074593848,
USCI0_USCI_BUFCTL=1074593848,
USCI0_USCI_BUFSTS=1074593852,
USCI0_USCI_BUFSTS=1074593852,
USCI0_USCI_BUFSTS=1074593852,
USCI0_USCI_PDMACTL=1074593856,
USCI0_USCI_PDMACTL=1074593856,
USCI0_USCI_PDMACTL=1074593856,
USCI0_USCI_DEVADDR0=1074593860,
USCI0_USCI_DEVADDR0=1074593860,
USCI0_USCI_DEVADDR1=1074593864,
USCI0_USCI_DEVADDR1=1074593864,
USCI0_USCI_ADDRMSK0=1074593868,
USCI0_USCI_ADDRMSK0=1074593868,
USCI0_USCI_ADDRMSK1=1074593872,
USCI0_USCI_ADDRMSK1=1074593872,
USCI0_USCI_WKCTL=1074593876,
USCI0_USCI_WKCTL=1074593876,
USCI0_USCI_WKCTL=1074593876,
USCI0_USCI_WKCTL=1074593876,
USCI0_USCI_WKSTS=1074593880,
USCI0_USCI_WKSTS=1074593880,
USCI0_USCI_WKSTS=1074593880,
USCI0_USCI_WKSTS=1074593880,
USCI0_USCI_PROTCTL=1074593884,
USCI0_USCI_PROTCTL=1074593884,
USCI0_USCI_PROTCTL=1074593884,
USCI0_USCI_PROTCTL=1074593884,
USCI0_USCI_PROTIEN=1074593888,
USCI0_USCI_PROTIEN=1074593888,
USCI0_USCI_PROTIEN=1074593888,
USCI0_USCI_PROTIEN=1074593888,
USCI0_USCI_PROTSTS=1074593892,
USCI0_USCI_PROTSTS=1074593892,
USCI0_USCI_PROTSTS=1074593892,
USCI0_USCI_PROTSTS=1074593892,
USCI0_USCI_IUR=1074593924,
USCI0_USCI_IUR=1074593924,
USCI0_USCI_IUR=1074593924,
USCI0_USCI_ADMAT=1074593928,
USCI0_USCI_TMCTL=1074593932,
USCI0_USCI_TMCTL=1074593932,
USCI1_USCI_CTL=1074597888,
USCI1_USCI_CTL=1074597888,
USCI1_USCI_CTL=1074597888,
USCI1_USCI_CTL=1074597888,
USCI1_USCI_INTEN=1074597892,
USCI1_USCI_INTEN=1074597892,
USCI1_USCI_INTEN=1074597892,
USCI1_USCI_BRGEN=1074597896,
USCI1_USCI_BRGEN=1074597896,
USCI1_USCI_BRGEN=1074597896,
USCI1_USCI_BRGEN=1074597896,
USCI1_USCI_DATIN0=1074597904,
USCI1_USCI_DATIN0=1074597904,
USCI1_USCI_DATIN0=1074597904,
USCI1_USCI_CTLIN0=1074597920,
USCI1_USCI_CTLIN0=1074597920,
USCI1_USCI_CTLIN0=1074597920,
USCI1_USCI_CLKIN=1074597928,
USCI1_USCI_CLKIN=1074597928,
USCI1_USCI_CLKIN=1074597928,
USCI1_USCI_LINECTL=1074597932,
USCI1_USCI_LINECTL=1074597932,
USCI1_USCI_LINECTL=1074597932,
USCI1_USCI_LINECTL=1074597932,
USCI1_USCI_TXDAT=1074597936,
USCI1_USCI_TXDAT=1074597936,
USCI1_USCI_TXDAT=1074597936,
USCI1_USCI_TXDAT=1074597936,
USCI1_USCI_RXDAT=1074597940,
USCI1_USCI_RXDAT=1074597940,
USCI1_USCI_RXDAT=1074597940,
USCI1_USCI_RXDAT=1074597940,
USCI1_USCI_BUFCTL=1074597944,
USCI1_USCI_BUFCTL=1074597944,
USCI1_USCI_BUFCTL=1074597944,
USCI1_USCI_BUFSTS=1074597948,
USCI1_USCI_BUFSTS=1074597948,
USCI1_USCI_BUFSTS=1074597948,
USCI1_USCI_PDMACTL=1074597952,
USCI1_USCI_PDMACTL=1074597952,
USCI1_USCI_PDMACTL=1074597952,
USCI1_USCI_DEVADDR0=1074597956,
USCI1_USCI_DEVADDR0=1074597956,
USCI1_USCI_DEVADDR1=1074597960,
USCI1_USCI_DEVADDR1=1074597960,
USCI1_USCI_ADDRMSK0=1074597964,
USCI1_USCI_ADDRMSK0=1074597964,
USCI1_USCI_ADDRMSK1=1074597968,
USCI1_USCI_ADDRMSK1=1074597968,
USCI1_USCI_WKCTL=1074597972,
USCI1_USCI_WKCTL=1074597972,
USCI1_USCI_WKCTL=1074597972,
USCI1_USCI_WKCTL=1074597972,
USCI1_USCI_WKSTS=1074597976,
USCI1_USCI_WKSTS=1074597976,
USCI1_USCI_WKSTS=1074597976,
USCI1_USCI_WKSTS=1074597976,
USCI1_USCI_PROTCTL=1074597980,
USCI1_USCI_PROTCTL=1074597980,
USCI1_USCI_PROTCTL=1074597980,
USCI1_USCI_PROTCTL=1074597980,
USCI1_USCI_PROTIEN=1074597984,
USCI1_USCI_PROTIEN=1074597984,
USCI1_USCI_PROTIEN=1074597984,
USCI1_USCI_PROTIEN=1074597984,
USCI1_USCI_PROTSTS=1074597988,
USCI1_USCI_PROTSTS=1074597988,
USCI1_USCI_PROTSTS=1074597988,
USCI1_USCI_PROTSTS=1074597988,
USCI1_USCI_IUR=1074598020,
USCI1_USCI_IUR=1074598020,
USCI1_USCI_IUR=1074598020,
USCI1_USCI_ADMAT=1074598024,
USCI1_USCI_TMCTL=1074598028,
USCI1_USCI_TMCTL=1074598028,
CAN_CAN_CON=1074397184,
CAN_CAN_STATUS=1074397188,
CAN_CAN_ERR=1074397192,
CAN_CAN_BTIME=1074397196,
CAN_CAN_IIDR=1074397200,
CAN_CAN_TEST=1074397204,
CAN_CAN_BRPE=1074397208,
CAN_CAN_IF1_CREQ=1074397216,
CAN_CAN_IF2_CREQ=1074397312,
CAN_CAN_IF1_CMASK=1074397220,
CAN_CAN_IF2_CMASK=1074397316,
CAN_CAN_IF1_MASK1=1074397224,
CAN_CAN_IF2_MASK1=1074397320,
CAN_CAN_IF1_MASK2=1074397228,
CAN_CAN_IF2_MASK2=1074397324,
CAN_CAN_IF1_ARB1=1074397232,
CAN_CAN_IF2_ARB1=1074397328,
CAN_CAN_IF1_ARB2=1074397236,
CAN_CAN_IF2_ARB2=1074397332,
CAN_CAN_IF1_MCON=1074397240,
CAN_CAN_IF2_MCON=1074397336,
CAN_CAN_IF1_DAT_A1=1074397244,
CAN_CAN_IF2_DAT_A1=1074397340,
CAN_CAN_IF1_DAT_A2=1074397248,
CAN_CAN_IF2_DAT_A2=1074397344,
CAN_CAN_IF1_DAT_B1=1074397252,
CAN_CAN_IF2_DAT_B1=1074397348,
CAN_CAN_IF1_DAT_B2=1074397256,
CAN_CAN_IF2_DAT_B2=1074397352,
CAN_CAN_TXREQ1=1074397440,
CAN_CAN_TXREQ2=1074397444,
CAN_CAN_NDAT1=1074397472,
CAN_CAN_NDAT2=1074397476,
CAN_CAN_IPND1=1074397504,
CAN_CAN_IPND2=1074397508,
CAN_CAN_MVLD1=1074397536,
CAN_CAN_MVLD2=1074397540,
CAN_CAN_WU_EN=1074397544,
CAN_CAN_WU_STATUS=1074397548,
SDH0_SDH_FB_0=1073795072,
SDH0_SDH_FB_1=1073795076,
SDH0_SDH_FB_2=1073795080,
SDH0_SDH_FB_3=1073795084,
SDH0_SDH_FB_4=1073795088,
SDH0_SDH_FB_5=1073795092,
SDH0_SDH_FB_6=1073795096,
SDH0_SDH_FB_7=1073795100,
SDH0_SDH_FB_8=1073795104,
SDH0_SDH_FB_9=1073795108,
SDH0_SDH_FB_10=1073795112,
SDH0_SDH_FB_11=1073795116,
SDH0_SDH_FB_12=1073795120,
SDH0_SDH_FB_13=1073795124,
SDH0_SDH_FB_14=1073795128,
SDH0_SDH_FB_15=1073795132,
SDH0_SDH_FB_16=1073795136,
SDH0_SDH_FB_17=1073795140,
SDH0_SDH_FB_18=1073795144,
SDH0_SDH_FB_19=1073795148,
SDH0_SDH_FB_20=1073795152,
SDH0_SDH_FB_21=1073795156,
SDH0_SDH_FB_22=1073795160,
SDH0_SDH_FB_23=1073795164,
SDH0_SDH_FB_24=1073795168,
SDH0_SDH_FB_25=1073795172,
SDH0_SDH_FB_26=1073795176,
SDH0_SDH_FB_27=1073795180,
SDH0_SDH_FB_28=1073795184,
SDH0_SDH_FB_29=1073795188,
SDH0_SDH_FB_30=1073795192,
SDH0_SDH_FB_31=1073795196,
SDH0_SDH_DMACTL=1073796096,
SDH0_SDH_DMASA=1073796104,
SDH0_SDH_DMABCNT=1073796108,
SDH0_SDH_DMAINTEN=1073796112,
SDH0_SDH_DMAINTSTS=1073796116,
SDH0_SDH_GCTL=1073797120,
SDH0_SDH_GINTEN=1073797124,
SDH0_SDH_GINTSTS=1073797128,
SDH0_SDH_CTL=1073797152,
SDH0_SDH_CMDARG=1073797156,
SDH0_SDH_INTEN=1073797160,
SDH0_SDH_INTSTS=1073797164,
SDH0_SDH_RESP0=1073797168,
SDH0_SDH_RESP1=1073797172,
SDH0_SDH_BLEN=1073797176,
SDH0_SDH_TOUT=1073797180,
EBI_EBI_CTL0=1073807360,
EBI_EBI_TCTL0=1073807364,
EBI_EBI_CTL1=1073807376,
EBI_EBI_TCTL1=1073807380,
EBI_EBI_CTL2=1073807392,
EBI_EBI_TCTL2=1073807396,
USBD_USBD_INTEN=1074528256,
USBD_USBD_INTSTS=1074528260,
USBD_USBD_FADDR=1074528264,
USBD_USBD_EPSTS=1074528268,
USBD_USBD_ATTR=1074528272,
USBD_USBD_VBUSDET=1074528276,
USBD_USBD_STBUFSEG=1074528280,
USBD_USBD_EPSTS0=1074528288,
USBD_USBD_EPSTS1=1074528292,
USBD_USBD_LPMATTR=1074528392,
USBD_USBD_FN=1074528396,
USBD_USBD_SE0=1074528400,
USBD_USBD_BIST=1074528416,
USBD_USBD_PDMA=1074528420,
USBD_USBD_TEST=1074528424,
USBD_USBD_BUFSEG0=1074529536,
USBD_USBD_MXPLD0=1074529540,
USBD_USBD_CFG0=1074529544,
USBD_USBD_CFGP0=1074529548,
USBD_USBD_BUFSEG1=1074529552,
USBD_USBD_MXPLD1=1074529556,
USBD_USBD_CFG1=1074529560,
USBD_USBD_CFGP1=1074529564,
USBD_USBD_BUFSEG2=1074529568,
USBD_USBD_MXPLD2=1074529572,
USBD_USBD_CFG2=1074529576,
USBD_USBD_CFGP2=1074529580,
USBD_USBD_BUFSEG3=1074529584,
USBD_USBD_MXPLD3=1074529588,
USBD_USBD_CFG3=1074529592,
USBD_USBD_CFGP3=1074529596,
USBD_USBD_BUFSEG4=1074529600,
USBD_USBD_MXPLD4=1074529604,
USBD_USBD_CFG4=1074529608,
USBD_USBD_CFGP4=1074529612,
USBD_USBD_BUFSEG5=1074529616,
USBD_USBD_MXPLD5=1074529620,
USBD_USBD_CFG5=1074529624,
USBD_USBD_CFGP5=1074529628,
USBD_USBD_BUFSEG6=1074529632,
USBD_USBD_MXPLD6=1074529636,
USBD_USBD_CFG6=1074529640,
USBD_USBD_CFGP6=1074529644,
USBD_USBD_BUFSEG7=1074529648,
USBD_USBD_MXPLD7=1074529652,
USBD_USBD_CFG7=1074529656,
USBD_USBD_CFGP7=1074529660,
USBD_USBD_BUFSEG8=1074529664,
USBD_USBD_MXPLD8=1074529668,
USBD_USBD_CFG8=1074529672,
USBD_USBD_CFGP8=1074529676,
USBD_USBD_BUFSEG9=1074529680,
USBD_USBD_MXPLD9=1074529684,
USBD_USBD_CFG9=1074529688,
USBD_USBD_CFGP9=1074529692,
USBD_USBD_BUFSEG10=1074529696,
USBD_USBD_MXPLD10=1074529700,
USBD_USBD_CFG10=1074529704,
USBD_USBD_CFGP10=1074529708,
USBD_USBD_BUFSEG11=1074529712,
USBD_USBD_MXPLD11=1074529716,
USBD_USBD_CFG11=1074529720,
USBD_USBD_CFGP11=1074529724,
USBH_HcRevision=1073778688,
USBH_HcControl=1073778692,
USBH_HcCommandStatus=1073778696,
USBH_HcInterruptStatus=1073778700,
USBH_HcInterruptEnable=1073778704,
USBH_HcInterruptDisable=1073778708,
USBH_HcHCCA=1073778712,
USBH_HcPeriodCurrentED=1073778716,
USBH_HcControlHeadED=1073778720,
USBH_HcControlCurrentED=1073778724,
USBH_HcBulkHeadED=1073778728,
USBH_HcBulkCurrentED=1073778732,
USBH_HcDoneHead=1073778736,
USBH_HcFmInterval=1073778740,
USBH_HcFmRemaining=1073778744,
USBH_HcFmNumber=1073778748,
USBH_HcPeriodicStart=1073778752,
USBH_HcLSThreshold=1073778756,
USBH_HcRhDescriptorA=1073778760,
USBH_HcRhDescriptorB=1073778764,
USBH_HcRhStatus=1073778768,
USBH_HcRhPortStatus1=1073778776,
USBH_HcPhyControl=1073779200,
USBH_HcMiscControl=1073779204,
OTG_OTG_CTL=1074057216,
OTG_OTG_PHYCTL=1074057220,
OTG_OTG_INTEN=1074057224,
OTG_OTG_INTSTS=1074057228,
OTG_OTG_STATUS=1074057232,
OTG_OTG_PHY1=1074057236,
OTG_OTG_PHY2=1074057240,
CRC_CRC_CTL=1073942528,
CRC_CRC_DAT=1073942532,
CRC_CRC_SEED=1073942536,
CRC_CRC_CHECKSUM=1073942540,
CRYPTO_CRYPTO_INTEN=1073742336,
CRYPTO_CRYPTO_INTSTS=1073742340,
CRYPTO_CRYPTO_PRNG_CTL=1073742344,
CRYPTO_CRYPTO_PRNG_SEED=1073742348,
CRYPTO_CRYPTO_PRNG_KEY0=1073742352,
CRYPTO_CRYPTO_PRNG_KEY1=1073742356,
CRYPTO_CRYPTO_PRNG_KEY2=1073742360,
CRYPTO_CRYPTO_PRNG_KEY3=1073742364,
CRYPTO_CRYPTO_PRNG_KEY4=1073742368,
CRYPTO_CRYPTO_PRNG_KEY5=1073742372,
CRYPTO_CRYPTO_PRNG_KEY6=1073742376,
CRYPTO_CRYPTO_PRNG_KEY7=1073742380,
CRYPTO_CRYPTO_AES_FDBCK0=1073742416,
CRYPTO_CRYPTO_AES_FDBCK1=1073742420,
CRYPTO_CRYPTO_AES_FDBCK2=1073742424,
CRYPTO_CRYPTO_AES_FDBCK3=1073742428,
CRYPTO_CRYPTO_TDES_FDBCKH=1073742432,
CRYPTO_CRYPTO_TDES_FDBCKL=1073742436,
CRYPTO_CRYPTO_AES_CTL=1073742592,
CRYPTO_CRYPTO_AES_STS=1073742596,
CRYPTO_CRYPTO_AES_DATIN=1073742600,
CRYPTO_CRYPTO_AES_DATOUT=1073742604,
CRYPTO_CRYPTO_AES0_KEY0=1073742608,
CRYPTO_CRYPTO_AES0_KEY1=1073742612,
CRYPTO_CRYPTO_AES0_KEY2=1073742616,
CRYPTO_CRYPTO_AES0_KEY3=1073742620,
CRYPTO_CRYPTO_AES0_KEY4=1073742624,
CRYPTO_CRYPTO_AES0_KEY5=1073742628,
CRYPTO_CRYPTO_AES0_KEY6=1073742632,
CRYPTO_CRYPTO_AES0_KEY7=1073742636,
CRYPTO_CRYPTO_AES0_IV0=1073742640,
CRYPTO_CRYPTO_AES0_IV1=1073742644,
CRYPTO_CRYPTO_AES0_IV2=1073742648,
CRYPTO_CRYPTO_AES0_IV3=1073742652,
CRYPTO_CRYPTO_AES0_SADDR=1073742656,
CRYPTO_CRYPTO_AES0_DADDR=1073742660,
CRYPTO_CRYPTO_AES0_CNT=1073742664,
CRYPTO_CRYPTO_AES1_KEY0=1073742668,
CRYPTO_CRYPTO_AES1_KEY1=1073742672,
CRYPTO_CRYPTO_AES1_KEY2=1073742676,
CRYPTO_CRYPTO_AES1_KEY3=1073742680,
CRYPTO_CRYPTO_AES1_KEY4=1073742684,
CRYPTO_CRYPTO_AES1_KEY5=1073742688,
CRYPTO_CRYPTO_AES1_KEY6=1073742692,
CRYPTO_CRYPTO_AES1_KEY7=1073742696,
CRYPTO_CRYPTO_AES1_IV0=1073742700,
CRYPTO_CRYPTO_AES1_IV1=1073742704,
CRYPTO_CRYPTO_AES1_IV2=1073742708,
CRYPTO_CRYPTO_AES1_IV3=1073742712,
CRYPTO_CRYPTO_AES1_SADDR=1073742716,
CRYPTO_CRYPTO_AES1_DADDR=1073742720,
CRYPTO_CRYPTO_AES1_CNT=1073742724,
CRYPTO_CRYPTO_AES2_KEY0=1073742728,
CRYPTO_CRYPTO_AES2_KEY1=1073742732,
CRYPTO_CRYPTO_AES2_KEY2=1073742736,
CRYPTO_CRYPTO_AES2_KEY3=1073742740,
CRYPTO_CRYPTO_AES2_KEY4=1073742744,
CRYPTO_CRYPTO_AES2_KEY5=1073742748,
CRYPTO_CRYPTO_AES2_KEY6=1073742752,
CRYPTO_CRYPTO_AES2_KEY7=1073742756,
CRYPTO_CRYPTO_AES2_IV0=1073742760,
CRYPTO_CRYPTO_AES2_IV1=1073742764,
CRYPTO_CRYPTO_AES2_IV2=1073742768,
CRYPTO_CRYPTO_AES2_IV3=1073742772,
CRYPTO_CRYPTO_AES2_SADDR=1073742776,
CRYPTO_CRYPTO_AES2_DADDR=1073742780,
CRYPTO_CRYPTO_AES2_CNT=1073742784,
CRYPTO_CRYPTO_AES3_KEY0=1073742788,
CRYPTO_CRYPTO_AES3_KEY1=1073742792,
CRYPTO_CRYPTO_AES3_KEY2=1073742796,
CRYPTO_CRYPTO_AES3_KEY3=1073742800,
CRYPTO_CRYPTO_AES3_KEY4=1073742804,
CRYPTO_CRYPTO_AES3_KEY5=1073742808,
CRYPTO_CRYPTO_AES3_KEY6=1073742812,
CRYPTO_CRYPTO_AES3_KEY7=1073742816,
CRYPTO_CRYPTO_AES3_IV0=1073742820,
CRYPTO_CRYPTO_AES3_IV1=1073742824,
CRYPTO_CRYPTO_AES3_IV2=1073742828,
CRYPTO_CRYPTO_AES3_IV3=1073742832,
CRYPTO_CRYPTO_AES3_SADDR=1073742836,
CRYPTO_CRYPTO_AES3_DADDR=1073742840,
CRYPTO_CRYPTO_AES3_CNT=1073742844,
CRYPTO_CRYPTO_TDES_CTL=1073742848,
CRYPTO_CRYPTO_TDES_STS=1073742852,
CRYPTO_CRYPTO_TDES0_KEY1H=1073742856,
CRYPTO_CRYPTO_TDES0_KEY1L=1073742860,
CRYPTO_CRYPTO_TDES0_KEY2H=1073742864,
CRYPTO_CRYPTO_TDES0_KEY2L=1073742868,
CRYPTO_CRYPTO_TDES0_KEY3H=1073742872,
CRYPTO_CRYPTO_TDES0_KEY3L=1073742876,
CRYPTO_CRYPTO_TDES0_IVH=1073742880,
CRYPTO_CRYPTO_TDES0_IVL=1073742884,
CRYPTO_CRYPTO_TDES0_SADDR=1073742888,
CRYPTO_CRYPTO_TDES0_DADDR=1073742892,
CRYPTO_CRYPTO_TDES0_CNT=1073742896,
CRYPTO_CRYPTO_TDES_DATIN=1073742900,
CRYPTO_CRYPTO_TDES_DATOUT=1073742904,
CRYPTO_CRYPTO_TDES1_KEY1H=1073742920,
CRYPTO_CRYPTO_TDES1_KEY1L=1073742924,
CRYPTO_CRYPTO_TDES1_KEY2H=1073742928,
CRYPTO_CRYPTO_TDES1_KEY2L=1073742932,
CRYPTO_CRYPTO_TDES1_KEY3H=1073742936,
CRYPTO_CRYPTO_TDES1_KEY3L=1073742940,
CRYPTO_CRYPTO_TDES1_IVH=1073742944,
CRYPTO_CRYPTO_TDES1_IVL=1073742948,
CRYPTO_CRYPTO_TDES1_SADDR=1073742952,
CRYPTO_CRYPTO_TDES1_DADDR=1073742956,
CRYPTO_CRYPTO_TDES1_CNT=1073742960,
CRYPTO_CRYPTO_TDES2_KEY1H=1073742984,
CRYPTO_CRYPTO_TDES2_KEY1L=1073742988,
CRYPTO_CRYPTO_TDES2_KEY2H=1073742992,
CRYPTO_CRYPTO_TDES2_KEY2L=1073742996,
CRYPTO_CRYPTO_TDES2_KEY3H=1073743000,
CRYPTO_CRYPTO_TDES2_KEY3L=1073743004,
CRYPTO_CRYPTO_TDES2_IVH=1073743008,
CRYPTO_CRYPTO_TDES2_IVL=1073743012,
CRYPTO_CRYPTO_TDES2_SADDR=1073743016,
CRYPTO_CRYPTO_TDES2_DADDR=1073743020,
CRYPTO_CRYPTO_TDES2_CNT=1073743024,
CRYPTO_CRYPTO_TDES3_KEY1H=1073743048,
CRYPTO_CRYPTO_TDES3_KEY1L=1073743052,
CRYPTO_CRYPTO_TDES3_KEY2H=1073743056,
CRYPTO_CRYPTO_TDES3_KEY2L=1073743060,
CRYPTO_CRYPTO_TDES3_KEY3H=1073743064,
CRYPTO_CRYPTO_TDES3_KEY3L=1073743068,
CRYPTO_CRYPTO_TDES3_IVH=1073743072,
CRYPTO_CRYPTO_TDES3_IVL=1073743076,
CRYPTO_CRYPTO_TDES3_SADDR=1073743080,
CRYPTO_CRYPTO_TDES3_DADDR=1073743084,
CRYPTO_CRYPTO_TDES3_CNT=1073743088,
CRYPTO_CRYPTO_SHA_CTL=1073743104,
CRYPTO_CRYPTO_SHA_STS=1073743108,
CRYPTO_CRYPTO_SHA_DGST0=1073743112,
CRYPTO_CRYPTO_SHA_DGST1=1073743116,
CRYPTO_CRYPTO_SHA_DGST2=1073743120,
CRYPTO_CRYPTO_SHA_DGST3=1073743124,
CRYPTO_CRYPTO_SHA_DGST4=1073743128,
CRYPTO_CRYPTO_SHA_DGST5=1073743132,
CRYPTO_CRYPTO_SHA_DGST6=1073743136,
CRYPTO_CRYPTO_SHA_DGST7=1073743140,
CRYPTO_CRYPTO_SHA_DGST8=1073743144,
CRYPTO_CRYPTO_SHA_DGST9=1073743148,
CRYPTO_CRYPTO_SHA_DGST10=1073743152,
CRYPTO_CRYPTO_SHA_DGST11=1073743156,
CRYPTO_CRYPTO_SHA_DGST12=1073743160,
CRYPTO_CRYPTO_SHA_DGST13=1073743164,
CRYPTO_CRYPTO_SHA_DGST14=1073743168,
CRYPTO_CRYPTO_SHA_DGST15=1073743172,
CRYPTO_CRYPTO_SHA_KEYCNT=1073743176,
CRYPTO_CRYPTO_SHA_SADDR=1073743180,
CRYPTO_CRYPTO_SHA_DMACNT=1073743184,
CRYPTO_CRYPTO_SHA_DATIN=1073743188,
CRYPTO_CRYPTO_ECC_CTL=1073744384,
CRYPTO_CRYPTO_ECC_STS=1073744388,
CRYPTO_CRYPTO_ECC_X1_00=1073744392,
CRYPTO_CRYPTO_ECC_X1_01=1073744396,
CRYPTO_CRYPTO_ECC_X1_02=1073744400,
CRYPTO_CRYPTO_ECC_X1_03=1073744404,
CRYPTO_CRYPTO_ECC_X1_04=1073744408,
CRYPTO_CRYPTO_ECC_X1_05=1073744412,
CRYPTO_CRYPTO_ECC_X1_06=1073744416,
CRYPTO_CRYPTO_ECC_X1_07=1073744420,
CRYPTO_CRYPTO_ECC_X1_08=1073744424,
CRYPTO_CRYPTO_ECC_X1_09=1073744428,
CRYPTO_CRYPTO_ECC_X1_10=1073744432,
CRYPTO_CRYPTO_ECC_X1_11=1073744436,
CRYPTO_CRYPTO_ECC_X1_12=1073744440,
CRYPTO_CRYPTO_ECC_X1_13=1073744444,
CRYPTO_CRYPTO_ECC_X1_14=1073744448,
CRYPTO_CRYPTO_ECC_X1_15=1073744452,
CRYPTO_CRYPTO_ECC_X1_16=1073744456,
CRYPTO_CRYPTO_ECC_X1_17=1073744460,
CRYPTO_CRYPTO_ECC_Y1_00=1073744464,
CRYPTO_CRYPTO_ECC_Y1_01=1073744468,
CRYPTO_CRYPTO_ECC_Y1_02=1073744472,
CRYPTO_CRYPTO_ECC_Y1_03=1073744476,
CRYPTO_CRYPTO_ECC_Y1_04=1073744480,
CRYPTO_CRYPTO_ECC_Y1_05=1073744484,
CRYPTO_CRYPTO_ECC_Y1_06=1073744488,
CRYPTO_CRYPTO_ECC_Y1_07=1073744492,
CRYPTO_CRYPTO_ECC_Y1_08=1073744496,
CRYPTO_CRYPTO_ECC_Y1_09=1073744500,
CRYPTO_CRYPTO_ECC_Y1_10=1073744504,
CRYPTO_CRYPTO_ECC_Y1_11=1073744508,
CRYPTO_CRYPTO_ECC_Y1_12=1073744512,
CRYPTO_CRYPTO_ECC_Y1_13=1073744516,
CRYPTO_CRYPTO_ECC_Y1_14=1073744520,
CRYPTO_CRYPTO_ECC_Y1_15=1073744524,
CRYPTO_CRYPTO_ECC_Y1_16=1073744528,
CRYPTO_CRYPTO_ECC_Y1_17=1073744532,
CRYPTO_CRYPTO_ECC_X2_00=1073744536,
CRYPTO_CRYPTO_ECC_X2_01=1073744540,
CRYPTO_CRYPTO_ECC_X2_02=1073744544,
CRYPTO_CRYPTO_ECC_X2_03=1073744548,
CRYPTO_CRYPTO_ECC_X2_04=1073744552,
CRYPTO_CRYPTO_ECC_X2_05=1073744556,
CRYPTO_CRYPTO_ECC_X2_06=1073744560,
CRYPTO_CRYPTO_ECC_X2_07=1073744564,
CRYPTO_CRYPTO_ECC_X2_08=1073744568,
CRYPTO_CRYPTO_ECC_X2_09=1073744572,
CRYPTO_CRYPTO_ECC_X2_10=1073744576,
CRYPTO_CRYPTO_ECC_X2_11=1073744580,
CRYPTO_CRYPTO_ECC_X2_12=1073744584,
CRYPTO_CRYPTO_ECC_X2_13=1073744588,
CRYPTO_CRYPTO_ECC_X2_14=1073744592,
CRYPTO_CRYPTO_ECC_X2_15=1073744596,
CRYPTO_CRYPTO_ECC_X2_16=1073744600,
CRYPTO_CRYPTO_ECC_X2_17=1073744604,
CRYPTO_CRYPTO_ECC_Y2_00=1073744608,
CRYPTO_CRYPTO_ECC_Y2_01=1073744612,
CRYPTO_CRYPTO_ECC_Y2_02=1073744616,
CRYPTO_CRYPTO_ECC_Y2_03=1073744620,
CRYPTO_CRYPTO_ECC_Y2_04=1073744624,
CRYPTO_CRYPTO_ECC_Y2_05=1073744628,
CRYPTO_CRYPTO_ECC_Y2_06=1073744632,
CRYPTO_CRYPTO_ECC_Y2_07=1073744636,
CRYPTO_CRYPTO_ECC_Y2_08=1073744640,
CRYPTO_CRYPTO_ECC_Y2_09=1073744644,
CRYPTO_CRYPTO_ECC_Y2_10=1073744648,
CRYPTO_CRYPTO_ECC_Y2_11=1073744652,
CRYPTO_CRYPTO_ECC_Y2_12=1073744656,
CRYPTO_CRYPTO_ECC_Y2_13=1073744660,
CRYPTO_CRYPTO_ECC_Y2_14=1073744664,
CRYPTO_CRYPTO_ECC_Y2_15=1073744668,
CRYPTO_CRYPTO_ECC_Y2_16=1073744672,
CRYPTO_CRYPTO_ECC_Y2_17=1073744676,
CRYPTO_CRYPTO_ECC_A_00=1073744680,
CRYPTO_CRYPTO_ECC_A_01=1073744684,
CRYPTO_CRYPTO_ECC_A_02=1073744688,
CRYPTO_CRYPTO_ECC_A_03=1073744692,
CRYPTO_CRYPTO_ECC_A_04=1073744696,
CRYPTO_CRYPTO_ECC_A_05=1073744700,
CRYPTO_CRYPTO_ECC_A_06=1073744704,
CRYPTO_CRYPTO_ECC_A_07=1073744708,
CRYPTO_CRYPTO_ECC_A_08=1073744712,
CRYPTO_CRYPTO_ECC_A_09=1073744716,
CRYPTO_CRYPTO_ECC_A_10=1073744720,
CRYPTO_CRYPTO_ECC_A_11=1073744724,
CRYPTO_CRYPTO_ECC_A_12=1073744728,
CRYPTO_CRYPTO_ECC_A_13=1073744732,
CRYPTO_CRYPTO_ECC_A_14=1073744736,
CRYPTO_CRYPTO_ECC_A_15=1073744740,
CRYPTO_CRYPTO_ECC_A_16=1073744744,
CRYPTO_CRYPTO_ECC_A_17=1073744748,
CRYPTO_CRYPTO_ECC_B_00=1073744752,
CRYPTO_CRYPTO_ECC_B_01=1073744756,
CRYPTO_CRYPTO_ECC_B_02=1073744760,
CRYPTO_CRYPTO_ECC_B_03=1073744764,
CRYPTO_CRYPTO_ECC_B_04=1073744768,
CRYPTO_CRYPTO_ECC_B_05=1073744772,
CRYPTO_CRYPTO_ECC_B_06=1073744776,
CRYPTO_CRYPTO_ECC_B_07=1073744780,
CRYPTO_CRYPTO_ECC_B_08=1073744784,
CRYPTO_CRYPTO_ECC_B_09=1073744788,
CRYPTO_CRYPTO_ECC_B_10=1073744792,
CRYPTO_CRYPTO_ECC_B_11=1073744796,
CRYPTO_CRYPTO_ECC_B_12=1073744800,
CRYPTO_CRYPTO_ECC_B_13=1073744804,
CRYPTO_CRYPTO_ECC_B_14=1073744808,
CRYPTO_CRYPTO_ECC_B_15=1073744812,
CRYPTO_CRYPTO_ECC_B_16=1073744816,
CRYPTO_CRYPTO_ECC_B_17=1073744820,
CRYPTO_CRYPTO_ECC_N_00=1073744824,
CRYPTO_CRYPTO_ECC_N_01=1073744828,
CRYPTO_CRYPTO_ECC_N_02=1073744832,
CRYPTO_CRYPTO_ECC_N_03=1073744836,
CRYPTO_CRYPTO_ECC_N_04=1073744840,
CRYPTO_CRYPTO_ECC_N_05=1073744844,
CRYPTO_CRYPTO_ECC_N_06=1073744848,
CRYPTO_CRYPTO_ECC_N_07=1073744852,
CRYPTO_CRYPTO_ECC_N_08=1073744856,
CRYPTO_CRYPTO_ECC_N_09=1073744860,
CRYPTO_CRYPTO_ECC_N_10=1073744864,
CRYPTO_CRYPTO_ECC_N_11=1073744868,
CRYPTO_CRYPTO_ECC_N_12=1073744872,
CRYPTO_CRYPTO_ECC_N_13=1073744876,
CRYPTO_CRYPTO_ECC_N_14=1073744880,
CRYPTO_CRYPTO_ECC_N_15=1073744884,
CRYPTO_CRYPTO_ECC_N_16=1073744888,
CRYPTO_CRYPTO_ECC_N_17=1073744892,
CRYPTO_CRYPTO_ECC_K_00=1073744896,
CRYPTO_CRYPTO_ECC_K_01=1073744900,
CRYPTO_CRYPTO_ECC_K_02=1073744904,
CRYPTO_CRYPTO_ECC_K_03=1073744908,
CRYPTO_CRYPTO_ECC_K_04=1073744912,
CRYPTO_CRYPTO_ECC_K_05=1073744916,
CRYPTO_CRYPTO_ECC_K_06=1073744920,
CRYPTO_CRYPTO_ECC_K_07=1073744924,
CRYPTO_CRYPTO_ECC_K_08=1073744928,
CRYPTO_CRYPTO_ECC_K_09=1073744932,
CRYPTO_CRYPTO_ECC_K_10=1073744936,
CRYPTO_CRYPTO_ECC_K_11=1073744940,
CRYPTO_CRYPTO_ECC_K_12=1073744944,
CRYPTO_CRYPTO_ECC_K_13=1073744948,
CRYPTO_CRYPTO_ECC_K_14=1073744952,
CRYPTO_CRYPTO_ECC_K_15=1073744956,
CRYPTO_CRYPTO_ECC_K_16=1073744960,
CRYPTO_CRYPTO_ECC_K_17=1073744964,
CRYPTO_CRYPTO_ECC_SADDR=1073744968,
CRYPTO_CRYPTO_ECC_DADDR=1073744972,
CRYPTO_CRYPTO_ECC_STARTREG=1073744976,
CRYPTO_CRYPTO_ECC_WORDCNT=1073744980,
CRYPTO_CRYPTO_ECC_FSM_DBG=1073746416,
EADC_EADC_DAT0=1074016256,
EADC_EADC_DAT1=1074016260,
EADC_EADC_DAT2=1074016264,
EADC_EADC_DAT3=1074016268,
EADC_EADC_DAT4=1074016272,
EADC_EADC_DAT5=1074016276,
EADC_EADC_DAT6=1074016280,
EADC_EADC_DAT7=1074016284,
EADC_EADC_DAT8=1074016288,
EADC_EADC_DAT9=1074016292,
EADC_EADC_DAT10=1074016296,
EADC_EADC_DAT11=1074016300,
EADC_EADC_DAT12=1074016304,
EADC_EADC_DAT13=1074016308,
EADC_EADC_DAT14=1074016312,
EADC_EADC_DAT15=1074016316,
EADC_EADC_DAT16=1074016320,
EADC_EADC_DAT17=1074016324,
EADC_EADC_DAT18=1074016328,
EADC_EADC_CURDAT=1074016332,
EADC_EADC_CTL=1074016336,
EADC_EADC_SWTRG=1074016340,
EADC_EADC_PENDSTS=1074016344,
EADC_EADC_OVSTS=1074016348,
EADC_EADC_SELFTCTL=1074016380,
EADC_EADC_SCTL0=1074016384,
EADC_EADC_SCTL1=1074016388,
EADC_EADC_SCTL2=1074016392,
EADC_EADC_SCTL3=1074016396,
EADC_EADC_SCTL4=1074016400,
EADC_EADC_SCTL5=1074016404,
EADC_EADC_SCTL6=1074016408,
EADC_EADC_SCTL7=1074016412,
EADC_EADC_SCTL8=1074016416,
EADC_EADC_SCTL9=1074016420,
EADC_EADC_SCTL10=1074016424,
EADC_EADC_SCTL11=1074016428,
EADC_EADC_SCTL12=1074016432,
EADC_EADC_SCTL13=1074016436,
EADC_EADC_SCTL14=1074016440,
EADC_EADC_SCTL15=1074016444,
EADC_EADC_SCTL16=1074016448,
EADC_EADC_SCTL17=1074016452,
EADC_EADC_SCTL18=1074016456,
EADC_EADC_INTSRC0=1074016464,
EADC_EADC_INTSRC1=1074016468,
EADC_EADC_INTSRC2=1074016472,
EADC_EADC_INTSRC3=1074016476,
EADC_EADC_CMP0=1074016480,
EADC_EADC_CMP1=1074016484,
EADC_EADC_CMP2=1074016488,
EADC_EADC_CMP3=1074016492,
EADC_EADC_STATUS0=1074016496,
EADC_EADC_STATUS1=1074016500,
EADC_EADC_STATUS2=1074016504,
EADC_EADC_STATUS3=1074016508,
EADC_EADC_DDAT0=1074016512,
EADC_EADC_DDAT1=1074016516,
EADC_EADC_DDAT2=1074016520,
EADC_EADC_DDAT3=1074016524,
EADC_EADC_PWRM=1074016528,
EADC_EADC_CALCTL=1074016532,
EADC_EADC_CALDWRD=1074016536,
EADC_EADC_TEST=1074016768,
DAC_DAC0_CTL=1074032640,
DAC_DAC0_SWTRG=1074032644,
DAC_DAC0_DAT=1074032648,
DAC_DAC0_DATOUT=1074032652,
DAC_DAC0_STATUS=1074032656,
DAC_DAC0_TCTL=1074032660,
DAC_DAC0_CGCTL=1074032664,
DAC_DAC1_CTL=1074032704,
DAC_DAC1_SWTRG=1074032708,
DAC_DAC1_DAT=1074032712,
DAC_DAC1_DATOUT=1074032716,
DAC_DAC1_STATUS=1074032720,
DAC_DAC1_TCTL=1074032724,
DAC_DAC1_CGCTL=1074032728,
DAC_DAC0_FPGA_DATAIN=1074036716,
DAC_DAC0_TEST=1074036720,
DAC_DAC1_FPGA_DATAIN=1074036724,
DAC_DAC1_TEST=1074036728,
ACMP01_ACMP_CTL0=1074024448,
ACMP01_ACMP_CTL1=1074024452,
ACMP01_ACMP_STATUS=1074024456,
ACMP01_ACMP_VREF=1074024460,
ACMP01_ACMP_TEST=1074028536,
}
g_M2351_regs=REG
function read_M2351_Registers(e,e,e,e)
local e={}
e["SYS_SYS_GPA_MFPL"],
e["SYS_SYS_GPA_MFPH"],
e["SYS_SYS_GPB_MFPL"],
e["SYS_SYS_GPB_MFPH"],
e["SYS_SYS_GPC_MFPL"],
e["SYS_SYS_GPC_MFPH"]=ice:ReadMem32(g_M2351_regs.SYS_SYS_GPA_MFPL,6)
e["SYS_SYS_GPD_MFPL"],
e["SYS_SYS_GPD_MFPH"],
e["SYS_SYS_GPE_MFPL"],
e["SYS_SYS_GPE_MFPH"],
e["SYS_SYS_GPF_MFPL"],
e["SYS_SYS_GPF_MFPH"]=ice:ReadMem32(g_M2351_regs.SYS_SYS_GPD_MFPL,6)
e["SYS_SYS_GPG_MFPL"],
e["SYS_SYS_GPG_MFPH"],
e["SYS_SYS_GPH_MFPL"],
e["SYS_SYS_GPH_MFPH"]=ice:ReadMem32(g_M2351_regs.SYS_SYS_GPG_MFPL,4)
e["SYS_SYS_USBPHY"],
e["SYS_SYS_TCTL48M"],
e["SYS_SYS_TCTL12M"]=ice:ReadMemMulti(g_M2351_regs.SYS_SYS_USBPHY,
g_M2351_regs.SYS_SYS_TCTL48M,
g_M2351_regs.SYS_SYS_TCTL12M)
e["CLK_CLK_PWRCTL"],
e["CLK_CLK_AHBCLK"],
e["CLK_CLK_APBCLK0"],
e["CLK_CLK_APBCLK1"],
e["CLK_CLK_CLKSEL0"],
e["CLK_CLK_CLKSEL1"],
e["CLK_CLK_CLKSEL2"],
e["CLK_CLK_CLKSEL3"],
e["CLK_CLK_CLKDIV0"],
e["CLK_CLK_CLKDIV1"]=ice:ReadMem32(g_M2351_regs.CLK_CLK_PWRCTL,10)
e["CLK_CLK_CLKDIV4"],
e["CLK_CLK_PCLKDIV"]=ice:ReadMemMulti(g_M2351_regs.CLK_CLK_CLKDIV4,
g_M2351_regs.CLK_CLK_PCLKDIV)
e["CLK_CLK_PLLCTL"],
e["CLK_CLK_STATUS"],
e["CLK_CLK_CLKOCTL"]=ice:ReadMemMulti(g_M2351_regs.CLK_CLK_PLLCTL,
g_M2351_regs.CLK_CLK_STATUS,
g_M2351_regs.CLK_CLK_CLKOCTL)
e["GPIO_PA_MODE"],
e["GPIO_PA_DINOFF"],
e["GPIO_PA_DOUT"],
e["GPIO_PA_DATMSK"],
e["GPIO_PA_PIN"]=ice:ReadMem32(g_M2351_regs.GPIO_PA_MODE,5)
e["GPIO_PB_MODE"],
e["GPIO_PB_DINOFF"],
e["GPIO_PB_DOUT"],
e["GPIO_PB_DATMSK"],
e["GPIO_PB_PIN"]=ice:ReadMem32(g_M2351_regs.GPIO_PB_MODE,5)
e["GPIO_PC_MODE"],
e["GPIO_PC_DINOFF"],
e["GPIO_PC_DOUT"],
e["GPIO_PC_DATMSK"],
e["GPIO_PC_PIN"]=ice:ReadMem32(g_M2351_regs.GPIO_PC_MODE,5)
e["GPIO_PD_MODE"],
e["GPIO_PD_DINOFF"],
e["GPIO_PD_DOUT"],
e["GPIO_PD_DATMSK"],
e["GPIO_PD_PIN"]=ice:ReadMem32(g_M2351_regs.GPIO_PD_MODE,5)
e["GPIO_PE_MODE"],
e["GPIO_PE_DINOFF"],
e["GPIO_PE_DOUT"],
e["GPIO_PE_DATMSK"],
e["GPIO_PE_PIN"]=ice:ReadMem32(g_M2351_regs.GPIO_PE_MODE,5)
e["GPIO_PF_MODE"],
e["GPIO_PF_DINOFF"],
e["GPIO_PF_DOUT"],
e["GPIO_PF_DATMSK"],
e["GPIO_PF_PIN"]=ice:ReadMem32(g_M2351_regs.GPIO_PF_MODE,5)
e["GPIO_PG_MODE"],
e["GPIO_PG_DINOFF"],
e["GPIO_PG_DOUT"],
e["GPIO_PG_DATMSK"],
e["GPIO_PG_PIN"]=ice:ReadMem32(g_M2351_regs.GPIO_PG_MODE,5)
e["GPIO_PH_MODE"],
e["GPIO_PH_DINOFF"],
e["GPIO_PH_DOUT"],
e["GPIO_PH_DATMSK"],
e["GPIO_PH_PIN"]=ice:ReadMem32(g_M2351_regs.GPIO_PH_MODE,5)
e["GPIO_PA_SLEWCTL"],
e["GPIO_PB_SLEWCTL"],
e["GPIO_PC_SLEWCTL"],
e["GPIO_PD_SLEWCTL"]=ice:ReadMemMulti(g_M2351_regs.GPIO_PA_SLEWCTL,
g_M2351_regs.GPIO_PB_SLEWCTL,
g_M2351_regs.GPIO_PC_SLEWCTL,
g_M2351_regs.GPIO_PD_SLEWCTL)
e["GPIO_PE_SLEWCTL"],
e["GPIO_PF_SLEWCTL"],
e["GPIO_PG_SLEWCTL"],
e["GPIO_PH_SLEWCTL"]=ice:ReadMemMulti(g_M2351_regs.GPIO_PE_SLEWCTL,
g_M2351_regs.GPIO_PF_SLEWCTL,
g_M2351_regs.GPIO_PG_SLEWCTL,
g_M2351_regs.GPIO_PH_SLEWCTL)
e["CAN_CAN_BTIME"],
e["CAN_CAN_BRPE"]=ice:ReadMemMulti(g_M2351_regs.CAN_CAN_BTIME,
g_M2351_regs.CAN_CAN_BRPE)
e["UART0_UART_BAUD"],
e["UART1_UART_BAUD"],
e["UART2_UART_BAUD"],
e["UART3_UART_BAUD"]=ice:ReadMemMulti(g_M2351_regs.UART0_UART_BAUD,
g_M2351_regs.UART1_UART_BAUD,
g_M2351_regs.UART2_UART_BAUD,
g_M2351_regs.UART3_UART_BAUD)
e["UART4_UART_BAUD"],
e["UART5_UART_BAUD"]=ice:ReadMemMulti(g_M2351_regs.UART4_UART_BAUD,
g_M2351_regs.UART5_UART_BAUD)
e["QSPI0_SPIx_CTL"],
e["SPI0_SPIx_CTL"],
e["SPI1_SPIx_CTL"]=ice:ReadMemMulti(g_M2351_regs.QSPI0_SPIx_CTL,
g_M2351_regs.SPI0_SPIx_CTL,
g_M2351_regs.SPI1_SPIx_CTL)
e["SPI2_SPIx_CTL"],
e["SPI3_SPIx_CTL"],
e["SPI4_SPIx_CTL"]=ice:ReadMemMulti(g_M2351_regs.SPI2_SPIx_CTL,
g_M2351_regs.SPI3_SPIx_CTL,
g_M2351_regs.SPI4_SPIx_CTL)
e["QSPI0_SPIx_CLKDIV"],
e["SPI0_SPIx_CLKDIV"],
e["SPI1_SPIx_CLKDIV"]=ice:ReadMemMulti(g_M2351_regs.QSPI0_SPIx_CLKDIV,
g_M2351_regs.SPI0_SPIx_CLKDIV,
g_M2351_regs.SPI1_SPIx_CLKDIV)
e["SPI2_SPIx_CLKDIV"],
e["SPI3_SPIx_CLKDIV"],
e["SPI4_SPIx_CLKDIV"]=ice:ReadMemMulti(g_M2351_regs.SPI2_SPIx_CLKDIV,
g_M2351_regs.SPI3_SPIx_CLKDIV,
g_M2351_regs.SPI4_SPIx_CLKDIV)
e["QSPI0_SPIx_I2SCTL"],
e["SPI0_SPIx_I2SCTL"],
e["QSPI0_SPIx_I2SCLK"],
e["SPI0_SPIx_I2SCLK"]=ice:ReadMemMulti(g_M2351_regs.QSPI0_SPIx_I2SCTL,
g_M2351_regs.SPI0_SPIx_I2SCTL,
g_M2351_regs.QSPI0_SPIx_I2SCLK,
g_M2351_regs.SPI0_SPIx_I2SCLK)
e["SPI1_SPIx_I2SCTL"],
e["SPI2_SPIx_I2SCTL"],
e["SPI1_SPIx_I2SCLK"],
e["SPI2_SPIx_I2SCLK"]=ice:ReadMemMulti(g_M2351_regs.SPI1_SPIx_I2SCTL,
g_M2351_regs.SPI2_SPIx_I2SCTL,
g_M2351_regs.SPI1_SPIx_I2SCLK,
g_M2351_regs.SPI2_SPIx_I2SCLK)
e["SPI3_SPIx_I2SCTL"],
e["SPI4_SPIx_I2SCTL"],
e["SPI3_SPIx_I2SCLK"],
e["SPI4_SPIx_I2SCLK"]=ice:ReadMemMulti(g_M2351_regs.SPI3_SPIx_I2SCTL,
g_M2351_regs.SPI4_SPIx_I2SCTL,
g_M2351_regs.SPI3_SPIx_I2SCLK,
g_M2351_regs.SPI4_SPIx_I2SCLK)
e["I2C0_I2C_CTL0"],
e["I2C0_I2C_CLKDIV"],
e["I2C1_I2C_CTL0"],
e["I2C1_I2C_CLKDIV"]=ice:ReadMemMulti(g_M2351_regs.I2C0_I2C_CTL0,
g_M2351_regs.I2C0_I2C_CLKDIV,
g_M2351_regs.I2C1_I2C_CTL0,
g_M2351_regs.I2C1_I2C_CLKDIV)
e["I2C2_I2C_CTL0"],
e["I2C2_I2C_CLKDIV"]=ice:ReadMemMulti(g_M2351_regs.I2C2_I2C_CTL0,
g_M2351_regs.I2C2_I2C_CLKDIV)
e["TMR01_TIMER0_CTL"],
e["TMR01_TIMER1_CTL"],
e["TMR23_TIMER2_CTL"],
e["TMR23_TIMER3_CTL"]=ice:ReadMemMulti(g_M2351_regs.TMR01_TIMER0_CTL,
g_M2351_regs.TMR01_TIMER1_CTL,
g_M2351_regs.TMR23_TIMER2_CTL,
g_M2351_regs.TMR23_TIMER3_CTL)
e["EBI_EBI_CTL0"],
e["EBI_EBI_CTL1"],
e["EBI_EBI_CTL2"]=ice:ReadMemMulti(g_M2351_regs.EBI_EBI_CTL0,
g_M2351_regs.EBI_EBI_CTL1,
g_M2351_regs.EBI_EBI_CTL2)
e["EPWM0_EPWM_CLKSRC"],
e["EPWM1_EPWM_CLKSRC"]=ice:ReadMemMulti(g_M2351_regs.EPWM0_EPWM_CLKSRC,
g_M2351_regs.EPWM1_EPWM_CLKSRC)
e["EPWM0_EPWM_CLKPSC0_1"],
e["EPWM0_EPWM_CLKPSC2_3"],
e["EPWM0_EPWM_CLKPSC4_5"]=ice:ReadMem32(g_M2351_regs.EPWM0_EPWM_CLKPSC0_1,3)
e["EPWM1_EPWM_CLKPSC0_1"],
e["EPWM1_EPWM_CLKPSC2_3"],
e["EPWM1_EPWM_CLKPSC4_5"]=ice:ReadMem32(g_M2351_regs.EPWM1_EPWM_CLKPSC0_1,3)
e["EPWM0_EPWM_CNTEN"],
e["EPWM1_EPWM_CNTEN"]=ice:ReadMemMulti(g_M2351_regs.EPWM0_EPWM_CNTEN,
g_M2351_regs.EPWM1_EPWM_CNTEN)
e["BPWM0_BPWM_CLKSRC"],
e["BPWM0_BPWM_CLKPSC"],
e["BPWM1_BPWM_CLKSRC"],
e["BPWM1_BPWM_CLKPSC"]=ice:ReadMemMulti(g_M2351_regs.BPWM0_BPWM_CLKSRC,
g_M2351_regs.BPWM0_BPWM_CLKPSC,
g_M2351_regs.BPWM1_BPWM_CLKSRC,
g_M2351_regs.BPWM1_BPWM_CLKPSC)
e["BPWM0_BPWM_CNTEN"],
e["BPWM1_BPWM_CNTEN"]=ice:ReadMemMulti(g_M2351_regs.BPWM0_BPWM_CNTEN,
g_M2351_regs.BPWM1_BPWM_CNTEN)
e["USCI0_USCI_CTL"],
e["USCI1_USCI_CTL"]=ice:ReadMemMulti(g_M2351_regs.USCI0_USCI_CTL,
g_M2351_regs.USCI1_USCI_CTL)
e["USCI0_USCI_BRGEN"],
e["USCI1_USCI_BRGEN"],
e["USCI0_USCI_PROTCTL"],
e["USCI1_USCI_PROTCTL"]=ice:ReadMemMulti(g_M2351_regs.USCI0_USCI_BRGEN,
g_M2351_regs.USCI1_USCI_BRGEN,
g_M2351_regs.USCI0_USCI_PROTCTL,
g_M2351_regs.USCI1_USCI_PROTCTL)
e["SC0_SC_UARTCTL"],
e["SC0_SC_ETUCTL"],
e["SC0_SC_CTL"]=ice:ReadMemMulti(g_M2351_regs.SC0_SC_UARTCTL,
g_M2351_regs.SC0_SC_ETUCTL,
g_M2351_regs.SC0_SC_CTL)
e["SC1_SC_UARTCTL"],
e["SC1_SC_ETUCTL"],
e["SC1_SC_CTL"]=ice:ReadMemMulti(g_M2351_regs.SC1_SC_UARTCTL,
g_M2351_regs.SC1_SC_ETUCTL,
g_M2351_regs.SC1_SC_CTL)
e["SC2_SC_UARTCTL"],
e["SC2_SC_ETUCTL"],
e["SC2_SC_CTL"]=ice:ReadMemMulti(g_M2351_regs.SC2_SC_UARTCTL,
g_M2351_regs.SC2_SC_ETUCTL,
g_M2351_regs.SC2_SC_CTL)
e["QEI0_QEI_CTL"],
e["QEI1_QEI_CTL"]=ice:ReadMemMulti(g_M2351_regs.QEI0_QEI_CTL,
g_M2351_regs.QEI1_QEI_CTL)
e["ECAP0_ECAP_CTL0"],
e["ECAP1_ECAP_CTL0"],
e["I2S_I2S_CTL0"],
e["I2S_I2S_CLKDIV"]=ice:ReadMemMulti(g_M2351_regs.ECAP0_ECAP_CTL0,
g_M2351_regs.ECAP1_ECAP_CTL0,
g_M2351_regs.I2S_I2S_CTL0,
g_M2351_regs.I2S_I2S_CLKDIV)
g_M2351_regs.SCS_DEMCR=SCS_DEMCR
g_M2351_regs.TPIU_SPPR=TPIU_SPPR
g_M2351_regs.TPIU_CSPSR=TPIU_CSPSR
e["SCS_DEMCR"],
e["TPIU_SPPR"],
e["TPIU_CSPSR"]=ice:ReadMemMulti(g_M2351_regs.SCS_DEMCR,
g_M2351_regs.TPIU_SPPR,
g_M2351_regs.TPIU_CSPSR)
return e
end
local n={
[0]=kPinDirection_In,
[1]=kPinDirection_PushPullOut,
[2]=kPinDirection_OpenDrainOut,
[3]=kPinDirection_Bi,
}
local c={
[0]="INPUT",
[1]="OUTPUT",
[2]="Open-Drain",
[3]="Quasi-bidirectional",
}
function get_mfp_regs(a,o,t)
local e
if t>=0 and t<=7 then
e="L"
else
e="H"
end
local e={"SYS_SYS_GP"..o.."_MFP"..e}
return reg2str("Multi-Function register",g_M2351_regs,a,e)
end
function get_clk_informnation(e,t)
return reg2str("Clock setting registers",g_M2351_regs,e,t)
end
function get_LIRC_clock(o,a)
local e
local t
table.insert(a,"CLK_CLK_PWRCTL")
local a=ext.band(o["CLK_CLK_PWRCTL"],8)
if a==0 then
e=0
t="invalid internal <b>10kHz</b> low speed oscillator clock (see CLK_PWRCTL[3].LIRCEN)"
else
e=10000
t="internal <b>10kHz</b> low speed oscillator clock"
end
return e,t
end
function get_HIRC_clock(o,a)
local t
local e
table.insert(a,"CLK_CLK_PWRCTL")
local i=ext.band(o["CLK_CLK_PWRCTL"],4)
if i==0 then
t=0
e="invalid internal <b>12MHz</b> high speed oscillator clock (see CLK_PWRCTL[2].HIRCEN)"
else
table.insert(a,"SYS_SYS_TCTL12M")
local a=ext.band(o["SYS_SYS_TCTL12M"],3)
if a==0 then
t=12000000
e="internal <b>12MHz</b> high speed oscillator clock"
elseif a==1 then
t=12000000
e="internal <b>12MHz</b> high speed oscillator clock (auto trim)"
else
t=0
e="invalid HIRC trim frequency selection (see SYS_TCTL12M[1:0].FREQSEL)"
end
end
return t,e
end
function get_LXT_clock(o,a)
local e
local t
table.insert(a,"CLK_CLK_PWRCTL")
local a=ext.band(o["CLK_CLK_PWRCTL"],2)
if a==0 then
e=0
t="invalid external <b>32.768kHz</b> low speed crystal clock (see CLK_PWRCTL[1].LXTEN)"
else
e=32768
t="external <b>32.768kHz</b> low speed crystal clock"
end
return e,t
end
function get_HXT_clock(a,o)
local e
local t
table.insert(o,"CLK_CLK_PWRCTL")
local a=ext.band(a["CLK_CLK_PWRCTL"],1)
if a==0 then
e=0
t="invalid external <b>4~24M</b> high speed crystal clock (see CLK_PWRCTL[0].HXTEN)"
else
e=12000000
t="external <b>4~24M</b> high speed crystal clock, <font color=blue>when</font> external input clock is <font color=blue>12M</font>"
end
return e,t
end
function get_HIRC48_clock(a,o)
local t
local e
table.insert(o,"CLK_CLK_PWRCTL")
local i=ext.band(a["CLK_CLK_PWRCTL"],262144)
if i==0 then
t=0
e="invalid internal <b>48MHz</b> high speed oscillator clock (see CLK_PWRCTL[18].HIRC48EN)"
else
table.insert(o,"SYS_SYS_TCTL48M")
local a=ext.band(a["SYS_SYS_TCTL48M"],3)
if a==0 then
t=48000000
e="internal <b>48MHz</b> high speed oscillator clock"
elseif a==1 then
t=48000000
e="internal <b>48MHz</b> high speed oscillator clock (auto trim)"
else
t=0
e="invalid HIRC trim frequency selection (see SYS_TCTL48M[1:0].FREQSEL)"
end
end
return t,e
end
function get_PLL_clock(a,o)
local t
local e
table.insert(o,"CLK_CLK_PLLCTL")
if ext.band(ext.rshift(a["CLK_CLK_PLLCTL"],16),1)~=0 then
t=0
e="invalid <b>PLL</b> clock, PLL is in Power-down mode (see CLK_PLLCTL[16].PD)"
else
local i=ext.band(ext.rshift(a["CLK_CLK_PLLCTL"],19),1)
if i~=0 then
t,e=get_HIRC_clock(a,o)
else
t,e=get_HXT_clock(a,o)
end
if t~=0 then
local o=ext.band(ext.rshift(a["CLK_CLK_PLLCTL"],17),1)
if o~=0 then
e=string.format("<b>PLL</b> clock (<b>%sHz</b>), bypassed from %s",val2str(t),e)
else
local i=ext.band(a["CLK_CLK_PLLCTL"],511)+2
local n=ext.band(ext.rshift(a["CLK_CLK_PLLCTL"],9),31)+1
local o={1,2,2,4}
local a=o[ext.band(ext.rshift(a["CLK_CLK_PLLCTL"],14),3)+1]
t=t*(2*i)/n/a
e=string.format("<b>PLL</b> clock (<b>%sHz</b>), from %s",val2str(t),e)
end
else
e="<b>PLL</b> clock from "..e
end
end
return t,e
end
function get_sys_clock(a,o,n)
local e
local t
table.insert(o,"CLK_CLK_CLKSEL0")
local i=ext.band(a["CLK_CLK_CLKSEL0"],7)
if i==0 then
e,t=get_HXT_clock(a,o)
elseif i==1 then
e,t=get_LXT_clock(a,o)
elseif i==2 then
e,t=get_PLL_clock(a,o)
elseif i==3 then
e,t=get_LIRC_clock(a,o)
elseif i==5 then
e,t=get_HIRC48_clock(a,o)
elseif i==7 then
e,t=get_HIRC_clock(a,o)
else
e=0
t="invalid <b>"..n.."</b> clock (see CLK_CLKSEL0[2:0].HCLKSEL)"
return e,t
end
if e==0 then
t="<b>"..n.."</b> clock from "..t
else
table.insert(o,"CLK_CLK_CLKDIV0")
local a=ext.band(a["CLK_CLK_CLKDIV0"],15)
e=e/(a+1)
t=string.format("<b>%s</b> clock (<b>%sHz</b>), from %s",n,val2str(e),t)
end
return e,t
end
function get_HCLK_clock(e,t)
return get_sys_clock(e,t,"HCLK")
end
function get_PCLK_clock(o,i,e)
local a
local t
a,t=get_HCLK_clock(o,i)
if a==0 then
t=string.format("<b>PCLK%d</b> clock from ",e)..t
else
table.insert(i,"CLK_CLK_PCLKDIV")
local o=ext.band(ext.rshift(o["CLK_CLK_PCLKDIV"],e*4),7)
if o<=5 then
a=ext.rshift(a,o)
t=string.format("<b>PCLK%d</b> clock (<b>%sHz</b>), from %s",
e,val2str(a),t)
else
a=0
t=string.format("</b> invalid PCLK%d clock (see CLK_PCLKDIV[%d:%d].APB%dDIV)",
e,e*4+2,e*4,e)
end
end
return a,t
end
function fill_M2351_GPIO(o,s,a,t,l)
if l==nil then l=string.format("P%s.%d",a,t)end
local e=s["GPIO_P"..a.."_MODE"]
local u=s["GPIO_P"..a.."_DINOFF"]
local r=s["GPIO_P"..a.."_DOUT"]
local h=s["GPIO_P"..a.."_DATMSK"]
local d=s["GPIO_P"..a.."_PIN"]
local m=s["GPIO_P"..a.."_SLEWCTL"]
o["highlight_text"]=l
o["normal_color"]=kColor_Invalid
o["highlight_color"]=kColor_GPIO
o["pin_bg_color"]=kBgColor_GPIO
local i=ext.band(ext.rshift(e,t*2),3)
o["direction"]=n[i]
if n[i]==kPinDirection_In
or n[i]==kPinDirection_Bi then
if ext.band(d,ext.lshift(1,t))==0 then
o["status"]=kPinStatus_Low
else
o["status"]=kPinStatus_High
end
else
if ext.band(h,ext.lshift(1,t))~=0 then
o["status"]=kPinStatus_Unknown
elseif ext.band(r,ext.lshift(1,t))==0 then
o["status"]=kPinStatus_Low
else
o["status"]=kPinStatus_High
end
end
local e=string.format("P%s.%d is in <b>%s</b> mode<br>",
a,t,c[i])
if n[i]==kPinDirection_In
or n[i]==kPinDirection_Bi then
if ext.band(d,ext.lshift(1,t))==0 then
e=e.."Pin input <b>low</b><br>"
else
e=e.."Pin input <b>high</b><br>"
end
end
if n[i]==kPinDirection_PushPullOut
or n[i]==kPinDirection_OpenDrainOut
or n[i]==kPinDirection_Bi then
if ext.band(h,ext.lshift(1,t))~=0 then
e=e.."Pin output <b>masked</b><br>"
elseif ext.band(r,ext.lshift(1,t))==0 then
e=e.."Pin output <b>low</b><br>"
else
e=e.."Pin output <b>high</b><br>"
end
end
if ext.band(u,ext.lshift(1,t+16))==0 then
e=e.."IO digital input path <b>enabled</b><br>"
else
e=e.."IO digital input path <b>disabled</b>(digital input tied to low)<br>"
end
local h=ext.band(ext.rshift(m,t*2),3)
if h==0 then
e=e.."IO output with <b>normal</b> slew rate<br>"
elseif h==1 then
e=e.."IO output with <b>high</b> slew rate<br>"
elseif h==2 then
e=e.."IO output with <b>fast</b> slew rate<br>"
else
e=e..string.format("IO output with <b>unknown</b> slew rate (see %s.HSREN%d)<br>","GPIO_P"..a.."_SLEWCTL",t)
end
local h=""
if n[i]==kPinDirection_PushPullOut
or n[i]==kPinDirection_Bi then
if ext.band(r,ext.lshift(1,t))==0 and ext.band(d,ext.lshift(1,t))~=0 then
h=string.format("Leakage warning: GPIO%s_DOUT[%d] = 0, GPIO%s_PIN[%d] = 1<br>",a,t,a,t)
elseif ext.band(r,ext.lshift(1,t))~=0 and ext.band(d,ext.lshift(1,t))==0 then
h=string.format("Leakage warning: GPIO%s_DOUT[%d] = 1, GPIO%s_PIN[%d] = 0<br>",a,t,a,t)
end
end
if h~=""then
o["pin_no_color"]=kBgColor_Error
h="<font color=red>"..h.."</font>"
end
local i={
"GPIO_P"..a.."_MODE",
"GPIO_P"..a.."_DINOFF",
"GPIO_P"..a.."_DOUT",
"GPIO_P"..a.."_DATMSK",
"GPIO_P"..a.."_PIN",
"GPIO_P"..a.."_SLEWCTL"}
local i=reg2str("GPIO setting registers",g_M2351_regs,s,i)
o["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s"..
"<b>Information</b><br>"..
"%s",
l,
h,
get_mfp_regs(s,a,t),
i,
e)
end
function fill_invalid_GPIO(e,o,t,a)
e["highlight_text"]=string.format("P%s.%d",t,a)
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_Invalid
e["pin_bg_color"]=kBgColor_Invalid
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
e["pin_no_color"]=kBgColor_Error
local i="<font color=red>Undefined setting in Multi-Function registers for this pin.</font><br>"
e["information"]=string.format(
"<b>P%s.%d</b><br>%s<br>"..
"%s",
t,a,
i,
get_mfp_regs(o,t,a))
end
function fill_M2351_EADC(e,o,d,r,s)
local a=""
local t=""
local i={}
e["highlight_text"]=s
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_ADC
e["pin_bg_color"]=kBgColor_ADC
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
table.insert(i,"CLK_CLK_APBCLK0")
local h=ext.band(ext.rshift(o["CLK_CLK_APBCLK0"],28),1)
if h~=0 then
local n
local e
n,e=get_PCLK_clock(o,i,1)
local o=ext.band(ext.rshift(o["CLK_CLK_CLKDIV0"],16),255)
local o=n/(o+1)
if o~=0 then
table.insert(i,"CLK_CLK_CLKDIV0")
a=string.format("EADC clock frequency: <b>%sHz</b>, from %s.<br>",val2str(o),e)
else
t="EADC clock is not available, "..e..".<br>"
end
else
t="EADC clock is not available (see CLK_APBCLK0[28].EADCCKEN).<br>"
end
if t~=""then
t="<font color=red>"..t.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if a~=""then
a="<b>Information</b><br>"..a
end
e["information"]=string.format(
"<b>%s</b><br>%s<br>%s%s%s",
s,
t,
get_mfp_regs(o,d,r),
get_clk_informnation(o,i),
a)
return a,t,i,h
end
function fill_M2351_USB(t,a,n,i,o)
local e=""
local e=""
local e={}
t["highlight_text"]=o
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_USB
t["pin_bg_color"]=kBgColor_USB
t["direction"]=kPinDirection_Unknown
t["status"]=kPinStatus_Unknown
table.insert(e,"SYS_SYS_USBPHY")
table.insert(e,"CLK_CLK_AHBCLK")
table.insert(e,"CLK_CLK_APBCLK0")
table.insert(e,"CLK_CLK_CLKSEL0")
table.insert(e,"CLK_CLK_CLKDIV0")
table.insert(e,"CLK_CLK_PLLCTL")
if n==nil or i==nil then
t["information"]=string.format(
"<b>%s</b><br><br>"..
"%s",
o,
get_clk_informnation(a,e))
else
t["information"]=string.format(
"<b>%s</b><br><br>"..
"%s%s",
o,
get_mfp_regs(a,n,i),
get_clk_informnation(a,e))
end
end
function fill_M2351_CAN(t,e,d,r,h,a)
local n=""
local o=""
local i={}
t["highlight_text"]=h
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_CAN
t["pin_bg_color"]=kBgColor_CAN
t["status"]=kPinStatus_Unknown
function get_can_bitrate(n,a)
local t=string.format("CAN_CAN_BTIME",a)
local a=string.format("CAN_CAN_BRPE",a)
table.insert(i,t)
table.insert(i,a)
local o=ext.band(ext.rshift(e[t],8),15)
local i=ext.band(ext.rshift(e[t],12),7)
local e=
ext.bor(ext.band(e[t],63),
ext.lshift(ext.band(e[a],15),6))
local e=n/(e+1)/(o+i+3)
return e
end
table.insert(i,"CLK_CLK_APBCLK0")
local s=ext.band(ext.rshift(e["CLK_CLK_APBCLK0"],a+24),1)
if s~=0 then
local s
local t
s,t=get_PCLK_clock(e,i,a)
if s~=0 then
local e=get_can_bitrate(s,a)
n=string.format("CAN baudrate: <b>%s</b>, from %s.<br>",val2str(e),t)
else
o=string.format("CAN%d clock is not available, %s.<br>",a,t)
end
else
o=string.format("CAN%d clock is not available (see CLK_APBCLK0[%d].CAN%dCKEN).<br>",
a,a+24,a)
end
if o~=""then
o="<font color=red>"..o.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if n~=""then
n="<b>Information</b><br>"..n
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
h,
o,
get_mfp_regs(e,d,r),
get_clk_informnation(e,i),
n)
end
function fill_M2351_UART(i,e,c,u,l,t)
local n=""
local o=""
local a={}
local r=0
i["highlight_text"]=l
i["normal_color"]=kColor_Invalid
i["highlight_color"]=kColor_UART
i["pin_bg_color"]=kBgColor_UART
i["direction"]=kPinDirection_Unknown
i["status"]=kPinStatus_Unknown
function get_uart_baudate(o)
local h=string.format("UART%d",t)
local t=string.format("UART%d_UART_BAUD",t)
table.insert(a,t)
local n=ext.band(e[t],536870912)
local a=ext.band(e[t],268435456)
local s=ext.rshift(ext.band(e[t],251658240),24)
local t=ext.band(e[t],65535)
local e=0
local i=""
if n==0 and a==0 then
e=o/(16*(t+2))
elseif n~=0 and a==0 then
if s>=8 then
e=o/((s+1)*(t+2))
else
i="invalid "..h.."'s UART_BAUD value, EDIV_M1 must >= 8"
end
elseif n~=0 and a~=0 then
e=o/(t+2)
else
i="invalid "..h.."'s UART_BAUD value"
end
return e,i
end
table.insert(a,"CLK_CLK_APBCLK0")
local s=ext.band(ext.rshift(e["CLK_CLK_APBCLK0"],t+16),1)
if s~=0 then
local s,d
if t<2 then
table.insert(a,"CLK_CLK_CLKSEL1")
table.insert(a,"CLK_CLK_CLKDIV0")
s=ext.band(ext.rshift(e["CLK_CLK_CLKSEL1"],24+t*2),3)
d=ext.band(ext.rshift(e["CLK_CLK_CLKDIV0"],8+t*4),15)
else
table.insert(a,"CLK_CLK_CLKSEL3")
table.insert(a,"CLK_CLK_CLKDIV4")
s=ext.band(ext.rshift(e["CLK_CLK_CLKSEL3"],24+(t-2)*2),3)
d=ext.band(ext.rshift(e["CLK_CLK_CLKDIV4"],(t-2)*4),15)
end
local h
local i
if s==0 then
h,i=get_HXT_clock(e,a)
elseif s==1 then
h,i=get_PLL_clock(e,a)
elseif s==2 then
h,i=get_LXT_clock(e,a)
else
h,i=get_HIRC_clock(e,a)
end
r=h/(d+1)
if r~=0 then
n=string.format("UART%d clock frequency: <b>%sHz</b>, from %s.<br>",t,val2str(r),i)
else
o=string.format("UART%d clock is not available, %s.<br>",t,i)
end
else
o=string.format("UART%d clock is not available (see CLK_APBCLK0[%d].UART%dCKEN).<br>",
t,t+16,t)
end
if o==""then
local e,t=get_uart_baudate(r)
if e~=0 then
n=n..string.format("UART baudrate: <b>%d</b><br>",e)
else
o=t..".<br>"
end
end
if o~=""then
o="<font color=red>"..o.."</font>"
i["pin_no_color"]=kBgColor_Error
end
if n~=""then
n="<b>Information</b><br>"..n
end
i["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
l,
o,
get_mfp_regs(e,c,u),
get_clk_informnation(e,a),
n)
end
function fill_M2351_SPI(n,t,c,u,l,o)
local e=""
local h=""
local i={}
n["highlight_text"]=l
n["normal_color"]=kColor_Invalid
n["highlight_color"]=kColor_SPI
n["pin_bg_color"]=kBgColor_SPI
n["direction"]=kPinDirection_Unknown
n["status"]=kPinStatus_Unknown
local a=(o==0)and"QSPI0"or string.format("SPI%d",o-1)
local s=0
if o<4 then
table.insert(i,"CLK_CLK_APBCLK0")
s=ext.band(ext.rshift(t["CLK_CLK_APBCLK0"],o+12),1)
else
table.insert(i,"CLK_CLK_APBCLK1")
s=ext.band(ext.rshift(t["CLK_CLK_APBCLK1"],(o-4)+6),1)
end
if s~=0 then
local s
local r
table.insert(i,"CLK_CLK_CLKSEL2")
local d=0
if o<3 then
d=ext.band(ext.rshift(t["CLK_CLK_CLKSEL2"],2*o+2),3)
else
d=ext.band(ext.rshift(t["CLK_CLK_CLKSEL2"],2*(o-3)+10),3)
end
if d==0 then
s,r=get_HXT_clock(t,i)
elseif d==1 then
s,r=get_PLL_clock(t,i)
elseif d==2 then
s,r=get_PCLK_clock(t,i,ext.band(o,1))
else
s,r=get_HIRC_clock(t,i)
end
if s~=0 then
local d=0
if o~=0 then
local h=string.format("%s_SPIx_I2SCTL",a)
local o=string.format("%s_SPIx_I2SCLK",a)
table.insert(i,h)
d=ext.band(t[h],1)
if d~=0 then
e=string.format("I2S controller enabled.<br>")
local h=ext.band(ext.rshift(t[h],8),1)
if h==0 then
table.insert(i,o)
local i=ext.band(ext.rshift(t[o],8),1023)
local t=ext.band(t[o],127)
local i=s/(2*(i+1))
local o=s
if t~=0 then
o=s/(2*t)
end
e=e..string.format("%s_I2S is in <b>master</b> mode.<br>",a)
e=e..string.format("BCLK frequency: <b>%sHz</b><br>",val2str(i))
e=e..string.format("MCLK frequency: <b>%sHz</b><br>",val2str(o))
else
e=e..string.format("%s_I2S is in <b>slave</b> mode.<br>",a)
end
n["highlight_color"]=kColor_I2S
n["pin_bg_color"]=kBgColor_I2S
n["direction"]=kPinDirection_Unknown
end
end
if d==0 then
local n=string.format("%s_SPIx_CTL",a)
local o=string.format("%s_SPIx_CLKDIV",a)
table.insert(i,n)
local n=ext.band(ext.rshift(t[n],18),1)
if n~=0 then
e=string.format("%s is in <b>slave</b> mode.<br>",a)
else
e=string.format("%s is in <b>master</b> mode.<br>",a)
table.insert(i,o)
local t=ext.band(t[o],511)
local t=s/(t+1)
e=e..string.format("%s clock frequency: <b>%sHz</b>, from %s.<br>",
a,val2str(t),r)
end
end
else
h=string.format("%s clock is not available, %s.<br>",a,r)
end
else
if o<4 then
h=string.format("%s clock is not available (see CLK_APBCLK0[%d].%sCKEN).<br>",
a,o+12,a)
else
h=string.format("%s clock is not available (see CLK_APBCLK1[%d].%sCKEN).<br>",
a,(o-4)+6,a)
end
end
if h~=""then
h="<font color=red>"..h.."</font>"
n["pin_no_color"]=kBgColor_Error
end
if e~=""then
e="<b>Information</b><br>"..e
end
n["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
l,
h,
get_mfp_regs(t,c,u),
get_clk_informnation(t,i),
e)
end
function fill_M2351_SPI_IO(e,i,t,a)
local o=(t==0)and"QSPI0"or string.format("SPI%d",t-1)
if t~=0 then
local t=string.format("%s_SPIx_I2SCTL",o)
local t=ext.band(i[t],1)
if t~=0 then
if a then
e["direction"]=kPinDirection_In
else
e["direction"]=kPinDirection_PushPullOut
end
return
end
end
local t=string.format("%s_SPIx_CTL",o)
local t=ext.band(ext.rshift(i[t],18),1)
if t==0 then
if a then
e["direction"]=kPinDirection_In
else
e["direction"]=kPinDirection_PushPullOut
end
else
if a then
e["direction"]=kPinDirection_PushPullOut
else
e["direction"]=kPinDirection_In
end
end
end
function fill_M2351_I2C(a,i,r,d,h,e)
local o=""
local t=""
local n={}
a["highlight_text"]=h
a["normal_color"]=kColor_Invalid
a["highlight_color"]=kColor_I2C
a["pin_bg_color"]=kBgColor_I2C
a["direction"]=kPinDirection_Unknown
a["status"]=kPinStatus_Unknown
table.insert(n,"CLK_CLK_APBCLK0")
local s=ext.band(ext.rshift(i["CLK_CLK_APBCLK0"],8+e),1)
if s~=0 then
local a=string.format("I2C%d_I2C_CTL0",e)
local h=string.format("I2C%d_I2C_CLKDIV",e)
table.insert(n,a)
local a=ext.band(ext.rshift(i[a],6),1)
if a~=0 then
local s
local a
s,a=get_PCLK_clock(i,n,ext.band(e,1))
if s~=0 then
table.insert(n,h)
local i=ext.band(i[h],1023)
if i<4 then
t=string.format("Invalid I2C%d's I2C_CLKDIV value, I2C_CLKDIV must >= 4.<br>",e)
else
local t=s/(4*(i+1))
o=o..string.format("I2C%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(t),a)
end
else
t=string.format("I2C%d clock is not available, %s.<br>",e,a)
end
else
t=string.format("I2C%d controller disabled (see I2C%d_I2C_CTL0[6].I2CEN).<br>",e,e)
end
else
t=string.format("I2C%d clock is not available (see CLK_APBCLK0[%d].I2C%dCKEN).<br>",e,8+e,e)
end
if t~=""then
t="<font color=red>"..t.."</font>"
a["pin_no_color"]=kBgColor_Error
end
if o~=""then
o="<b>Information</b><br>"..o
end
a["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
h,
t,
get_mfp_regs(i,r,d),
get_clk_informnation(i,n),
o)
end
function fill_M2351_ACMP(e,o,h,r,n,t)
local t=""
local a=""
local i={}
e["highlight_text"]=n
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_CMP
e["pin_bg_color"]=kBgColor_CMP
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
table.insert(i,"CLK_CLK_APBCLK0")
local s=ext.band(ext.rshift(o["CLK_CLK_APBCLK0"],7),1)
if s==0 then
a="ACMP clock is not available (see CLK_APBCLK0[7].ACMP01CKEN).<br>"
a="<font color=red>"..a.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if t~=""then
t="<b>Information</b><br>"..t
end
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
n,
a,
get_mfp_regs(o,h,r),
get_clk_informnation(o,i),
t)
return t,a,i,s
end
function fill_M2351_CLKO(t,e,r,d,h)
local n=""
local o=""
local a={}
t["highlight_text"]=h
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_CLK
t["pin_bg_color"]=kBgColor_CLK
t["direction"]=kPinDirection_PushPullOut
t["status"]=kPinStatus_Unknown
table.insert(a,"CLK_CLK_APBCLK0")
local i=ext.band(ext.rshift(e["CLK_CLK_APBCLK0"],6),1)
if i~=0 then
table.insert(a,"CLK_CLK_CLKOCTL")
local t=ext.band(ext.rshift(e["CLK_CLK_CLKOCTL"],6),1)
if t==0 then
local t=ext.band(ext.rshift(e["CLK_CLK_CLKOCTL"],4),1)
if t~=0 then
local t
local i
table.insert(a,"CLK_CLK_CLKSEL1")
local s=ext.band(ext.rshift(e["CLK_CLK_CLKSEL1"],28),3)
if s==0 then
t,i=get_HXT_clock(e,a)
elseif s==1 then
t,i=get_LXT_clock(e,a)
elseif s==2 then
t,i=get_HCLK_clock(e,a)
else
t,i=get_HIRC_clock(e,a)
end
if t~=0 then
local a=t
local o=ext.band(ext.rshift(e["CLK_CLK_CLKOCTL"],5),1)
if o==0 then
local e=ext.band(e["CLK_CLK_CLKOCTL"],15)
a=t/ext.lshift(1,(e+1))
end
n=string.format("CLKO clock frequency: <b>%sHz</b>, from %s.<br>",val2str(a),i)
else
o="CLKO clock is not available, "..i..".<br>"
end
else
o="CLKO output function disabled (see CLK_CLKOCTL[4].CLKOEN).<br>"
end
else
n="1Hz clock from RTC"
end
else
o="CLKO clock is not available (see CLK_APBCLK0[6].CLKOCKEN).<br>"
end
if o~=""then
o="<font color=red>"..o.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if n~=""then
n="<b>Information</b><br>"..n
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
h,
o,
get_mfp_regs(e,r,d),
get_clk_informnation(e,a),
n)
end
function fill_M2351_TM(s,t,d,l,r,e)
local i=""
local n=""
local a={}
s["highlight_text"]=r
s["normal_color"]=kColor_Invalid
s["highlight_color"]=kColor_TM
s["pin_bg_color"]=kBgColor_TM
s["direction"]=kPinDirection_Unknown
s["status"]=kPinStatus_Unknown
table.insert(a,"CLK_CLK_APBCLK0")
local o=ext.band(ext.rshift(t["CLK_CLK_APBCLK0"],e+2),1)
if o~=0 then
local o=string.format("TMR%d%d_TIMER%d_CTL",ext.rshift(e,1)*2,ext.rshift(e,1)*2+1,e)
table.insert(a,o)
local o=ext.band(ext.rshift(t[o],24),1)
if o~=0 then
i=string.format("TMR%d external counting pin function enabled.<br>",e)
else
local o
local s
table.insert(a,"CLK_CLK_CLKSEL1")
local h=ext.band(ext.rshift(t["CLK_CLK_CLKSEL1"],8+e*4),7)
if h==0 then
o,s=get_HXT_clock(t,a)
elseif h==1 then
o,s=get_LXT_clock(t,a)
elseif h==2 then
if e==0 or e==1 then
o,s=get_PCLK_clock(t,a,0)
else
o,s=get_PCLK_clock(t,a,1)
end
elseif h==3 then
i=string.format("TMR%d clock source is from external clock TM%d pin.<br>",e,e)
elseif h==5 then
o,s=get_LIRC_clock(t,a)
elseif h==7 then
o,s=get_HIRC_clock(t,a)
else
n=string.format("TMR%d clock source is undefined (see CLK_CLKSEL1[%d:%d].TMR%dSEL).<br>",
e,8+e*4+2,8+e*4,e)
end
if n==""and i==""then
if o~=0 then
i=string.format("TMR%d clock frequency: <b>%sHz</b>, from %s.<br>",
e,val2str(o),s)
else
n=string.format("TMR%d clock is not available, %s.<br>",e,s)
end
end
end
else
n=string.format("TMR%d clock is not available (see CLK_APBCLK0[%d].TMR%dCKEN).<br>",e,e+2,e)
end
if n~=""then
n="<font color=red>"..n.."</font>"
s["pin_no_color"]=kBgColor_Error
end
if i~=""then
i="<b>Information</b><br>"..i
end
s["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
r,
n,
get_mfp_regs(t,d,l),
get_clk_informnation(t,a),
i)
end
function fill_M2351_DAC(e,o,h,r,n,t)
local a=""
local t=""
local i={}
e["highlight_text"]=n
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_DAC
e["pin_bg_color"]=kBgColor_DAC
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
table.insert(i,"CLK_CLK_APBCLK1")
local s=ext.band(ext.rshift(o["CLK_CLK_APBCLK1"],12),1)
if s~=0 then
local e
local t
e,t=get_PCLK_clock(o,i,1)
a=string.format("DAC clock frequency: <b>%sHz</b>, from %s.<br>",val2str(e),t)
else
t="DAC clock is not available (see CLK_APBCLK1[12].DACCKEN).<br>"
end
if t~=""then
t="<font color=red>"..t.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if a~=""then
a="<b>Information</b><br>"..a
end
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
n,
t,
get_mfp_regs(o,h,r),
get_clk_informnation(o,i),
a)
return a,t,i,s
end
function fill_M2351_EBI(a,t,r,d,h)
local e=""
local o=""
local i={}
a["highlight_text"]=h
a["normal_color"]=kColor_Invalid
a["highlight_color"]=kColor_EBI
a["pin_bg_color"]=kBgColor_EBI
a["direction"]=kPinDirection_PushPullOut
a["status"]=kPinStatus_Unknown
table.insert(i,"CLK_CLK_AHBCLK")
local n=ext.band(ext.rshift(t["CLK_CLK_AHBCLK"],3),1)
if n~=0 then
local n
local s
n,s=get_HCLK_clock(t,i)
if n~=0 then
for o=0,2 do
local a=string.format("EBI_EBI_CTL%d",o)
table.insert(i,a)
local i=ext.band(t[a],1)
if i~=0 then
local i=ext.band(ext.rshift(t[a],8),7)
local n=ext.rshift(n,i)
local i=ext.band(ext.rshift(t[a],1),1)
local t=ext.band(ext.rshift(t[a],3),1)
e=e..string.format("EBI Bank%d MCLK frequency: <b>%sHz</b>, from %s.<br>",
o,val2str(n),s)
e=e..string.format("EBI Bank%d: address/data bus %s mode, and data width <b>%d-bit</b><br>",
o,(t~=0)and"separating"or"multiplex",(i~=0)and 16 or 8)
else
e=e..string.format("EBI Bank%d <b>disabled</b><br>",o)
end
end
else
o=string.format("EBI clock is not available, %s.<br>",s)
end
else
o="EBI clock is not available (see CLK_AHBCLK[3].EBICKEN).<br>"
end
if o~=""then
o="<font color=red>"..o.."</font>"
a["pin_no_color"]=kBgColor_Error
end
if e~=""then
e="<b>Information</b><br>"..e
end
a["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
h,
o,
get_mfp_regs(t,r,d),
get_clk_informnation(t,i),
e)
end
function fill_M2351_BPWM(t,i,d,l,r,e,s)
local a=""
local o=""
local n={}
t["highlight_text"]=r
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_PWM
t["pin_bg_color"]=kBgColor_PWM
t["direction"]=kPinDirection_Unknown
t["status"]=kPinStatus_Unknown
if s~=nil then
table.insert(n,"CLK_CLK_APBCLK1")
local t=ext.band(ext.rshift(i["CLK_CLK_APBCLK1"],18+e),1)
if t~=0 then
local t
local h
table.insert(n,"CLK_CLK_CLKSEL2")
t,h=get_PCLK_clock(i,n,ext.band(e,1))
local s=string.format("BPWM%d_BPWM_CNTEN",e)
table.insert(n,s)
local s=ext.band(i[s],1)
if s==0 then
o=string.format("BPWM%d counter stops running.<br>",e)
else
local s=string.format("BPWM%d_BPWM_CLKSRC",e)
table.insert(n,s)
local s=ext.band(i[s],7)
if s==0 then
if t==0 then
o=string.format("BPWM%d clock is not available, %s.<br>",e,h)
else
local o=string.format("BPWM%d_BPWM_CLKPSC",e)
table.insert(n,o)
local o=ext.band(i[o],4095)
local o=t/(o+1)
a=string.format("BPWM%d clock frequency: <b>%sHz</b>, from %s.<br>",
e,val2str(t),h)
a=a..string.format("BPWM%d counter frequency: <b>%sHz</b> (Pre-Scaled)<br>",
e,val2str(o))
end
elseif s<=4 then
a=string.format("BPWM%d clock source is from TIMER%d.<br>",e,s-1)
else
o=string.format("BPWM%d clock source is undefined (see BPWM_CLKSRC[2:0].ECLKSRC0).<br>",e)
end
end
else
o=string.format("BPWM%d clock is not available (see CLK_APBCLK1[%d].BPWM%dCKEN).<br>",
e,18+e,e)
end
end
if o~=""then
o="<font color=red>"..o.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if a~=""then
a="<b>Information</b><br>"..a
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
r,
o,
get_mfp_regs(i,d,l),
get_clk_informnation(i,n),
a)
end
function fill_M2351_EPWM(o,n,c,u,l,e,h)
local i=""
local a=""
local s={}
o["highlight_text"]=l
o["normal_color"]=kColor_Invalid
o["highlight_color"]=kColor_PWM
o["pin_bg_color"]=kBgColor_PWM
o["direction"]=kPinDirection_Unknown
o["status"]=kPinStatus_Unknown
if h~=nil then
local t=ext.rshift(h,1)
table.insert(s,"CLK_CLK_APBCLK1")
local o=ext.band(ext.rshift(n["CLK_CLK_APBCLK1"],16+e),1)
if o~=0 then
local o
local r
table.insert(s,"CLK_CLK_CLKSEL2")
o,r=get_PCLK_clock(n,s,ext.band(e,1))
local d=string.format("EPWM%d_EPWM_CNTEN",e)
table.insert(s,d)
local d=ext.band(ext.rshift(n[d],h),1)
if d==0 then
a=string.format("EPWM%d counter%d stops running.<br>",e,h)
else
local d=string.format("EPWM%d_EPWM_CLKSRC",e)
table.insert(s,d)
local d=ext.band(ext.rshift(n[d],8*t),7)
if d==0 then
if o==0 then
a=string.format("EPWM%d clock is not available, %s.<br>",e,r)
else
local t=string.format("EPWM%d_EPWM_CLKPSC%d_%d",e,2*t,2*t+1)
table.insert(s,t)
local t=ext.band(n[t],4095)
local t=o/(t+1)
i=string.format("EPWM%d clock frequency: <b>%sHz</b>, from %s.<br>",
e,val2str(o),r)
i=i..string.format("EPWM%d counter%d frequency: <b>%sHz</b> (Pre-Scaled)<br>",
e,h,val2str(t))
end
elseif d<=4 then
i=string.format("EPWM%d_CH%d%d clock source is from TIMER%d.<br>",
e,2*t,2*t+1,d-1)
else
a=string.format("EPWM%d_CH%d%d clock source is undefined (see EPWM_CLKSRC[%d:%d].ECLKSRC%d).<br>",
e,2*t,2*t+1,8*t+2,8*t,2*t)
end
end
else
a=string.format("EPWM%d clock is not available (see CLK_APBCLK1[%d].EPWM%dCKEN).<br>",
e,16+e,e)
end
end
if a~=""then
a="<font color=red>"..a.."</font>"
o["pin_no_color"]=kBgColor_Error
end
if i~=""then
i="<b>Information</b><br>"..i
end
o["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
l,
a,
get_mfp_regs(n,c,u),
get_clk_informnation(n,s),
i)
end
function fill_M2351_USCI(i,a,m,f,u,e)
local t=""
local o=""
local n={}
i["highlight_text"]=u
i["normal_color"]=kColor_Invalid
i["highlight_color"]=kColor_USCI
i["pin_bg_color"]=kBgColor_USCI
i["direction"]=kPinDirection_Unknown
i["status"]=kPinStatus_Unknown
table.insert(n,"CLK_CLK_APBCLK1")
local s=ext.band(ext.rshift(a["CLK_CLK_APBCLK1"],8+e),1)
if s~=0 then
local i=string.format("USCI%d_USCI_CTL",e)
table.insert(n,i)
local r=ext.band(a[i],7)
local i=string.format("USCI%d_USCI_BRGEN",e)
table.insert(n,i)
local s=ext.band(a[i],1)
local l=ext.band(ext.rshift(a[i],1),1)
local s=ext.band(ext.rshift(a[i],2),3)
local f=ext.band(ext.rshift(a[i],10),31)
local w=ext.band(ext.rshift(a[i],8),3)
local u=ext.band(ext.rshift(a[i],16),1023)
local i=string.format("USCI%d_USCI_PROTCTL",e)
table.insert(n,i)
local d=ext.band(ext.rshift(a[i],31),1)
local c=ext.band(a[i],1)
local h
local i
h,i=get_PCLK_clock(a,n,ext.band(e,1))
local n=h
local a=n/2
local l=(l==0)and n or a
local u=l/(u+1)
local m=u/2
local a
if s==0 then
a=u
elseif s==1 then
a=l
elseif s==2 then
a=m
elseif s==3 then
a=n
end
if h~=0 then
if r==0 then
t=string.format("USCI%d is in idle state.<br>",e)
elseif r==1 then
if c==0 then
t=string.format("USCI%d is in <b>SPI master</b> mode.<br>",e)
else
t=string.format("USCI%d is in <b>SPI slave</b> mode.<br>",e)
end
if d==0 then
o=string.format("SPI protocol disabled (see USCI%d_USCI_PROTCTL[31].PROTEN)<br>",e)
elseif c==0 then
local a=a/2
t=t..string.format("USPI%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(a),i)
end
elseif r==2 then
t=string.format("USCI%d is in <b>UART</b> mode.<br>",e)
if d==0 then
o=string.format("UART protocol disabled (see USCI%d_USCI_PROTCTL[31].PROTEN)<br>",e)
else
t=t..string.format("UUART%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(h),i)
local e=a/(f+1)/(w+1)
t=t..string.format("UART baudrate: <b>%d</b><br>",e)
end
elseif r==4 then
t=string.format("USCI%d is in <b>I2C</b> mode.<br>",e)
if d==0 then
o=string.format("I2C protocol disabled (see USCI%d_USCI_PROTCTL[31].PROTEN)<br>",e)
else
local a=a/2
t=t..string.format("UI2C%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(a),i)
end
else
o=string.format("Undefined function mode (see USCI_CTL[2:0].FUNMODE).<br>")
end
else
o=string.format("USCI%d clock is not available, %s.<br>",e,i)
end
else
o=string.format("USCI%d clock is not available (see CLK_APBCLK1[%d].USCI%dCKEN).<br>",e,8+e,e)
end
if o~=""then
o="<font color=red>"..o.."</font>"
i["pin_no_color"]=kBgColor_Error
end
if t~=""then
t="<b>Information</b><br>"..t
end
i["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
u,
o,
get_mfp_regs(a,m,f),
get_clk_informnation(a,n),
t)
end
function fill_M2351_USCI_IO(e,i,o,a)
local t=string.format("USCI%d_USCI_CTL",o)
local t=ext.band(i[t],7)
if t==0 then
elseif t==1 then
local t=string.format("USCI%d_USCI_PROTCTL",o)
local t=ext.band(i[t],1)
if t==0 then
if a==0 then
e["direction"]=kPinDirection_PushPullOut
else
e["direction"]=kPinDirection_In
end
else
if a==0 then
e["direction"]=kPinDirection_In
else
e["direction"]=kPinDirection_PushPullOut
end
end
elseif t==2 then
if a==0 then
e["direction"]=kPinDirection_In
else
e["direction"]=kPinDirection_PushPullOut
end
elseif t==4 then
end
end
function fill_M2351_SC(n,t,u,l,d,e)
local a=""
local i=""
local o={}
local h=0
n["highlight_text"]=d
n["normal_color"]=kColor_Invalid
n["highlight_color"]=kColor_SC
n["pin_bg_color"]=kBgColor_SC
n["direction"]=kPinDirection_PushPullOut
n["status"]=kPinStatus_Unknown
table.insert(o,"CLK_CLK_APBCLK1")
local s=ext.band(ext.rshift(t["CLK_CLK_APBCLK1"],e),1)
if s~=0 then
local r=string.format("SC%d_SC_CTL",e)
table.insert(o,r)
if ext.band(t[r],1)~=0 then
local s
local n
table.insert(o,"CLK_CLK_CLKSEL3")
local r=ext.band(ext.rshift(t["CLK_CLK_CLKSEL3"],e*2),3)
if r==0 then
s,n=get_HXT_clock(t,o)
elseif r==1 then
s,n=get_PLL_clock(t,o)
elseif r==2 then
s,n=get_PCLK_clock(t,o,ext.band(e,1))
else
s,n=get_HIRC_clock(t,o)
end
table.insert(o,"CLK_CLK_CLKDIV1")
local t=ext.band(ext.rshift(t["CLK_CLK_CLKDIV1"],e*8),255)
h=s/(t+1)
if h~=0 then
a=a..string.format("SC%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(h),n)
else
i=string.format("SC%d clock is not available, ",e)..n..".<br>"
end
else
i=string.format("SC%d engine disabled (see %s[0].SCEN).<br>",e,r)
end
else
i=string.format("SC%d clock is not available (see CLK_APBCLK1[%d].SC%dCKEN).<br>",e,e,e)
end
if i==""then
local n=string.format("SC%d_SC_UARTCTL",e)
local s=string.format("SC%d_SC_ETUCTL",e)
table.insert(o,n)
table.insert(o,s)
local o=ext.band(t[s],4095)
local s=h/(o+1)
local t=ext.band(t[n],1)
if t~=0 then
a=string.format("SC%d is in <b>UART</b> mode.<br>",e)..a
if o>4 then
a=a..string.format("UART baudrate: <b>%d</b><br>",s)
else
i=string.format("SC%d ETURDIV(SC_ETUCTL[11:0]) must be greater than 4.<br>",e)
end
else
a=string.format("SC%d is in <b>Smart Card</b> mode.<br>",e)..a
end
end
if i~=""then
i="<font color=red>"..i.."</font>"
n["pin_no_color"]=kBgColor_Error
end
if a~=""then
a="<b>Information</b><br>"..a
end
n["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
d,
i,
get_mfp_regs(t,u,l),
get_clk_informnation(t,o),
a)
end
function fill_M2351_QEI(t,o,d,r,h,e)
local i=""
local a=""
local n={}
t["highlight_text"]=h
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_QEI
t["pin_bg_color"]=kBgColor_QEI
t["direction"]=kPinDirection_In
t["status"]=kPinStatus_Unknown
table.insert(n,"CLK_CLK_APBCLK1")
local s=ext.band(ext.rshift(o["CLK_CLK_APBCLK1"],22+e),1)
if s~=0 then
local t
local s
t,s=get_PCLK_clock(o,n,ext.band(e,1))
if t~=0 then
local h=string.format("QEI%d_QEI_CTL",e)
table.insert(n,h)
local o=ext.band(ext.rshift(o[h],29),1)
if o~=0 then
i=string.format("QEI%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(t),s)
else
a=string.format("QEI%d controller function disabled (see QEI_CTL[29].QEIEN).<br>",e)
end
else
a=string.format("QEI%d clock is not available, %s.<br>",e,s)
end
else
a=string.format("QEI%d clock is not available (see CLK_APBCLK1[%d].QEI%dCKEN).<br>",e,22+e,e)
end
if a~=""then
a="<font color=red>"..a.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if i~=""then
i="<b>Information</b><br>"..i
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>%s%s%s",
h,
a,
get_mfp_regs(o,d,r),
get_clk_informnation(o,n),
i)
end
function fill_M2351_ECAP(t,i,d,l,r,e)
local o=""
local a=""
local n={}
t["highlight_text"]=r
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_CAP
t["pin_bg_color"]=kBgColor_CAP
t["direction"]=kPinDirection_Unknown
t["status"]=kPinStatus_Unknown
table.insert(n,"CLK_CLK_APBCLK1")
local s=ext.band(ext.rshift(i["CLK_CLK_APBCLK1"],26+e),1)
if s~=0 then
local s
local t
s,t=get_PCLK_clock(i,n,ext.band(e,1))
if s~=0 then
local h=string.format("ECAP%d_ECAP_CTL0",e)
table.insert(n,h)
local i=ext.band(ext.rshift(i[h],29),1)
if i~=0 then
o=string.format("ECAP%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(s),t)
else
a="Input Capture function disabled (see ECAP_CTL0[29].CAPEN).<br>"
end
else
a=string.format("ECAP%d clock is not available, %s.<br>",e,t)
end
else
a=string.format("ECAP%d clock is not available (see CLK_APBCLK1[%d].ECAP%dEN).<br>",e,26+e,e)
end
if a~=""then
a="<font color=red>"..a.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if o~=""then
o="<b>Information</b><br>"..o
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>%s%s%s",
r,
a,
get_mfp_regs(i,d,l),
get_clk_informnation(i,n),
o)
end
function fill_M2351_TRACE(e,t,r,h,s)
local o=""
local a=""
local i={}
e["highlight_text"]=s
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_Normal
e["pin_bg_color"]=kBgColor_Normal
e["direction"]=kPinDirection_PushPullOut
e["status"]=kPinStatus_Unknown
table.insert(i,"SCS_DEMCR")
local n=ext.band(ext.rshift(t["SCS_DEMCR"],24),1)
if n~=0 then
table.insert(i,"TPIU_SPPR")
local e=ext.band(ext.rshift(t["TPIU_SPPR"],0),3)
if e==0 then
table.insert(i,"TPIU_CSPSR")
for e=0,31 do
if ext.band(ext.rshift(t['TPIU_CSPSR'],e),1)==1 then
o=string.format('Trace port width: <b>%d-bit</b><br>',e+1)
break
end
end
local n
local e
n,e=get_HCLK_clock(t,i)
if n~=0 then
table.insert(i,"CLK_CLK_CLKDIV4")
local t=ext.band(ext.rshift(t["CLK_CLK_CLKDIV4"],24),255)
local t=n/2/(t+1)
o=o..string.format("Trace clock frequency: <b>%sHz</b>, from %s.<br>",val2str(t),e)
else
a=string.format("Trace clock is not available, %s.<br>",e)
end
else
a="TPIU protocol is not TracePort mode.<br>"
end
else
a="Trace is disabled."
end
if a~=""then
a="<font color=red>"..a.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if o~=""then
o="<b>Information</b><br>"..o
end
e["information"]=string.format(
"<b>%s</b><br>%s<br>%s%s%s",
s,
a,
get_mfp_regs(t,r,h),
get_clk_informnation(t,i),
o)
end
function fill_M2351_SD(t,e,l,d,r,n)
local s=""
local o=""
local a={}
t["highlight_text"]=r
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_SD
t["pin_bg_color"]=kBgColor_SD
t["direction"]=kPinDirection_Unknown
t["status"]=kPinStatus_Unknown
table.insert(a,"CLK_CLK_AHBCLK")
local i=0
if n==0 then
i=ext.band(ext.rshift(e["CLK_CLK_AHBCLK"],6),1)
end
if i~=0 then
local t
local i
table.insert(a,"CLK_CLK_CLKSEL0")
local h=ext.band(ext.rshift(e["CLK_CLK_CLKSEL0"],20+n*2),3)
if h==0 then
t,i=get_HXT_clock(e,a)
elseif h==1 then
t,i=get_PLL_clock(e,a)
elseif h==2 then
t,i=get_HCLK_clock(e,a)
else
t,i=get_HIRC_clock(e,a)
end
if t~=0 then
local o=0
if n==0 then
table.insert(a,"CLK_CLK_CLKDIV0")
o=ext.band(ext.rshift(e["CLK_CLK_CLKDIV0"],24),255)
end
local e=t/(o+1)
s=string.format("SDH%d clock frequency: <b>%sHz</b>, from %s.<br>",n,val2str(e),i)
else
o=string.format("SDH%d clock is not available, ",n)..i..".<br>"
end
else
if n==0 then
o="SDH0 clock is not available (see CLK_AHBCLK[6].SDH0CKEN).<br>"
end
end
if o~=""then
o="<font color=red>"..o.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if s~=""then
s="<b>Information</b><br>"..s
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
r,
o,
get_mfp_regs(e,l,d),
get_clk_informnation(e,a),
s)
end
function fill_M2351_I2S(i,t,d,r,h)
local e=""
local n=""
local a={}
i["highlight_text"]=h
i["normal_color"]=kColor_Invalid
i["highlight_color"]=kColor_I2S
i["pin_bg_color"]=kBgColor_I2S
i["direction"]=kPinDirection_Unknown
i["status"]=kPinStatus_Unknown
table.insert(a,"CLK_CLK_APBCLK0")
local o=ext.band(ext.rshift(t["CLK_CLK_APBCLK0"],29),1)
if o~=0 then
local o
local i
table.insert(a,"CLK_CLK_CLKSEL3")
local s=ext.band(ext.rshift(t["CLK_CLK_CLKSEL3"],16),3)
if s==0 then
o,i=get_HXT_clock(t,a)
elseif s==1 then
o,i=get_PLL_clock(t,a)
elseif s==2 then
o,i=get_PCLK_clock(t,a,0)
else
o,i=get_HIRC_clock(t,a)
end
if o~=0 then
table.insert(a,"I2S_I2S_CTL0")
local n=ext.band(t["I2S_I2S_CTL0"],1)
if n~=0 then
e="I2S controller enabled.<br>"
else
e="I2S controller <font color=red>disabled</font>, (see I2S_CTL0[0].I2SEN).<br>"
end
e=e..string.format("I2S clock frequency: <b>%sHz</b>, from %s.<br>",val2str(o),i)
table.insert(a,"I2S_I2S_CLKDIV")
local i=ext.band(ext.rshift(t["I2S_I2S_CLKDIV"],8),1023)
local a=ext.band(t["I2S_I2S_CLKDIV"],127)
local i=o/(2*(i+1))
local t=o
if a~=0 then
t=o/(2*a)
end
e=e..string.format("I2S BCLK frequency: <b>%sHz</b><br>",val2str(i))
e=e..string.format("I2S MCLK frequency: <b>%sHz</b><br>",val2str(t))
else
n=string.format("I2S clock is not available, %s.<br>",i)
end
else
n="I2S clock is not available (see CLK_APBCLK0[29].I2S0CKEN).<br>"
end
if n~=""then
n="<font color=red>"..n.."</font>"
i["pin_no_color"]=kBgColor_Error
end
if e~=""then
e="<b>Information</b><br>"..e
end
i["information"]=string.format(
"<b>%s</b><br>%s<br>%s%s%s",
h,
n,
get_mfp_regs(t,d,r),
get_clk_informnation(t,a),
e)
end
function fill_M2351_Normal(e,i,a,o,t)
e["highlight_text"]=t
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_Normal
e["pin_bg_color"]=kBgColor_Normal
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
if a==nil or o==nil then
e["information"]=string.format(
"<b>%s</b><br>",
t)
else
e["information"]=string.format(
"<b>%s</b><br><br>"..
"%s",
t,
get_mfp_regs(i,a,o))
end
end
function fill_M2351_Analog(e,o,l,d,i,p,f,m)
local t=""
local a=""
local h={}
local n={}
local s=""
local u=""
local r={}
local c=0
if m~=nil then
s,u,r,c=fill_M2351_ACMP(n,o,l,d,i,unpack(m))
for t,e in ipairs(r)do
table.insert(h,e)
end
if s~=""then
if t~=""then t=t.."<br><br>"end
t=t.."<b>ACMP</b> "..s
end
a=a..u
end
local s={}
local r=""
local u=""
local m={}
local y=0
if f~=nil then
r,u,m,y=fill_M2351_DAC(s,o,l,d,i,unpack(f))
for t,e in ipairs(m)do
table.insert(h,e)
end
if r~=""then
if t~=""then t=t.."<br><br>"end
t=t.."<b>DAC</b> "..r
end
a=a..u
end
local r={}
local u=""
local f=""
local m={}
local w=0
if p~=nil then
u,f,m,w=fill_M2351_EADC(r,o,l,d,i,unpack(p))
for t,e in ipairs(m)do
table.insert(h,e)
end
if u~=""then
if t~=""then t=t.."<br><br>"end
t=t.."<b>EADC</b> "..u
end
a=a..f
end
if c~=0 then
e["highlight_color"]=n["highlight_color"]
e["pin_bg_color"]=n["pin_bg_color"]
e["pin_no_color"]=n["pin_no_color"]
elseif y~=0 then
e["highlight_color"]=s["highlight_color"]
e["pin_bg_color"]=s["pin_bg_color"]
e["pin_no_color"]=s["pin_no_color"]
elseif w~=0 then
e["highlight_color"]=r["highlight_color"]
e["pin_bg_color"]=r["pin_bg_color"]
e["pin_no_color"]=r["pin_no_color"]
else
e["highlight_color"]=kColor_Normal
e["pin_bg_color"]=kBgColor_Normal
if a~=""then
e["pin_no_color"]=kBgColor_Error
end
end
e["highlight_text"]=i
e["normal_color"]=kColor_Invalid
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
i,
a,
get_mfp_regs(o,l,d),
get_clk_informnation(o,h),
t)
end