REG=
{
SYS_SYS_PDID=1073741824,
SYS_SYS_RSTSTS=1073741828,
SYS_SYS_IPRST0=1073741832,
SYS_SYS_IPRST1=1073741836,
SYS_SYS_IPRST2=1073741840,
SYS_SYS_BODCTL=1073741848,
SYS_SYS_IVSCTL=1073741852,
SYS_SYS_PORCTL0=1073741860,
SYS_SYS_VREFCTL=1073741864,
SYS_SYS_GPA_MFPL=1073741872,
SYS_SYS_GPA_MFPH=1073741876,
SYS_SYS_GPB_MFPL=1073741880,
SYS_SYS_GPB_MFPH=1073741884,
SYS_SYS_GPC_MFPL=1073741888,
SYS_SYS_GPC_MFPH=1073741892,
SYS_SYS_GPD_MFPL=1073741896,
SYS_SYS_GPD_MFPH=1073741900,
SYS_SYS_GPE_MFPL=1073741904,
SYS_SYS_GPE_MFPH=1073741908,
SYS_SYS_GPF_MFPL=1073741912,
SYS_SYS_GPF_MFPH=1073741916,
SYS_SYS_GPA_MFOS=1073741952,
SYS_SYS_GPB_MFOS=1073741956,
SYS_SYS_GPC_MFOS=1073741960,
SYS_SYS_GPD_MFOS=1073741964,
SYS_SYS_GPE_MFOS=1073741968,
SYS_SYS_GPF_MFOS=1073741972,
SYS_SYS_MODCTL=1073742016,
SYS_SYS_SRAM_BISTCTL=1073742032,
SYS_SYS_SRAM_BISTSTS=1073742036,
SYS_SYS_HIRCTRIMCTL=1073742064,
SYS_SYS_HIRCTRIMIEN=1073742068,
SYS_SYS_HIRCTRIMSTS=1073742072,
SYS_SYS_REGLCTL=1073742080,
SYS_SYS_MIRCTRIMCTL=1073742084,
SYS_SYS_MIRCTRIMIEN=1073742088,
SYS_SYS_MIRCTRIMSTS=1073742092,
SYS_SYS_RTCLVRIEN=1073742148,
SYS_SYS_RTCLVRSTS=1073742152,
SYS_SYS_HIRCTCTL=1073742216,
SYS_SYS_PORCTL1=1073742316,
SYS_SYS_PLCTL=1073742328,
SYS_SYS_PLSTS=1073742332,
SCS_SYST_CTRL=3758153744,
SCS_SYST_LOAD=3758153748,
SCS_SYST_VAL=3758153752,
SCS_ICSR=3758157060,
SCS_VTOR=3758157064,
SCS_AIRCR=3758157068,
SCS_SCR=3758157072,
SCS_CCR=3758157076,
SCS_SHPR2=3758157084,
SCS_SHPR3=3758157088,
SCS_SHCSR=3758157092,
NVIC_NVIC_ISER0=3758153984,
NVIC_NVIC_ISER1=3758153988,
NVIC_NVIC_ICER0=3758154112,
NVIC_NVIC_ICER1=3758154116,
NVIC_NVIC_ISPR0=3758154240,
NVIC_NVIC_ISPR1=3758154244,
NVIC_NVIC_ICPR0=3758154368,
NVIC_NVIC_ICPR1=3758154372,
NVIC_NVIC_IABR0=3758154496,
NVIC_NVIC_IABR1=3758154500,
CLK_CLK_PWRCTL=1073742336,
CLK_CLK_AHBCLK=1073742340,
CLK_CLK_APBCLK0=1073742344,
CLK_CLK_APBCLK1=1073742348,
CLK_CLK_CLKSEL0=1073742352,
CLK_CLK_CLKSEL1=1073742356,
CLK_CLK_CLKSEL2=1073742360,
CLK_CLK_CLKSEL3=1073742364,
CLK_CLK_CLKDIV0=1073742368,
CLK_CLK_CLKDIV1=1073742372,
CLK_CLK_CLKDIV4=1073742384,
CLK_CLK_PCLKDIV=1073742388,
CLK_CLK_PLLCTL=1073742400,
CLK_CLK_STATUS=1073742416,
CLK_CLK_CLKOCTL=1073742432,
CLK_CLK_CLKDCTL=1073742448,
CLK_CLK_CLKDSTS=1073742452,
CLK_CLK_CDUPB=1073742456,
CLK_CLK_CDLOWB=1073742460,
CLK_CLK_PMUCTL=1073742480,
CLK_CLK_PMUSTS=1073742484,
CLK_CLK_HXTFSEL=1073742516,
NMI_NMIEN=1073742592,
NMI_NMISTS=1073742596,
FMC_FMC_ISPCTL=1073790976,
FMC_FMC_ISPADDR=1073790980,
FMC_FMC_ISPDAT=1073790984,
FMC_FMC_ISPCMD=1073790988,
FMC_FMC_ISPTRG=1073790992,
FMC_FMC_FTCTL=1073791000,
FMC_FMC_ISPSTS=1073791040,
FMC_FMC_CYCCTL=1073791052,
FMC_FMC_MPDAT0=1073791104,
FMC_FMC_MPDAT1=1073791108,
FMC_FMC_MPDAT2=1073791112,
FMC_FMC_MPDAT3=1073791116,
FMC_FMC_MPSTS=1073791168,
FMC_FMC_MPADDR=1073791172,
FMC_FMC_XOMR0STS0=1073791184,
FMC_FMC_XOMR0STS1=1073791188,
FMC_FMC_XOMSTS=1073791200,
GPIO_PA_MODE=1073758208,
GPIO_PA_DINOFF=1073758212,
GPIO_PA_DOUT=1073758216,
GPIO_PA_DATMSK=1073758220,
GPIO_PA_PIN=1073758224,
GPIO_PA_DBEN=1073758228,
GPIO_PA_INTTYPE=1073758232,
GPIO_PA_INTEN=1073758236,
GPIO_PA_INTSRC=1073758240,
GPIO_PA_SMTEN=1073758244,
GPIO_PA_SLEWCTL=1073758248,
GPIO_PA_PUSEL=1073758256,
GPIO_PB_MODE=1073758272,
GPIO_PB_DINOFF=1073758276,
GPIO_PB_DOUT=1073758280,
GPIO_PB_DATMSK=1073758284,
GPIO_PB_PIN=1073758288,
GPIO_PB_DBEN=1073758292,
GPIO_PB_INTTYPE=1073758296,
GPIO_PB_INTEN=1073758300,
GPIO_PB_INTSRC=1073758304,
GPIO_PB_SMTEN=1073758308,
GPIO_PB_SLEWCTL=1073758312,
GPIO_PB_PUSEL=1073758320,
GPIO_PC_MODE=1073758336,
GPIO_PC_DINOFF=1073758340,
GPIO_PC_DOUT=1073758344,
GPIO_PC_DATMSK=1073758348,
GPIO_PC_PIN=1073758352,
GPIO_PC_DBEN=1073758356,
GPIO_PC_INTTYPE=1073758360,
GPIO_PC_INTEN=1073758364,
GPIO_PC_INTSRC=1073758368,
GPIO_PC_SMTEN=1073758372,
GPIO_PC_SLEWCTL=1073758376,
GPIO_PC_PUSEL=1073758384,
GPIO_PD_MODE=1073758400,
GPIO_PD_DINOFF=1073758404,
GPIO_PD_DOUT=1073758408,
GPIO_PD_DATMSK=1073758412,
GPIO_PD_PIN=1073758416,
GPIO_PD_DBEN=1073758420,
GPIO_PD_INTTYPE=1073758424,
GPIO_PD_INTEN=1073758428,
GPIO_PD_INTSRC=1073758432,
GPIO_PD_SMTEN=1073758436,
GPIO_PD_SLEWCTL=1073758440,
GPIO_PD_PUSEL=1073758448,
GPIO_PE_MODE=1073758464,
GPIO_PE_DINOFF=1073758468,
GPIO_PE_DOUT=1073758472,
GPIO_PE_DATMSK=1073758476,
GPIO_PE_PIN=1073758480,
GPIO_PE_DBEN=1073758484,
GPIO_PE_INTTYPE=1073758488,
GPIO_PE_INTEN=1073758492,
GPIO_PE_INTSRC=1073758496,
GPIO_PE_SMTEN=1073758500,
GPIO_PE_SLEWCTL=1073758504,
GPIO_PE_PUSEL=1073758512,
GPIO_PF_MODE=1073758528,
GPIO_PF_DINOFF=1073758532,
GPIO_PF_DOUT=1073758536,
GPIO_PF_DATMSK=1073758540,
GPIO_PF_PIN=1073758544,
GPIO_PF_DBEN=1073758548,
GPIO_PF_INTTYPE=1073758552,
GPIO_PF_INTEN=1073758556,
GPIO_PF_INTSRC=1073758560,
GPIO_PF_SMTEN=1073758564,
GPIO_PF_SLEWCTL=1073758568,
GPIO_PF_PUSEL=1073758576,
GPIO_GPIO_DBCTL=1073759296,
GPIO_PA0_PDIO=1073760256,
GPIO_PA1_PDIO=1073760260,
GPIO_PA2_PDIO=1073760264,
GPIO_PA3_PDIO=1073760268,
GPIO_PA4_PDIO=1073760272,
GPIO_PA5_PDIO=1073760276,
GPIO_PA6_PDIO=1073760280,
GPIO_PA7_PDIO=1073760284,
GPIO_PA8_PDIO=1073760288,
GPIO_PA9_PDIO=1073760292,
GPIO_PA10_PDIO=1073760296,
GPIO_PA11_PDIO=1073760300,
GPIO_PA12_PDIO=1073760304,
GPIO_PA13_PDIO=1073760308,
GPIO_PA14_PDIO=1073760312,
GPIO_PA15_PDIO=1073760316,
GPIO_PB0_PDIO=1073760320,
GPIO_PB1_PDIO=1073760324,
GPIO_PB2_PDIO=1073760328,
GPIO_PB3_PDIO=1073760332,
GPIO_PB4_PDIO=1073760336,
GPIO_PB5_PDIO=1073760340,
GPIO_PB6_PDIO=1073760344,
GPIO_PB7_PDIO=1073760348,
GPIO_PB8_PDIO=1073760352,
GPIO_PB9_PDIO=1073760356,
GPIO_PB10_PDIO=1073760360,
GPIO_PB11_PDIO=1073760364,
GPIO_PB12_PDIO=1073760368,
GPIO_PB13_PDIO=1073760372,
GPIO_PB14_PDIO=1073760376,
GPIO_PB15_PDIO=1073760380,
GPIO_PCn_PDIO=1073760384,
GPIO_PDn_PDIO=1073760448,
GPIO_PE0_PDIO=1073760512,
GPIO_PE1_PDIO=1073760516,
GPIO_PE2_PDIO=1073760520,
GPIO_PE3_PDIO=1073760524,
GPIO_PE4_PDIO=1073760528,
GPIO_PE5_PDIO=1073760532,
GPIO_PE6_PDIO=1073760536,
GPIO_PE7_PDIO=1073760540,
GPIO_PE8_PDIO=1073760544,
GPIO_PE9_PDIO=1073760548,
GPIO_PE10_PDIO=1073760552,
GPIO_PE11_PDIO=1073760556,
GPIO_PE12_PDIO=1073760560,
GPIO_PE13_PDIO=1073760564,
GPIO_PE14_PDIO=1073760568,
GPIO_PE15_PDIO=1073760572,
GPIO_PF0_PDIO=1073760576,
GPIO_PF1_PDIO=1073760580,
GPIO_PF2_PDIO=1073760584,
GPIO_PF3_PDIO=1073760588,
GPIO_PF4_PDIO=1073760592,
GPIO_PF5_PDIO=1073760596,
GPIO_PF6_PDIO=1073760600,
GPIO_PF7_PDIO=1073760604,
PDMA_PDMA_DSCT0_CTL=1073774592,
PDMA_PDMA_DSCT1_CTL=1073774608,
PDMA_PDMA_DSCT2_CTL=1073774624,
PDMA_PDMA_DSCT3_CTL=1073774640,
PDMA_PDMA_DSCT4_CTL=1073774656,
PDMA_PDMA_DSCT5_CTL=1073774672,
PDMA_PDMA_DSCT6_CTL=1073774688,
PDMA_PDMA_DSCT7_CTL=1073774704,
PDMA_PDMA_DSCT0_SA=1073774596,
PDMA_PDMA_DSCT1_SA=1073774612,
PDMA_PDMA_DSCT2_SA=1073774628,
PDMA_PDMA_DSCT3_SA=1073774644,
PDMA_PDMA_DSCT4_SA=1073774660,
PDMA_PDMA_DSCT5_SA=1073774676,
PDMA_PDMA_DSCT6_SA=1073774692,
PDMA_PDMA_DSCT7_SA=1073774708,
PDMA_PDMA_DSCT0_DA=1073774600,
PDMA_PDMA_DSCT1_DA=1073774616,
PDMA_PDMA_DSCT2_DA=1073774632,
PDMA_PDMA_DSCT3_DA=1073774648,
PDMA_PDMA_DSCT4_DA=1073774664,
PDMA_PDMA_DSCT5_DA=1073774680,
PDMA_PDMA_DSCT6_DA=1073774696,
PDMA_PDMA_DSCT7_DA=1073774712,
PDMA_PDMA_DSCT0_NEXT=1073774604,
PDMA_PDMA_DSCT1_NEXT=1073774620,
PDMA_PDMA_DSCT2_NEXT=1073774636,
PDMA_PDMA_DSCT3_NEXT=1073774652,
PDMA_PDMA_DSCT4_NEXT=1073774668,
PDMA_PDMA_DSCT5_NEXT=1073774684,
PDMA_PDMA_DSCT6_NEXT=1073774700,
PDMA_PDMA_DSCT7_NEXT=1073774716,
PDMA_PDMA_CURSCAT0=1073774848,
PDMA_PDMA_CURSCAT1=1073774852,
PDMA_PDMA_CURSCAT2=1073774856,
PDMA_PDMA_CURSCAT3=1073774860,
PDMA_PDMA_CURSCAT4=1073774864,
PDMA_PDMA_CURSCAT5=1073774868,
PDMA_PDMA_CURSCAT6=1073774872,
PDMA_PDMA_CURSCAT7=1073774876,
PDMA_PDMA_CHCTL=1073775616,
PDMA_PDMA_PAUSE=1073775620,
PDMA_PDMA_SWREQ=1073775624,
PDMA_PDMA_TRGSTS=1073775628,
PDMA_PDMA_PRISET=1073775632,
PDMA_PDMA_PRICLR=1073775636,
PDMA_PDMA_INTEN=1073775640,
PDMA_PDMA_INTSTS=1073775644,
PDMA_PDMA_ABTSTS=1073775648,
PDMA_PDMA_TDSTS=1073775652,
PDMA_PDMA_ALIGN=1073775656,
PDMA_PDMA_TACTSTS=1073775660,
PDMA_PDMA_TOUTPSC=1073775664,
PDMA_PDMA_TOUTEN=1073775668,
PDMA_PDMA_TOUTIEN=1073775672,
PDMA_PDMA_SCATBA=1073775676,
PDMA_PDMA_TOC0_1=1073775680,
PDMA_PDMA_CHRST=1073775712,
PDMA_PDMA_SPI=1073775716,
PDMA_PDMA_REQSEL0_3=1073775744,
PDMA_PDMA_REQSEL4_7=1073775748,
PDMA_PDMA_STCR0=1073775872,
PDMA_PDMA_ASOCR0=1073775876,
PDMA_PDMA_STCR1=1073775880,
PDMA_PDMA_ASOCR1=1073775884,
PDMA_PDMA_STCR2=1073775888,
PDMA_PDMA_ASOCR2=1073775892,
PDMA_PDMA_STCR3=1073775896,
PDMA_PDMA_ASOCR3=1073775900,
PDMA_PDMA_STCR4=1073775904,
PDMA_PDMA_ASOCR4=1073775908,
PDMA_PDMA_STCR5=1073775912,
PDMA_PDMA_ASOCR5=1073775916,
TMR01_TIMER0_CTL=1074069504,
TMR01_TIMER0_CMP=1074069508,
TMR01_TIMER0_INTSTS=1074069512,
TMR01_TIMER0_CNT=1074069516,
TMR01_TIMER0_CAP=1074069520,
TMR01_TIMER0_EXTCTL=1074069524,
TMR01_TIMER0_EINTSTS=1074069528,
TMR01_TIMER0_TRGCTL=1074069532,
TMR01_TIMER0_PWMCTL=1074069568,
TMR01_TIMER0_PWMCLKPSC=1074069572,
TMR01_TIMER0_PWMCNTCLR=1074069576,
TMR01_TIMER0_PWMPERIOD=1074069580,
TMR01_TIMER0_PWMCMPDAT=1074069584,
TMR01_TIMER0_PWMCNT=1074069588,
TMR01_TIMER0_PWMPOLCTL=1074069592,
TMR01_TIMER0_PWMPOCTL=1074069596,
TMR01_TIMER0_PWMINTEN0=1074069600,
TMR01_TIMER0_PWMINTSTS0=1074069604,
TMR01_TIMER0_PWMTRGCTL=1074069608,
TMR01_TIMER0_PWMSTATUS=1074069612,
TMR01_TIMER0_PWMPBUF=1074069616,
TMR01_TIMER0_PWMCMPBUF=1074069620,
TMR01_TIMER1_CTL=1074069760,
TMR01_TIMER1_CMP=1074069764,
TMR01_TIMER1_INTSTS=1074069768,
TMR01_TIMER1_CNT=1074069772,
TMR01_TIMER1_CAP=1074069776,
TMR01_TIMER1_EXTCTL=1074069780,
TMR01_TIMER1_EINTSTS=1074069784,
TMR01_TIMER1_TRGCTL=1074069788,
TMR01_TIMER1_PWMCTL=1074069824,
TMR01_TIMER1_PWMCLKPSC=1074069828,
TMR01_TIMER1_PWMCNTCLR=1074069832,
TMR01_TIMER1_PWMPERIOD=1074069836,
TMR01_TIMER1_PWMCMPDAT=1074069840,
TMR01_TIMER1_PWMCNT=1074069844,
TMR01_TIMER1_PWMPOLCTL=1074069848,
TMR01_TIMER1_PWMPOCTL=1074069852,
TMR01_TIMER1_PWMINTEN0=1074069856,
TMR01_TIMER1_PWMINTSTS0=1074069860,
TMR01_TIMER1_PWMTRGCTL=1074069864,
TMR01_TIMER1_PWMSTATUS=1074069868,
TMR01_TIMER1_PWMPBUF=1074069872,
TMR01_TIMER1_PWMCMPBUF=1074069876,
TMR23_TIMER2_CTL=1074073600,
TMR23_TIMER2_CMP=1074073604,
TMR23_TIMER2_INTSTS=1074073608,
TMR23_TIMER2_CNT=1074073612,
TMR23_TIMER2_CAP=1074073616,
TMR23_TIMER2_EXTCTL=1074073620,
TMR23_TIMER2_EINTSTS=1074073624,
TMR23_TIMER2_TRGCTL=1074073628,
TMR23_TIMER2_PWMCTL=1074073664,
TMR23_TIMER2_PWMCLKPSC=1074073668,
TMR23_TIMER2_PWMCNTCLR=1074073672,
TMR23_TIMER2_PWMPERIOD=1074073676,
TMR23_TIMER2_PWMCMPDAT=1074073680,
TMR23_TIMER2_PWMCNT=1074073684,
TMR23_TIMER2_PWMPOLCTL=1074073688,
TMR23_TIMER2_PWMPOCTL=1074073692,
TMR23_TIMER2_PWMINTEN0=1074073696,
TMR23_TIMER2_PWMINTSTS0=1074073700,
TMR23_TIMER2_PWMTRGCTL=1074073704,
TMR23_TIMER2_PWMSTATUS=1074073708,
TMR23_TIMER2_PWMPBUF=1074073712,
TMR23_TIMER2_PWMCMPBUF=1074073716,
TMR23_TIMER3_CTL=1074073856,
TMR23_TIMER3_CMP=1074073860,
TMR23_TIMER3_INTSTS=1074073864,
TMR23_TIMER3_CNT=1074073868,
TMR23_TIMER3_CAP=1074073872,
TMR23_TIMER3_EXTCTL=1074073876,
TMR23_TIMER3_EINTSTS=1074073880,
TMR23_TIMER3_TRGCTL=1074073884,
TMR23_TIMER3_PWMCTL=1074073920,
TMR23_TIMER3_PWMCLKPSC=1074073924,
TMR23_TIMER3_PWMCNTCLR=1074073928,
TMR23_TIMER3_PWMPERIOD=1074073932,
TMR23_TIMER3_PWMCMPDAT=1074073936,
TMR23_TIMER3_PWMCNT=1074073940,
TMR23_TIMER3_PWMPOLCTL=1074073944,
TMR23_TIMER3_PWMPOCTL=1074073948,
TMR23_TIMER3_PWMINTEN0=1074073952,
TMR23_TIMER3_PWMINTSTS0=1074073956,
TMR23_TIMER3_PWMTRGCTL=1074073960,
TMR23_TIMER3_PWMSTATUS=1074073964,
TMR23_TIMER3_PWMPBUF=1074073968,
TMR23_TIMER3_PWMCMPBUF=1074073972,
WDT_WDT_CTL=1074003968,
WDT_WDT_ALTCTL=1074003972,
WDT_WDT_RSTCNT=1074003976,
WWDT_WWDT_RLDCNT=1074004224,
WWDT_WWDT_CTL=1074004228,
WWDT_WWDT_STATUS=1074004232,
WWDT_WWDT_CNT=1074004236,
RTC_RTC_INIT=1074008064,
RTC_RTC_FREQADJ=1074008072,
RTC_RTC_TIME=1074008076,
RTC_RTC_CAL=1074008080,
RTC_RTC_CLKFMT=1074008084,
RTC_RTC_WEEKDAY=1074008088,
RTC_RTC_TALM=1074008092,
RTC_RTC_CALM=1074008096,
RTC_RTC_LEAPYEAR=1074008100,
RTC_RTC_INTEN=1074008104,
RTC_RTC_INTSTS=1074008108,
RTC_RTC_TICK=1074008112,
RTC_RTC_TAMSK=1074008116,
RTC_RTC_CAMSK=1074008120,
RTC_RTC_SPRCTL=1074008124,
RTC_RTC_SPR0=1074008128,
RTC_RTC_SPR1=1074008132,
RTC_RTC_SPR2=1074008136,
RTC_RTC_SPR3=1074008140,
RTC_RTC_SPR4=1074008144,
RTC_RTC_LXTCTL=1074008320,
RTC_RTC_GPIOCTL0=1074008324,
RTC_RTC_DSTCTL=1074008336,
RTC_RTC_TAMPCTL=1074008352,
RTC_RTC_TAMPTIME=1074008368,
RTC_RTC_TAMPCAL=1074008372,
BPWM0_BPWM_CTL0=1074110464,
BPWM0_BPWM_CTL1=1074110468,
BPWM0_BPWM_CLKSRC=1074110480,
BPWM0_BPWM_CLKPSC=1074110484,
BPWM0_BPWM_CNTEN=1074110496,
BPWM0_BPWM_CNTCLR=1074110500,
BPWM0_BPWM_PERIOD=1074110512,
BPWM0_BPWM_CMPDAT0=1074110544,
BPWM0_BPWM_CMPDAT1=1074110548,
BPWM0_BPWM_CMPDAT2=1074110552,
BPWM0_BPWM_CMPDAT3=1074110556,
BPWM0_BPWM_CMPDAT4=1074110560,
BPWM0_BPWM_CMPDAT5=1074110564,
BPWM0_BPWM_CNT=1074110608,
BPWM0_BPWM_WGCTL0=1074110640,
BPWM0_BPWM_WGCTL1=1074110644,
BPWM0_BPWM_MSKEN=1074110648,
BPWM0_BPWM_MSK=1074110652,
BPWM0_BPWM_POLCTL=1074110676,
BPWM0_BPWM_POEN=1074110680,
BPWM0_BPWM_INTEN=1074110688,
BPWM0_BPWM_INTSTS=1074110696,
BPWM0_BPWM_EADCTS0=1074110712,
BPWM0_BPWM_EADCTS1=1074110716,
BPWM0_BPWM_SSCTL=1074110736,
BPWM0_BPWM_SSTRG=1074110740,
BPWM0_BPWM_STATUS=1074110752,
BPWM0_BPWM_CAPINEN=1074110976,
BPWM0_BPWM_CAPCTL=1074110980,
BPWM0_BPWM_CAPSTS=1074110984,
BPWM0_BPWM_RCAPDAT0=1074110988,
BPWM0_BPWM_FCAPDAT0=1074110992,
BPWM0_BPWM_RCAPDAT1=1074110996,
BPWM0_BPWM_FCAPDAT1=1074111000,
BPWM0_BPWM_RCAPDAT2=1074111004,
BPWM0_BPWM_FCAPDAT2=1074111008,
BPWM0_BPWM_RCAPDAT3=1074111012,
BPWM0_BPWM_FCAPDAT3=1074111016,
BPWM0_BPWM_RCAPDAT4=1074111020,
BPWM0_BPWM_FCAPDAT4=1074111024,
BPWM0_BPWM_RCAPDAT5=1074111028,
BPWM0_BPWM_FCAPDAT5=1074111032,
BPWM0_BPWM_CAPIEN=1074111056,
BPWM0_BPWM_CAPIF=1074111060,
BPWM0_BPWM_PBUF=1074111236,
BPWM0_BPWM_CMPBUF0=1074111260,
BPWM0_BPWM_CMPBUF1=1074111264,
BPWM0_BPWM_CMPBUF2=1074111268,
BPWM0_BPWM_CMPBUF3=1074111272,
BPWM0_BPWM_CMPBUF4=1074111276,
BPWM0_BPWM_CMPBUF5=1074111280,
BPWM1_BPWM_CTL0=1074114560,
BPWM1_BPWM_CTL1=1074114564,
BPWM1_BPWM_CLKSRC=1074114576,
BPWM1_BPWM_CLKPSC=1074114580,
BPWM1_BPWM_CNTEN=1074114592,
BPWM1_BPWM_CNTCLR=1074114596,
BPWM1_BPWM_PERIOD=1074114608,
BPWM1_BPWM_CMPDAT0=1074114640,
BPWM1_BPWM_CMPDAT1=1074114644,
BPWM1_BPWM_CMPDAT2=1074114648,
BPWM1_BPWM_CMPDAT3=1074114652,
BPWM1_BPWM_CMPDAT4=1074114656,
BPWM1_BPWM_CMPDAT5=1074114660,
BPWM1_BPWM_CNT=1074114704,
BPWM1_BPWM_WGCTL0=1074114736,
BPWM1_BPWM_WGCTL1=1074114740,
BPWM1_BPWM_MSKEN=1074114744,
BPWM1_BPWM_MSK=1074114748,
BPWM1_BPWM_POLCTL=1074114772,
BPWM1_BPWM_POEN=1074114776,
BPWM1_BPWM_INTEN=1074114784,
BPWM1_BPWM_INTSTS=1074114792,
BPWM1_BPWM_EADCTS0=1074114808,
BPWM1_BPWM_EADCTS1=1074114812,
BPWM1_BPWM_SSCTL=1074114832,
BPWM1_BPWM_SSTRG=1074114836,
BPWM1_BPWM_STATUS=1074114848,
BPWM1_BPWM_CAPINEN=1074115072,
BPWM1_BPWM_CAPCTL=1074115076,
BPWM1_BPWM_CAPSTS=1074115080,
BPWM1_BPWM_RCAPDAT0=1074115084,
BPWM1_BPWM_FCAPDAT0=1074115088,
BPWM1_BPWM_RCAPDAT1=1074115092,
BPWM1_BPWM_FCAPDAT1=1074115096,
BPWM1_BPWM_RCAPDAT2=1074115100,
BPWM1_BPWM_FCAPDAT2=1074115104,
BPWM1_BPWM_RCAPDAT3=1074115108,
BPWM1_BPWM_FCAPDAT3=1074115112,
BPWM1_BPWM_RCAPDAT4=1074115116,
BPWM1_BPWM_FCAPDAT4=1074115120,
BPWM1_BPWM_RCAPDAT5=1074115124,
BPWM1_BPWM_FCAPDAT5=1074115128,
BPWM1_BPWM_CAPIEN=1074115152,
BPWM1_BPWM_CAPIF=1074115156,
BPWM1_BPWM_PBUF=1074115332,
BPWM1_BPWM_CMPBUF0=1074115356,
BPWM1_BPWM_CMPBUF1=1074115360,
BPWM1_BPWM_CMPBUF2=1074115364,
BPWM1_BPWM_CMPBUF3=1074115368,
BPWM1_BPWM_CMPBUF4=1074115372,
BPWM1_BPWM_CMPBUF5=1074115376,
PWM0_PWM_CTL0=1074102272,
PWM0_PWM_CTL1=1074102276,
PWM0_PWM_CLKSRC=1074102288,
PWM0_PWM_CLKPSC0_1=1074102292,
PWM0_PWM_CLKPSC2_3=1074102296,
PWM0_PWM_CLKPSC4_5=1074102300,
PWM0_PWM_CNTEN=1074102304,
PWM0_PWM_CNTCLR=1074102308,
PWM0_PWM_PERIOD0=1074102320,
PWM0_PWM_PERIOD2=1074102328,
PWM0_PWM_PERIOD4=1074102336,
PWM0_PWM_CMPDAT0=1074102352,
PWM0_PWM_CMPDAT1=1074102356,
PWM0_PWM_CMPDAT2=1074102360,
PWM0_PWM_CMPDAT3=1074102364,
PWM0_PWM_CMPDAT4=1074102368,
PWM0_PWM_CMPDAT5=1074102372,
PWM0_PWM_DTCTL0_1=1074102384,
PWM0_PWM_DTCTL2_3=1074102388,
PWM0_PWM_DTCTL4_5=1074102392,
PWM0_PWM_CNT0=1074102416,
PWM0_PWM_CNT2=1074102424,
PWM0_PWM_CNT4=1074102432,
PWM0_PWM_WGCTL0=1074102448,
PWM0_PWM_WGCTL1=1074102452,
PWM0_PWM_MSKEN=1074102456,
PWM0_PWM_MSK=1074102460,
PWM0_PWM_BNF=1074102464,
PWM0_PWM_FAILBRK=1074102468,
PWM0_PWM_BRKCTL0_1=1074102472,
PWM0_PWM_BRKCTL2_3=1074102476,
PWM0_PWM_BRKCTL4_5=1074102480,
PWM0_PWM_POLCTL=1074102484,
PWM0_PWM_POEN=1074102488,
PWM0_PWM_SWBRK=1074102492,
PWM0_PWM_INTEN0=1074102496,
PWM0_PWM_INTEN1=1074102500,
PWM0_PWM_INTSTS0=1074102504,
PWM0_PWM_INTSTS1=1074102508,
PWM0_PWM_EADCTS0=1074102520,
PWM0_PWM_EADCTS1=1074102524,
PWM0_PWM_SSCTL=1074102544,
PWM0_PWM_SSTRG=1074102548,
PWM0_PWM_STATUS=1074102560,
PWM0_PWM_CAPINEN=1074102784,
PWM0_PWM_CAPCTL=1074102788,
PWM0_PWM_CAPSTS=1074102792,
PWM0_PWM_RCAPDAT0=1074102796,
PWM0_PWM_FCAPDAT0=1074102800,
PWM0_PWM_RCAPDAT1=1074102804,
PWM0_PWM_FCAPDAT1=1074102808,
PWM0_PWM_RCAPDAT2=1074102812,
PWM0_PWM_FCAPDAT2=1074102816,
PWM0_PWM_RCAPDAT3=1074102820,
PWM0_PWM_FCAPDAT3=1074102824,
PWM0_PWM_RCAPDAT4=1074102828,
PWM0_PWM_FCAPDAT4=1074102832,
PWM0_PWM_RCAPDAT5=1074102836,
PWM0_PWM_FCAPDAT5=1074102840,
PWM0_PWM_PDMACTL=1074102844,
PWM0_PWM_PDMACAP0_1=1074102848,
PWM0_PWM_PDMACAP2_3=1074102852,
PWM0_PWM_PDMACAP4_5=1074102856,
PWM0_PWM_CAPIEN=1074102864,
PWM0_PWM_CAPIF=1074102868,
PWM0_PWM_PBUF0=1074103044,
PWM0_PWM_PBUF2=1074103052,
PWM0_PWM_PBUF4=1074103060,
PWM0_PWM_CMPBUF0=1074103068,
PWM0_PWM_CMPBUF1=1074103072,
PWM0_PWM_CMPBUF2=1074103076,
PWM0_PWM_CMPBUF3=1074103080,
PWM0_PWM_CMPBUF4=1074103084,
PWM0_PWM_CMPBUF5=1074103088,
PWM1_PWM_CTL0=1074106368,
PWM1_PWM_CTL1=1074106372,
PWM1_PWM_CLKSRC=1074106384,
PWM1_PWM_CLKPSC0_1=1074106388,
PWM1_PWM_CLKPSC2_3=1074106392,
PWM1_PWM_CLKPSC4_5=1074106396,
PWM1_PWM_CNTEN=1074106400,
PWM1_PWM_CNTCLR=1074106404,
PWM1_PWM_PERIOD0=1074106416,
PWM1_PWM_PERIOD2=1074106424,
PWM1_PWM_PERIOD4=1074106432,
PWM1_PWM_CMPDAT0=1074106448,
PWM1_PWM_CMPDAT1=1074106452,
PWM1_PWM_CMPDAT2=1074106456,
PWM1_PWM_CMPDAT3=1074106460,
PWM1_PWM_CMPDAT4=1074106464,
PWM1_PWM_CMPDAT5=1074106468,
PWM1_PWM_DTCTL0_1=1074106480,
PWM1_PWM_DTCTL2_3=1074106484,
PWM1_PWM_DTCTL4_5=1074106488,
PWM1_PWM_CNT0=1074106512,
PWM1_PWM_CNT2=1074106520,
PWM1_PWM_CNT4=1074106528,
PWM1_PWM_WGCTL0=1074106544,
PWM1_PWM_WGCTL1=1074106548,
PWM1_PWM_MSKEN=1074106552,
PWM1_PWM_MSK=1074106556,
PWM1_PWM_BNF=1074106560,
PWM1_PWM_FAILBRK=1074106564,
PWM1_PWM_BRKCTL0_1=1074106568,
PWM1_PWM_BRKCTL2_3=1074106572,
PWM1_PWM_BRKCTL4_5=1074106576,
PWM1_PWM_POLCTL=1074106580,
PWM1_PWM_POEN=1074106584,
PWM1_PWM_SWBRK=1074106588,
PWM1_PWM_INTEN0=1074106592,
PWM1_PWM_INTEN1=1074106596,
PWM1_PWM_INTSTS0=1074106600,
PWM1_PWM_INTSTS1=1074106604,
PWM1_PWM_EADCTS0=1074106616,
PWM1_PWM_EADCTS1=1074106620,
PWM1_PWM_SSCTL=1074106640,
PWM1_PWM_SSTRG=1074106644,
PWM1_PWM_STATUS=1074106656,
PWM1_PWM_CAPINEN=1074106880,
PWM1_PWM_CAPCTL=1074106884,
PWM1_PWM_CAPSTS=1074106888,
PWM1_PWM_RCAPDAT0=1074106892,
PWM1_PWM_FCAPDAT0=1074106896,
PWM1_PWM_RCAPDAT1=1074106900,
PWM1_PWM_FCAPDAT1=1074106904,
PWM1_PWM_RCAPDAT2=1074106908,
PWM1_PWM_FCAPDAT2=1074106912,
PWM1_PWM_RCAPDAT3=1074106916,
PWM1_PWM_FCAPDAT3=1074106920,
PWM1_PWM_RCAPDAT4=1074106924,
PWM1_PWM_FCAPDAT4=1074106928,
PWM1_PWM_RCAPDAT5=1074106932,
PWM1_PWM_FCAPDAT5=1074106936,
PWM1_PWM_PDMACTL=1074106940,
PWM1_PWM_PDMACAP0_1=1074106944,
PWM1_PWM_PDMACAP2_3=1074106948,
PWM1_PWM_PDMACAP4_5=1074106952,
PWM1_PWM_CAPIEN=1074106960,
PWM1_PWM_CAPIF=1074106964,
PWM1_PWM_PBUF0=1074107140,
PWM1_PWM_PBUF2=1074107148,
PWM1_PWM_PBUF4=1074107156,
PWM1_PWM_CMPBUF0=1074107164,
PWM1_PWM_CMPBUF1=1074107168,
PWM1_PWM_CMPBUF2=1074107172,
PWM1_PWM_CMPBUF3=1074107176,
PWM1_PWM_CMPBUF4=1074107180,
PWM1_PWM_CMPBUF5=1074107184,
UART0_UART_DAT=1074200576,
UART0_UART_INTEN=1074200580,
UART0_UART_FIFO=1074200584,
UART0_UART_LINE=1074200588,
UART0_UART_MODEM=1074200592,
UART0_UART_MODEMSTS=1074200596,
UART0_UART_FIFOSTS=1074200600,
UART0_UART_INTSTS=1074200604,
UART0_UART_TOUT=1074200608,
UART0_UART_BAUD=1074200612,
UART0_UART_IRDA=1074200616,
UART0_UART_ALTCTL=1074200620,
UART0_UART_FUNCSEL=1074200624,
UART0_UART_LINCTL=1074200628,
UART0_UART_LINSTS=1074200632,
UART0_UART_BRCOMP=1074200636,
UART0_UART_WKCTL=1074200640,
UART0_UART_WKSTS=1074200644,
UART0_UART_DWKCOMP=1074200648,
UART1_UART_DAT=1074204672,
UART1_UART_INTEN=1074204676,
UART1_UART_FIFO=1074204680,
UART1_UART_LINE=1074204684,
UART1_UART_MODEM=1074204688,
UART1_UART_MODEMSTS=1074204692,
UART1_UART_FIFOSTS=1074204696,
UART1_UART_INTSTS=1074204700,
UART1_UART_TOUT=1074204704,
UART1_UART_BAUD=1074204708,
UART1_UART_IRDA=1074204712,
UART1_UART_ALTCTL=1074204716,
UART1_UART_FUNCSEL=1074204720,
UART1_UART_LINCTL=1074204724,
UART1_UART_LINSTS=1074204728,
UART1_UART_BRCOMP=1074204732,
UART1_UART_WKCTL=1074204736,
UART1_UART_WKSTS=1074204740,
UART1_UART_DWKCOMP=1074204744,
UART2_UART_DAT=1074208768,
UART2_UART_INTEN=1074208772,
UART2_UART_FIFO=1074208776,
UART2_UART_LINE=1074208780,
UART2_UART_MODEM=1074208784,
UART2_UART_MODEMSTS=1074208788,
UART2_UART_FIFOSTS=1074208792,
UART2_UART_INTSTS=1074208796,
UART2_UART_TOUT=1074208800,
UART2_UART_BAUD=1074208804,
UART2_UART_IRDA=1074208808,
UART2_UART_ALTCTL=1074208812,
UART2_UART_FUNCSEL=1074208816,
UART2_UART_LINCTL=1074208820,
UART2_UART_LINSTS=1074208824,
UART2_UART_BRCOMP=1074208828,
UART2_UART_WKCTL=1074208832,
UART2_UART_WKSTS=1074208836,
UART2_UART_DWKCOMP=1074208840,
QSPI0_SPIx_CTL=1074135040,
QSPI0_SPIx_CLKDIV=1074135044,
QSPI0_SPIx_SSCTL=1074135048,
QSPI0_SPIx_PDMACTL=1074135052,
QSPI0_SPIx_FIFOCTL=1074135056,
QSPI0_SPIx_STATUS=1074135060,
QSPI0_SPIx_TX=1074135072,
QSPI0_SPIx_RX=1074135088,
QSPI0_SPIx_I2SCTL=1074135136,
QSPI0_SPIx_I2SCLK=1074135140,
QSPI0_SPIx_I2SSTS=1074135144,
SPI0_SPIx_CTL=1074139136,
SPI0_SPIx_CLKDIV=1074139140,
SPI0_SPIx_SSCTL=1074139144,
SPI0_SPIx_PDMACTL=1074139148,
SPI0_SPIx_FIFOCTL=1074139152,
SPI0_SPIx_STATUS=1074139156,
SPI0_SPIx_TX=1074139168,
SPI0_SPIx_RX=1074139184,
SPI0_SPIx_I2SCTL=1074139232,
SPI0_SPIx_I2SCLK=1074139236,
SPI0_SPIx_I2SSTS=1074139240,
I2C0_I2C_CTL0=1074266112,
I2C0_I2C_ADDR0=1074266116,
I2C0_I2C_DAT=1074266120,
I2C0_I2C_STATUS0=1074266124,
I2C0_I2C_CLKDIV=1074266128,
I2C0_I2C_TOCTL=1074266132,
I2C0_I2C_ADDR1=1074266136,
I2C0_I2C_ADDR2=1074266140,
I2C0_I2C_ADDR3=1074266144,
I2C0_I2C_ADDRMSK0=1074266148,
I2C0_I2C_ADDRMSK1=1074266152,
I2C0_I2C_ADDRMSK2=1074266156,
I2C0_I2C_ADDRMSK3=1074266160,
I2C0_I2C_WKCTL=1074266172,
I2C0_I2C_WKSTS=1074266176,
I2C0_I2C_CTL1=1074266180,
I2C0_I2C_STATUS1=1074266184,
I2C0_I2C_TMCTL=1074266188,
I2C0_I2C_BUSCTL=1074266192,
I2C0_I2C_BUSTCTL=1074266196,
I2C0_I2C_BUSSTS=1074266200,
I2C0_I2C_PKTSIZE=1074266204,
I2C0_I2C_PKTCRC=1074266208,
I2C0_I2C_BUSTOUT=1074266212,
I2C0_I2C_CLKTOUT=1074266216,
I2C1_I2C_CTL0=1074270208,
I2C1_I2C_ADDR0=1074270212,
I2C1_I2C_DAT=1074270216,
I2C1_I2C_STATUS0=1074270220,
I2C1_I2C_CLKDIV=1074270224,
I2C1_I2C_TOCTL=1074270228,
I2C1_I2C_ADDR1=1074270232,
I2C1_I2C_ADDR2=1074270236,
I2C1_I2C_ADDR3=1074270240,
I2C1_I2C_ADDRMSK0=1074270244,
I2C1_I2C_ADDRMSK1=1074270248,
I2C1_I2C_ADDRMSK2=1074270252,
I2C1_I2C_ADDRMSK3=1074270256,
I2C1_I2C_WKCTL=1074270268,
I2C1_I2C_WKSTS=1074270272,
I2C1_I2C_CTL1=1074270276,
I2C1_I2C_STATUS1=1074270280,
I2C1_I2C_TMCTL=1074270284,
I2C1_I2C_BUSCTL=1074270288,
I2C1_I2C_BUSTCTL=1074270292,
I2C1_I2C_BUSSTS=1074270296,
I2C1_I2C_PKTSIZE=1074270300,
I2C1_I2C_PKTCRC=1074270304,
I2C1_I2C_BUSTOUT=1074270308,
I2C1_I2C_CLKTOUT=1074270312,
UUART0_UUART_CTL=1074593792,
UUART0_UUART_INTEN=1074593796,
UUART0_UUART_BRGEN=1074593800,
UUART0_UUART_DATIN0=1074593808,
UUART0_UUART_CTLIN0=1074593824,
UUART0_UUART_CLKIN=1074593832,
UUART0_UUART_LINECTL=1074593836,
UUART0_UUART_TXDAT=1074593840,
UUART0_UUART_RXDAT=1074593844,
UUART0_UUART_BUFCTL=1074593848,
UUART0_UUART_BUFSTS=1074593852,
UUART0_UUART_PDMACTL=1074593856,
UUART0_UUART_WKCTL=1074593876,
UUART0_UUART_WKSTS=1074593880,
UUART0_UUART_PROTCTL=1074593884,
UUART0_UUART_PROTIEN=1074593888,
UUART0_UUART_PROTSTS=1074593892,
UUART1_UUART_CTL=1074597888,
UUART1_UUART_INTEN=1074597892,
UUART1_UUART_BRGEN=1074597896,
UUART1_UUART_DATIN0=1074597904,
UUART1_UUART_CTLIN0=1074597920,
UUART1_UUART_CLKIN=1074597928,
UUART1_UUART_LINECTL=1074597932,
UUART1_UUART_TXDAT=1074597936,
UUART1_UUART_RXDAT=1074597940,
UUART1_UUART_BUFCTL=1074597944,
UUART1_UUART_BUFSTS=1074597948,
UUART1_UUART_PDMACTL=1074597952,
UUART1_UUART_WKCTL=1074597972,
UUART1_UUART_WKSTS=1074597976,
UUART1_UUART_PROTCTL=1074597980,
UUART1_UUART_PROTIEN=1074597984,
UUART1_UUART_PROTSTS=1074597988,
UUART2_UUART_CTL=1074601984,
UUART2_UUART_INTEN=1074601988,
UUART2_UUART_BRGEN=1074601992,
UUART2_UUART_DATIN0=1074602000,
UUART2_UUART_CTLIN0=1074602016,
UUART2_UUART_CLKIN=1074602024,
UUART2_UUART_LINECTL=1074602028,
UUART2_UUART_TXDAT=1074602032,
UUART2_UUART_RXDAT=1074602036,
UUART2_UUART_BUFCTL=1074602040,
UUART2_UUART_BUFSTS=1074602044,
UUART2_UUART_PDMACTL=1074602048,
UUART2_UUART_WKCTL=1074602068,
UUART2_UUART_WKSTS=1074602072,
UUART2_UUART_PROTCTL=1074602076,
UUART2_UUART_PROTIEN=1074602080,
UUART2_UUART_PROTSTS=1074602084,
USPI0_USPI_CTL=1074593792,
USPI0_USPI_INTEN=1074593796,
USPI0_USPI_BRGEN=1074593800,
USPI0_USPI_DATIN0=1074593808,
USPI0_USPI_CTLIN0=1074593824,
USPI0_USPI_CLKIN=1074593832,
USPI0_USPI_LINECTL=1074593836,
USPI0_USPI_TXDAT=1074593840,
USPI0_USPI_RXDAT=1074593844,
USPI0_USPI_BUFCTL=1074593848,
USPI0_USPI_BUFSTS=1074593852,
USPI0_USPI_PDMACTL=1074593856,
USPI0_USPI_WKCTL=1074593876,
USPI0_USPI_WKSTS=1074593880,
USPI0_USPI_PROTCTL=1074593884,
USPI0_USPI_PROTIEN=1074593888,
USPI0_USPI_PROTSTS=1074593892,
USPI1_USPI_CTL=1074597888,
USPI1_USPI_INTEN=1074597892,
USPI1_USPI_BRGEN=1074597896,
USPI1_USPI_DATIN0=1074597904,
USPI1_USPI_CTLIN0=1074597920,
USPI1_USPI_CLKIN=1074597928,
USPI1_USPI_LINECTL=1074597932,
USPI1_USPI_TXDAT=1074597936,
USPI1_USPI_RXDAT=1074597940,
USPI1_USPI_BUFCTL=1074597944,
USPI1_USPI_BUFSTS=1074597948,
USPI1_USPI_PDMACTL=1074597952,
USPI1_USPI_WKCTL=1074597972,
USPI1_USPI_WKSTS=1074597976,
USPI1_USPI_PROTCTL=1074597980,
USPI1_USPI_PROTIEN=1074597984,
USPI1_USPI_PROTSTS=1074597988,
USPI2_USPI_CTL=1074601984,
USPI2_USPI_INTEN=1074601988,
USPI2_USPI_BRGEN=1074601992,
USPI2_USPI_DATIN0=1074602000,
USPI2_USPI_CTLIN0=1074602016,
USPI2_USPI_CLKIN=1074602024,
USPI2_USPI_LINECTL=1074602028,
USPI2_USPI_TXDAT=1074602032,
USPI2_USPI_RXDAT=1074602036,
USPI2_USPI_BUFCTL=1074602040,
USPI2_USPI_BUFSTS=1074602044,
USPI2_USPI_PDMACTL=1074602048,
USPI2_USPI_WKCTL=1074602068,
USPI2_USPI_WKSTS=1074602072,
USPI2_USPI_PROTCTL=1074602076,
USPI2_USPI_PROTIEN=1074602080,
USPI2_USPI_PROTSTS=1074602084,
UI2C0_UI2C_CTL=1074593792,
UI2C0_UI2C_BRGEN=1074593800,
UI2C0_UI2C_LINECTL=1074593836,
UI2C0_UI2C_TXDAT=1074593840,
UI2C0_UI2C_RXDAT=1074593844,
UI2C0_UI2C_DEVADDR0=1074593860,
UI2C0_UI2C_DEVADDR1=1074593864,
UI2C0_UI2C_ADDRMSK0=1074593868,
UI2C0_UI2C_ADDRMSK1=1074593872,
UI2C0_UI2C_WKCTL=1074593876,
UI2C0_UI2C_WKSTS=1074593880,
UI2C0_UI2C_PROTCTL=1074593884,
UI2C0_UI2C_PROTIEN=1074593888,
UI2C0_UI2C_PROTSTS=1074593892,
UI2C0_UI2C_ADMAT=1074593928,
UI2C0_UI2C_TMCTL=1074593932,
UI2C1_UI2C_CTL=1074597888,
UI2C1_UI2C_BRGEN=1074597896,
UI2C1_UI2C_LINECTL=1074597932,
UI2C1_UI2C_TXDAT=1074597936,
UI2C1_UI2C_RXDAT=1074597940,
UI2C1_UI2C_DEVADDR0=1074597956,
UI2C1_UI2C_DEVADDR1=1074597960,
UI2C1_UI2C_ADDRMSK0=1074597964,
UI2C1_UI2C_ADDRMSK1=1074597968,
UI2C1_UI2C_WKCTL=1074597972,
UI2C1_UI2C_WKSTS=1074597976,
UI2C1_UI2C_PROTCTL=1074597980,
UI2C1_UI2C_PROTIEN=1074597984,
UI2C1_UI2C_PROTSTS=1074597988,
UI2C1_UI2C_ADMAT=1074598024,
UI2C1_UI2C_TMCTL=1074598028,
UI2C2_UI2C_CTL=1074601984,
UI2C2_UI2C_BRGEN=1074601992,
UI2C2_UI2C_LINECTL=1074602028,
UI2C2_UI2C_TXDAT=1074602032,
UI2C2_UI2C_RXDAT=1074602036,
UI2C2_UI2C_DEVADDR0=1074602052,
UI2C2_UI2C_DEVADDR1=1074602056,
UI2C2_UI2C_ADDRMSK0=1074602060,
UI2C2_UI2C_ADDRMSK1=1074602064,
UI2C2_UI2C_WKCTL=1074602068,
UI2C2_UI2C_WKSTS=1074602072,
UI2C2_UI2C_PROTCTL=1074602076,
UI2C2_UI2C_PROTIEN=1074602080,
UI2C2_UI2C_PROTSTS=1074602084,
UI2C2_UI2C_ADMAT=1074602120,
UI2C2_UI2C_TMCTL=1074602124,
PSIO_PSIO_INTCTL=1074540544,
PSIO_PSIO_INTEN=1074540548,
PSIO_PSIO_INTSTS=1074540552,
PSIO_PSIO_TRANSTS=1074540556,
PSIO_PSIO_ISSTS=1074540560,
PSIO_PSIO_PDMACTL=1074540564,
PSIO_PSIO_PODAT=1074540568,
PSIO_PSIO_PIDAT=1074540572,
PSIO_PSIO_SC0CTL=1074540576,
PSIO_PSIO_SC1CTL=1074540584,
PSIO_PSIO_SC2CTL=1074540592,
PSIO_PSIO_SC3CTL=1074540600,
PSIO_PSIO_SC0SLOT=1074540580,
PSIO_PSIO_SC1SLOT=1074540588,
PSIO_PSIO_SC2SLOT=1074540596,
PSIO_PSIO_SC3SLOT=1074540604,
PSIO_PSIO0_GENCTL=1074540608,
PSIO_PSIO1_GENCTL=1074540640,
PSIO_PSIO2_GENCTL=1074540672,
PSIO_PSIO3_GENCTL=1074540704,
PSIO_PSIO4_GENCTL=1074540736,
PSIO_PSIO5_GENCTL=1074540768,
PSIO_PSIO6_GENCTL=1074540800,
PSIO_PSIO7_GENCTL=1074540832,
PSIO_PSIO0_DATCTL=1074540612,
PSIO_PSIO1_DATCTL=1074540644,
PSIO_PSIO2_DATCTL=1074540676,
PSIO_PSIO3_DATCTL=1074540708,
PSIO_PSIO4_DATCTL=1074540740,
PSIO_PSIO5_DATCTL=1074540772,
PSIO_PSIO6_DATCTL=1074540804,
PSIO_PSIO7_DATCTL=1074540836,
PSIO_PSIO0_INSTS=1074540616,
PSIO_PSIO1_INSTS=1074540648,
PSIO_PSIO2_INSTS=1074540680,
PSIO_PSIO3_INSTS=1074540712,
PSIO_PSIO4_INSTS=1074540744,
PSIO_PSIO5_INSTS=1074540776,
PSIO_PSIO6_INSTS=1074540808,
PSIO_PSIO7_INSTS=1074540840,
PSIO_PSIO0_INDAT=1074540620,
PSIO_PSIO1_INDAT=1074540652,
PSIO_PSIO2_INDAT=1074540684,
PSIO_PSIO3_INDAT=1074540716,
PSIO_PSIO4_INDAT=1074540748,
PSIO_PSIO5_INDAT=1074540780,
PSIO_PSIO6_INDAT=1074540812,
PSIO_PSIO7_INDAT=1074540844,
PSIO_PSIO0_OUTDAT=1074540624,
PSIO_PSIO1_OUTDAT=1074540656,
PSIO_PSIO2_OUTDAT=1074540688,
PSIO_PSIO3_OUTDAT=1074540720,
PSIO_PSIO4_OUTDAT=1074540752,
PSIO_PSIO5_OUTDAT=1074540784,
PSIO_PSIO6_OUTDAT=1074540816,
PSIO_PSIO7_OUTDAT=1074540848,
PSIO_PSIO0_CPCTL0=1074540628,
PSIO_PSIO1_CPCTL0=1074540660,
PSIO_PSIO2_CPCTL0=1074540692,
PSIO_PSIO3_CPCTL0=1074540724,
PSIO_PSIO4_CPCTL0=1074540756,
PSIO_PSIO5_CPCTL0=1074540788,
PSIO_PSIO6_CPCTL0=1074540820,
PSIO_PSIO7_CPCTL0=1074540852,
PSIO_PSIO0_CPCTL1=1074540632,
PSIO_PSIO1_CPCTL1=1074540664,
PSIO_PSIO2_CPCTL1=1074540696,
PSIO_PSIO3_CPCTL1=1074540728,
PSIO_PSIO4_CPCTL1=1074540760,
PSIO_PSIO5_CPCTL1=1074540792,
PSIO_PSIO6_CPCTL1=1074540824,
PSIO_PSIO7_CPCTL1=1074540856,
EBI_EBI_CTL0=1073807360,
EBI_EBI_TCTL0=1073807364,
EBI_EBI_CTL1=1073807376,
EBI_EBI_TCTL1=1073807380,
EBI_EBI_CTL2=1073807392,
EBI_EBI_TCTL2=1073807396,
USBD_USBD_INTEN=1074528256,
USBD_USBD_INTSTS=1074528260,
USBD_USBD_FADDR=1074528264,
USBD_USBD_EPSTS=1074528268,
USBD_USBD_ATTR=1074528272,
USBD_USBD_VBUSDET=1074528276,
USBD_USBD_STBUFSEG=1074528280,
USBD_USBD_EPSTS0=1074528288,
USBD_USBD_EPSTS1=1074528292,
USBD_USBD_LPMATTR=1074528392,
USBD_USBD_FN=1074528396,
USBD_USBD_SE0=1074528400,
USBD_USBD_BUFSEG0=1074529536,
USBD_USBD_MXPLD0=1074529540,
USBD_USBD_CFG0=1074529544,
USBD_USBD_CFGP0=1074529548,
USBD_USBD_BUFSEG1=1074529552,
USBD_USBD_MXPLD1=1074529556,
USBD_USBD_CFG1=1074529560,
USBD_USBD_CFGP1=1074529564,
USBD_USBD_BUFSEG2=1074529568,
USBD_USBD_MXPLD2=1074529572,
USBD_USBD_CFG2=1074529576,
USBD_USBD_CFGP2=1074529580,
USBD_USBD_BUFSEG3=1074529584,
USBD_USBD_MXPLD3=1074529588,
USBD_USBD_CFG3=1074529592,
USBD_USBD_CFGP3=1074529596,
USBD_USBD_BUFSEG4=1074529600,
USBD_USBD_MXPLD4=1074529604,
USBD_USBD_CFG4=1074529608,
USBD_USBD_CFGP4=1074529612,
USBD_USBD_BUFSEG5=1074529616,
USBD_USBD_MXPLD5=1074529620,
USBD_USBD_CFG5=1074529624,
USBD_USBD_CFGP5=1074529628,
USBD_USBD_BUFSEG6=1074529632,
USBD_USBD_MXPLD6=1074529636,
USBD_USBD_CFG6=1074529640,
USBD_USBD_CFGP6=1074529644,
USBD_USBD_BUFSEG7=1074529648,
USBD_USBD_MXPLD7=1074529652,
USBD_USBD_CFG7=1074529656,
USBD_USBD_CFGP7=1074529660,
USBD_USBD_BUFSEG8=1074529664,
USBD_USBD_MXPLD8=1074529668,
USBD_USBD_CFG8=1074529672,
USBD_USBD_CFGP8=1074529676,
USBD_USBD_BUFSEG9=1074529680,
USBD_USBD_MXPLD9=1074529684,
USBD_USBD_CFG9=1074529688,
USBD_USBD_CFGP9=1074529692,
USBD_USBD_BUFSEG10=1074529696,
USBD_USBD_MXPLD10=1074529700,
USBD_USBD_CFG10=1074529704,
USBD_USBD_CFGP10=1074529708,
USBD_USBD_BUFSEG11=1074529712,
USBD_USBD_MXPLD11=1074529716,
USBD_USBD_CFG11=1074529720,
USBD_USBD_CFGP11=1074529724,
CRC_CRC_CTL=1073942528,
CRC_CRC_DAT=1073942532,
CRC_CRC_SEED=1073942536,
CRC_CRC_CHECKSUM=1073942540,
CRYPTO_CRYPTO_INTEN=1342701568,
CRYPTO_CRYPTO_INTSTS=1342701572,
CRYPTO_CRYPTO_PRNG_CTL=1342701576,
CRYPTO_CRYPTO_PRNG_SEED=1342701580,
CRYPTO_CRYPTO_PRNG_KEY0=1342701584,
CRYPTO_CRYPTO_PRNG_KEY1=1342701588,
CRYPTO_CRYPTO_PRNG_KEY2=1342701592,
CRYPTO_CRYPTO_PRNG_KEY3=1342701596,
CRYPTO_CRYPTO_PRNG_KEY4=1342701600,
CRYPTO_CRYPTO_PRNG_KEY5=1342701604,
CRYPTO_CRYPTO_PRNG_KEY6=1342701608,
CRYPTO_CRYPTO_PRNG_KEY7=1342701612,
CRYPTO_CRYPTO_AES_FDBCK0=1342701648,
CRYPTO_CRYPTO_AES_FDBCK1=1342701652,
CRYPTO_CRYPTO_AES_FDBCK2=1342701656,
CRYPTO_CRYPTO_AES_FDBCK3=1342701660,
CRYPTO_CRYPTO_AES_CTL=1342701824,
CRYPTO_CRYPTO_AES_STS=1342701828,
CRYPTO_CRYPTO_AES_DATIN=1342701832,
CRYPTO_CRYPTO_AES_DATOUT=1342701836,
CRYPTO_CRYPTO_AES_KEY0=1342701840,
CRYPTO_CRYPTO_AES_KEY1=1342701844,
CRYPTO_CRYPTO_AES_KEY2=1342701848,
CRYPTO_CRYPTO_AES_KEY3=1342701852,
CRYPTO_CRYPTO_AES_KEY4=1342701856,
CRYPTO_CRYPTO_AES_KEY5=1342701860,
CRYPTO_CRYPTO_AES_KEY6=1342701864,
CRYPTO_CRYPTO_AES_KEY7=1342701868,
CRYPTO_CRYPTO_AES_IV0=1342701872,
CRYPTO_CRYPTO_AES_IV1=1342701876,
CRYPTO_CRYPTO_AES_IV2=1342701880,
CRYPTO_CRYPTO_AES_IV3=1342701884,
CRYPTO_CRYPTO_AES_SADDR=1342701888,
CRYPTO_CRYPTO_AES_DADDR=1342701892,
CRYPTO_CRYPTO_AES_CNT=1342701896,
EADC_EADC_DAT0=1074016256,
EADC_EADC_DAT1=1074016260,
EADC_EADC_DAT2=1074016264,
EADC_EADC_DAT3=1074016268,
EADC_EADC_DAT4=1074016272,
EADC_EADC_DAT5=1074016276,
EADC_EADC_DAT6=1074016280,
EADC_EADC_DAT7=1074016284,
EADC_EADC_DAT8=1074016288,
EADC_EADC_DAT9=1074016292,
EADC_EADC_DAT10=1074016296,
EADC_EADC_DAT11=1074016300,
EADC_EADC_DAT12=1074016304,
EADC_EADC_DAT13=1074016308,
EADC_EADC_DAT14=1074016312,
EADC_EADC_DAT15=1074016316,
EADC_EADC_DAT16=1074016320,
EADC_EADC_DAT17=1074016324,
EADC_EADC_DAT18=1074016328,
EADC_EADC_CURDAT=1074016332,
EADC_EADC_CTL=1074016336,
EADC_EADC_SWTRG=1074016340,
EADC_EADC_PENDSTS=1074016344,
EADC_EADC_OVSTS=1074016348,
EADC_EADC_SCTL0=1074016384,
EADC_EADC_SCTL1=1074016388,
EADC_EADC_SCTL2=1074016392,
EADC_EADC_SCTL3=1074016396,
EADC_EADC_SCTL4=1074016400,
EADC_EADC_SCTL5=1074016404,
EADC_EADC_SCTL6=1074016408,
EADC_EADC_SCTL7=1074016412,
EADC_EADC_SCTL8=1074016416,
EADC_EADC_SCTL9=1074016420,
EADC_EADC_SCTL10=1074016424,
EADC_EADC_SCTL11=1074016428,
EADC_EADC_SCTL12=1074016432,
EADC_EADC_SCTL13=1074016436,
EADC_EADC_SCTL14=1074016440,
EADC_EADC_SCTL15=1074016444,
EADC_EADC_SCTL16=1074016448,
EADC_EADC_SCTL17=1074016452,
EADC_EADC_SCTL18=1074016456,
EADC_EADC_INTSRC0=1074016464,
EADC_EADC_INTSRC1=1074016468,
EADC_EADC_INTSRC2=1074016472,
EADC_EADC_INTSRC3=1074016476,
EADC_EADC_CMP0=1074016480,
EADC_EADC_CMP1=1074016484,
EADC_EADC_CMP2=1074016488,
EADC_EADC_CMP3=1074016492,
EADC_EADC_STATUS0=1074016496,
EADC_EADC_STATUS1=1074016500,
EADC_EADC_STATUS2=1074016504,
EADC_EADC_STATUS3=1074016508,
EADC_EADC_PWRCTL=1074016528,
EADC_EADC_PDMACTL=1074016560,
EADC_EADC_M0CTL1=1074016576,
EADC_EADC_M1CTL1=1074016580,
EADC_EADC_M2CTL1=1074016584,
EADC_EADC_M3CTL1=1074016588,
EADC_EADC_M4CTL1=1074016592,
EADC_EADC_M5CTL1=1074016596,
EADC_EADC_M6CTL1=1074016600,
EADC_EADC_M7CTL1=1074016604,
EADC_EADC_M8CTL1=1074016608,
EADC_EADC_M9CTL1=1074016612,
EADC_EADC_M10CTL1=1074016616,
EADC_EADC_M11CTL1=1074016620,
EADC_EADC_M12CTL1=1074016624,
EADC_EADC_M13CTL1=1074016628,
EADC_EADC_M14CTL1=1074016632,
EADC_EADC_M15CTL1=1074016636,
EADC_EADC_OFFSETCAL=1074016776,
DAC_DAC0_CTL=1074032640,
DAC_DAC0_SWTRG=1074032644,
DAC_DAC0_DAT=1074032648,
DAC_DAC0_DATOUT=1074032652,
DAC_DAC0_STATUS=1074032656,
DAC_DAC0_TCTL=1074032660,
ACMP01_ACMP_CTL0=1074024448,
ACMP01_ACMP_CTL1=1074024452,
ACMP01_ACMP_STATUS=1074024456,
ACMP01_ACMP_VREF=1074024460,
OPA_OPA_CTL=1074028544,
OPA_OPA_STATUS=1074028548,
OPA_OPA_CALCTL=1074028552,
OPA_OPA_CALST=1074028556,
SC0_SC_DAT=1074331648,
SC0_SC_CTL=1074331652,
SC0_SC_ALTCTL=1074331656,
SC0_SC_EGT=1074331660,
SC0_SC_RXTOUT=1074331664,
SC0_SC_ETUCTL=1074331668,
SC0_SC_INTEN=1074331672,
SC0_SC_INTSTS=1074331676,
SC0_SC_STATUS=1074331680,
SC0_SC_PINCTL=1074331684,
SC0_SC_TMRCTL0=1074331688,
SC0_SC_TMRCTL1=1074331692,
SC0_SC_TMRCTL2=1074331696,
SC0_SC_UARTCTL=1074331700,
SC0_SC_ACTCTL=1074331724,
}
g_M251_regs=REG
function read_M251_Registers(e,e,e,e)
local e={}
e["SYS_SYS_GPA_MFPL"],
e["SYS_SYS_GPA_MFPH"],
e["SYS_SYS_GPB_MFPL"],
e["SYS_SYS_GPB_MFPH"],
e["SYS_SYS_GPC_MFPL"],
e["SYS_SYS_GPC_MFPH"]=ice:ReadMem32(g_M251_regs.SYS_SYS_GPA_MFPL,6)
e["SYS_SYS_GPD_MFPL"],
e["SYS_SYS_GPD_MFPH"],
e["SYS_SYS_GPE_MFPL"],
e["SYS_SYS_GPE_MFPH"],
e["SYS_SYS_GPF_MFPL"],
e["SYS_SYS_GPF_MFPH"]=ice:ReadMem32(g_M251_regs.SYS_SYS_GPD_MFPL,6)
e["SYS_SYS_HIRCTRIMCTL"],
e["SYS_SYS_MIRCTRIMCTL"]=ice:ReadMemMulti(g_M251_regs.SYS_SYS_HIRCTRIMCTL,
g_M251_regs.SYS_SYS_MIRCTRIMCTL)
e["CLK_CLK_PWRCTL"],
e["CLK_CLK_AHBCLK"],
e["CLK_CLK_APBCLK0"],
e["CLK_CLK_APBCLK1"],
e["CLK_CLK_CLKSEL0"],
e["CLK_CLK_CLKSEL1"],
e["CLK_CLK_CLKSEL2"],
e["CLK_CLK_CLKSEL3"],
e["CLK_CLK_CLKDIV0"],
e["CLK_CLK_CLKDIV1"]=ice:ReadMem32(g_M251_regs.CLK_CLK_PWRCTL,10)
e["CLK_CLK_CLKDIV4"],
e["CLK_CLK_PCLKDIV"],
e["CLK_CLK_PLLCTL"],
e["CLK_CLK_CLKOCTL"]=ice:ReadMemMulti(g_M251_regs.CLK_CLK_CLKDIV4,
g_M251_regs.CLK_CLK_PCLKDIV,
g_M251_regs.CLK_CLK_PLLCTL,
g_M251_regs.CLK_CLK_CLKOCTL)
e["GPIO_PA_MODE"],
e["GPIO_PA_DINOFF"],
e["GPIO_PA_DOUT"],
e["GPIO_PA_DATMSK"],
e["GPIO_PA_PIN"]=ice:ReadMem32(g_M251_regs.GPIO_PA_MODE,5)
e["GPIO_PB_MODE"],
e["GPIO_PB_DINOFF"],
e["GPIO_PB_DOUT"],
e["GPIO_PB_DATMSK"],
e["GPIO_PB_PIN"]=ice:ReadMem32(g_M251_regs.GPIO_PB_MODE,5)
e["GPIO_PC_MODE"],
e["GPIO_PC_DINOFF"],
e["GPIO_PC_DOUT"],
e["GPIO_PC_DATMSK"],
e["GPIO_PC_PIN"]=ice:ReadMem32(g_M251_regs.GPIO_PC_MODE,5)
e["GPIO_PD_MODE"],
e["GPIO_PD_DINOFF"],
e["GPIO_PD_DOUT"],
e["GPIO_PD_DATMSK"],
e["GPIO_PD_PIN"]=ice:ReadMem32(g_M251_regs.GPIO_PD_MODE,5)
e["GPIO_PE_MODE"],
e["GPIO_PE_DINOFF"],
e["GPIO_PE_DOUT"],
e["GPIO_PE_DATMSK"],
e["GPIO_PE_PIN"]=ice:ReadMem32(g_M251_regs.GPIO_PE_MODE,5)
e["GPIO_PF_MODE"],
e["GPIO_PF_DINOFF"],
e["GPIO_PF_DOUT"],
e["GPIO_PF_DATMSK"],
e["GPIO_PF_PIN"]=ice:ReadMem32(g_M251_regs.GPIO_PF_MODE,5)
e["GPIO_PA_SLEWCTL"],
e["GPIO_PB_SLEWCTL"],
e["GPIO_PC_SLEWCTL"],
e["GPIO_PD_SLEWCTL"]=ice:ReadMemMulti(g_M251_regs.GPIO_PA_SLEWCTL,
g_M251_regs.GPIO_PB_SLEWCTL,
g_M251_regs.GPIO_PC_SLEWCTL,
g_M251_regs.GPIO_PD_SLEWCTL)
e["GPIO_PE_SLEWCTL"],
e["GPIO_PF_SLEWCTL"]=ice:ReadMemMulti(g_M251_regs.GPIO_PE_SLEWCTL,
g_M251_regs.GPIO_PF_SLEWCTL)
e["QSPI0_SPIx_CTL"],
e["QSPI0_SPIx_CLKDIV"]=ice:ReadMemMulti(g_M251_regs.QSPI0_SPIx_CTL,
g_M251_regs.QSPI0_SPIx_CLKDIV)
e["SPI0_SPIx_CTL"],
e["SPI0_SPIx_CLKDIV"],
e["SPI0_SPIx_I2SCTL"],
e["SPI0_SPIx_I2SCLK"]=ice:ReadMemMulti(g_M251_regs.SPI0_SPIx_CTL,
g_M251_regs.SPI0_SPIx_CLKDIV,
g_M251_regs.SPI0_SPIx_I2SCTL,
g_M251_regs.SPI0_SPIx_I2SCLK)
e["I2C0_I2C_CTL0"],
e["I2C0_I2C_CLKDIV"],
e["I2C1_I2C_CTL0"],
e["I2C1_I2C_CLKDIV"]=ice:ReadMemMulti(g_M251_regs.I2C0_I2C_CTL0,
g_M251_regs.I2C0_I2C_CLKDIV,
g_M251_regs.I2C1_I2C_CTL0,
g_M251_regs.I2C1_I2C_CLKDIV)
e["UART0_UART_BAUD"],
e["UART1_UART_BAUD"],
e["UART2_UART_BAUD"]=ice:ReadMemMulti(g_M251_regs.UART0_UART_BAUD,
g_M251_regs.UART1_UART_BAUD,
g_M251_regs.UART2_UART_BAUD)
g_M251_regs.USCI0_USCI_CTL=g_M251_regs.UUART0_UUART_CTL
g_M251_regs.USCI0_USCI_BRGEN=g_M251_regs.UUART0_UUART_BRGEN
g_M251_regs.USCI0_USCI_PROTCTL=g_M251_regs.UUART0_UUART_PROTCTL
g_M251_regs.USCI1_USCI_CTL=g_M251_regs.UUART0_UUART_CTL
g_M251_regs.USCI1_USCI_BRGEN=g_M251_regs.UUART0_UUART_BRGEN
g_M251_regs.USCI1_USCI_PROTCTL=g_M251_regs.UUART0_UUART_PROTCTL
g_M251_regs.USCI1_USCI_CTL=g_M251_regs.UUART0_UUART_CTL
g_M251_regs.USCI1_USCI_BRGEN=g_M251_regs.UUART0_UUART_BRGEN
g_M251_regs.USCI1_USCI_PROTCTL=g_M251_regs.UUART0_UUART_PROTCTL
e["USCI0_USCI_CTL"],
e["USCI0_USCI_BRGEN"],
e["USCI0_USCI_PROTCTL"]=ice:ReadMemMulti(g_M251_regs.USCI0_USCI_CTL,
g_M251_regs.USCI0_USCI_BRGEN,
g_M251_regs.USCI0_USCI_PROTCTL)
e["USCI1_USCI_CTL"],
e["USCI1_USCI_BRGEN"],
e["USCI1_USCI_PROTCTL"]=ice:ReadMemMulti(g_M251_regs.USCI1_USCI_CTL,
g_M251_regs.USCI1_USCI_BRGEN,
g_M251_regs.USCI1_USCI_PROTCTL)
e["USCI1_USCI_CTL"],
e["USCI1_USCI_BRGEN"],
e["USCI1_USCI_PROTCTL"]=ice:ReadMemMulti(g_M251_regs.USCI1_USCI_CTL,
g_M251_regs.USCI1_USCI_BRGEN,
g_M251_regs.USCI1_USCI_PROTCTL)
e["TMR01_TIMER0_CTL"],
e["TMR01_TIMER1_CTL"],
e["TMR23_TIMER2_CTL"],
e["TMR23_TIMER3_CTL"]=ice:ReadMemMulti(g_M251_regs.TMR01_TIMER0_CTL,
g_M251_regs.TMR01_TIMER1_CTL,
g_M251_regs.TMR23_TIMER2_CTL,
g_M251_regs.TMR23_TIMER3_CTL)
e["SC0_SC_UARTCTL"],
e["SC0_SC_ETUCTL"],
e["SC0_SC_CTL"]=ice:ReadMemMulti(g_M251_regs.SC0_SC_UARTCTL,
g_M251_regs.SC0_SC_ETUCTL,
g_M251_regs.SC0_SC_CTL)
e["PWM0_PWM_CLKSRC"],
e["PWM1_PWM_CLKSRC"]=ice:ReadMemMulti(g_M251_regs.PWM0_PWM_CLKSRC,
g_M251_regs.PWM1_PWM_CLKSRC)
e["PWM0_PWM_CLKPSC0_1"],
e["PWM0_PWM_CLKPSC2_3"],
e["PWM0_PWM_CLKPSC4_5"]=ice:ReadMem32(g_M251_regs.PWM0_PWM_CLKPSC0_1,3)
e["PWM1_PWM_CLKPSC0_1"],
e["PWM1_PWM_CLKPSC2_3"],
e["PWM1_PWM_CLKPSC4_5"]=ice:ReadMem32(g_M251_regs.PWM1_PWM_CLKPSC0_1,3)
e["PWM0_PWM_CNTEN"],
e["PWM1_PWM_CNTEN"]=ice:ReadMemMulti(g_M251_regs.PWM0_PWM_CNTEN,
g_M251_regs.PWM1_PWM_CNTEN)
e["BPWM0_BPWM_CLKSRC"],
e["BPWM0_BPWM_CLKPSC"],
e["BPWM1_BPWM_CLKSRC"],
e["BPWM1_BPWM_CLKPSC"]=ice:ReadMemMulti(g_M251_regs.BPWM0_BPWM_CLKSRC,
g_M251_regs.BPWM0_BPWM_CLKPSC,
g_M251_regs.BPWM1_BPWM_CLKSRC,
g_M251_regs.BPWM1_BPWM_CLKPSC)
e["BPWM0_BPWM_CNTEN"],
e["BPWM1_BPWM_CNTEN"]=ice:ReadMemMulti(g_M251_regs.BPWM0_BPWM_CNTEN,
g_M251_regs.BPWM1_BPWM_CNTEN)
e["OPA_OPA_CTL"],
e["EBI_EBI_CTL0"],
e["EBI_EBI_CTL1"],
e["EBI_EBI_CTL2"]=ice:ReadMemMulti(g_M251_regs.OPA_OPA_CTL,
g_M251_regs.EBI_EBI_CTL0,
g_M251_regs.EBI_EBI_CTL1,
g_M251_regs.EBI_EBI_CTL2)
return e
end
local n={
[0]=kPinDirection_In,
[1]=kPinDirection_PushPullOut,
[2]=kPinDirection_OpenDrainOut,
[3]=kPinDirection_Bi,
}
local m={
[0]="INPUT",
[1]="OUTPUT",
[2]="Open-Drain",
[3]="Quasi-bidirectional",
}
function get_mfp_regs(o,t,a)
local e
if a<8 then
e="L"
else
e="H"
end
local e={"SYS_SYS_GP"..t.."_MFP"..e}
return reg2str("Multi-Function register",g_M251_regs,o,e)
end
function get_clk_informnation(t,e)
return reg2str("Clock setting registers",g_M251_regs,t,e)
end
function get_LIRC_clock(a,o)
local t
local e
table.insert(o,"CLK_CLK_PWRCTL")
local a=ext.band(a["CLK_CLK_PWRCTL"],8)
if a==0 then
t=0
e="invalid internal <b>38.4kHz</b> low speed oscillator clock (see CLK_PWRCTL[3].LIRCEN)"
else
t=38400
e="internal <b>38.4kHz</b> low speed oscillator clock"
end
return t,e
end
function get_HIRC_clock(a,o)
local e
local t
table.insert(o,"CLK_CLK_PWRCTL")
local i=ext.band(a["CLK_CLK_PWRCTL"],4)
if i==0 then
e=0
t="invalid internal <b>48MHz</b> high speed oscillator clock (see CLK_PWRCTL[2].HIRCEN)"
else
table.insert(o,"SYS_SYS_HIRCTRIMCTL")
local a=ext.band(a["SYS_SYS_HIRCTRIMCTL"],3)
if a==0 then
e=48000000
t="internal <b>48MHz</b> high speed oscillator clock"
elseif a==1 then
e=48000000
t="internal <b>48MHz</b> high speed oscillator clock (auto trim)"
else
e=0
t="invalid HIRC trim frequency selection (see SYS_HIRCTRIMCTL[1:0].FREQSEL)"
end
end
return e,t
end
function get_MIRC_clock(o,a)
local e
local t
table.insert(a,"CLK_CLK_PWRCTL")
local i=ext.band(ext.rshift(o["CLK_CLK_PWRCTL"],19),1)
if i==0 then
e=0
t="invalid internal <b>4MHz</b> high speed oscillator clock (see CLK_PWRCTL[19].MIRCEN)"
else
table.insert(a,"SYS_SYS_MIRCTRIMCTL")
local a=ext.band(o["SYS_SYS_MIRCTRIMCTL"],3)
if a==0 then
e=4032000
t="internal <b>4MHz</b> high speed oscillator clock"
elseif a==2 then
e=4032000
t="internal <b>4MHz</b> high speed oscillator clock (auto trim)"
else
e=0
t="invalid MIRC trim frequency selection (see SYS_MIRCTRIMCTL[1:0].FREQSEL)"
end
end
return e,t
end
function get_LXT_clock(a,o)
local t
local e
table.insert(o,"CLK_CLK_PWRCTL")
local a=ext.band(a["CLK_CLK_PWRCTL"],2)
if a==0 then
t=0
e="invalid external <b>32.768kHz</b> low speed crystal clock (see CLK_PWRCTL[1].LXTEN)"
else
t=32768
e="external <b>32.768kHz</b> low speed crystal clock"
end
return t,e
end
function get_HXT_clock(a,o)
local t
local e
table.insert(o,"CLK_CLK_PWRCTL")
local a=ext.band(a["CLK_CLK_PWRCTL"],1)
if a==0 then
t=0
e="invalid external <b>4~32M</b> high speed crystal clock (see CLK_PWRCTL[0].HXTEN)"
else
t=12000000
e="external <b>4~32M</b> high speed crystal clock, <font color=blue>when</font> external input clock is <font color=blue>12M</font>"
end
return t,e
end
function get_PLL_clock(a,i)
local e
local t
table.insert(i,"CLK_CLK_PLLCTL")
if ext.band(ext.rshift(a["CLK_CLK_PLLCTL"],16),1)~=0 then
e=0
t="invalid <b>PLL</b> clock, PLL is in Power-down mode (see CLK_PLLCTL[16].PD)"
else
local o=ext.band(ext.rshift(a["CLK_CLK_PLLCTL"],19),3)
if(o==0)or(o==2)then
e,t=get_HXT_clock(a,i)
elseif o==1 then
e,t=get_HIRC_clock(a,i)
e=e/4
elseif o==3 then
e,t=get_MIRC_clock(a,i)
end
if e~=0 then
local o=ext.band(ext.rshift(a["CLK_CLK_PLLCTL"],17),1)
if o~=0 then
t=string.format("<b>PLL</b> clock (<b>%sHz</b>), bypassed from %s",val2str(e),t)
else
local o=ext.band(a["CLK_CLK_PLLCTL"],63)
if o==0 then o=64 end
local i=ext.band(ext.rshift(a["CLK_CLK_PLLCTL"],9),15)
if i==0 then i=16 end
local n={1,2,4,4}
local a=n[ext.band(ext.rshift(a["CLK_CLK_PLLCTL"],14),3)+1]
e=e*o/i/a
t=string.format("<b>PLL</b> clock (<b>%sHz</b>), from %s",val2str(e),t)
end
else
t="<b>PLL</b> clock from "..t
end
end
return e,t
end
function get_sys_clock(o,a,n)
local t
local e
table.insert(a,"CLK_CLK_CLKSEL0")
local i=ext.band(o["CLK_CLK_CLKSEL0"],7)
if i==0 then
t,e=get_HXT_clock(o,a)
elseif i==1 then
t,e=get_LXT_clock(o,a)
elseif i==2 then
t,e=get_PLL_clock(o,a)
elseif i==3 then
t,e=get_LIRC_clock(o,a)
elseif i==5 then
t,e=get_MIRC_clock(o,a)
elseif i==7 then
t,e=get_HIRC_clock(o,a)
else
t=0
e="invalid <b>"..n.."</b> clock (see CLK_CLKSEL0[2:0].HCLKSEL)"
return t,e
end
if t==0 then
e="<b>"..n.."</b> clock from "..e
else
table.insert(a,"CLK_CLK_CLKDIV0")
local a=ext.band(o["CLK_CLK_CLKDIV0"],15)
t=t/(a+1)
e=string.format("<b>%s</b> clock (<b>%sHz</b>), from %s",n,val2str(t),e)
end
return t,e
end
function get_HCLK_clock(t,e)
return get_sys_clock(t,e,"HCLK")
end
function get_PCLK_clock(o,i,t)
local a
local e
a,e=get_HCLK_clock(o,i)
if a==0 then
e=string.format("<b>PCLK%d</b> clock from ",t)..e
else
table.insert(i,"CLK_CLK_PCLKDIV")
local o=ext.band(ext.rshift(o["CLK_CLK_PCLKDIV"],t*4),7)
if o<=5 then
a=ext.rshift(a,o)
e=string.format("<b>PCLK%d</b> clock (<b>%sHz</b>), from %s",
t,val2str(a),e)
else
a=0
e=string.format("</b> invalid PCLK%d clock (see CLK_PCLKDIV[%d:%d].APB%dDIV)",
t,t*4+2,t*4,t)
end
end
return a,e
end
function fill_M251_Normal(e,i,o,a,t)
e["highlight_text"]=t
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_Normal
e["pin_bg_color"]=kBgColor_Normal
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
if o==nil or a==nil then
e["information"]=string.format(
"<b>%s</b><br>",
t)
else
e["information"]=string.format(
"<b>%s</b><br><br>"..
"%s",
t,
get_mfp_regs(i,o,a))
end
end
function fill_M251_GPIO(o,s,a,t,l)
if l==nil then l=string.format("P%s.%d",a,t)end
local e=s["GPIO_P"..a.."_MODE"]
local c=s["GPIO_P"..a.."_DINOFF"]
local d=s["GPIO_P"..a.."_DOUT"]
local h=s["GPIO_P"..a.."_DATMSK"]
local r=s["GPIO_P"..a.."_PIN"]
local u=s["GPIO_P"..a.."_SLEWCTL"]
o["highlight_text"]=l
o["normal_color"]=kColor_Invalid
o["highlight_color"]=kColor_GPIO
o["pin_bg_color"]=kBgColor_GPIO
local i=ext.band(ext.rshift(e,t*2),3)
o["direction"]=n[i]
if n[i]==kPinDirection_In
or n[i]==kPinDirection_Bi then
if ext.band(r,ext.lshift(1,t))==0 then
o["status"]=kPinStatus_Low
else
o["status"]=kPinStatus_High
end
else
if ext.band(h,ext.lshift(1,t))~=0 then
o["status"]=kPinStatus_Unknown
elseif ext.band(d,ext.lshift(1,t))==0 then
o["status"]=kPinStatus_Low
else
o["status"]=kPinStatus_High
end
end
local e=string.format("P%s.%d is in <b>%s</b> mode<br>",
a,t,m[i])
if n[i]==kPinDirection_In
or n[i]==kPinDirection_Bi then
if ext.band(r,ext.lshift(1,t))==0 then
e=e.."Pin input <b>low</b><br>"
else
e=e.."Pin input <b>high</b><br>"
end
end
if n[i]==kPinDirection_PushPullOut
or n[i]==kPinDirection_OpenDrainOut
or n[i]==kPinDirection_Bi then
if ext.band(h,ext.lshift(1,t))~=0 then
e=e.."Pin output <b>masked</b><br>"
elseif ext.band(d,ext.lshift(1,t))==0 then
e=e.."Pin output <b>low</b><br>"
else
e=e.."Pin output <b>high</b><br>"
end
end
if ext.band(c,ext.lshift(1,t+16))==0 then
e=e.."IO digital input path <b>enabled</b><br>"
else
e=e.."IO digital input path <b>disabled</b>(digital input tied to low)<br>"
end
local h=ext.band(ext.rshift(u,t*2),3)
if h==0 then
e=e.."IO output with <b>normal</b> slew rate<br>"
elseif h==1 then
e=e.."IO output with <b>high</b> slew rate<br>"
else
e=e..string.format("IO output with <b>unknown</b> slew rate (see %s.HSREN%d)<br>","GPIO_P"..a.."_SLEWCTL",t)
end
local h=""
if n[i]==kPinDirection_PushPullOut
or n[i]==kPinDirection_Bi then
if ext.band(d,ext.lshift(1,t))==0 and ext.band(r,ext.lshift(1,t))~=0 then
h=string.format("Leakage warning: GPIO%s_DOUT[%d] = 0, GPIO%s_PIN[%d] = 1<br>",a,t,a,t)
elseif ext.band(d,ext.lshift(1,t))~=0 and ext.band(r,ext.lshift(1,t))==0 then
h=string.format("Leakage warning: GPIO%s_DOUT[%d] = 1, GPIO%s_PIN[%d] = 0<br>",a,t,a,t)
end
end
if h~=""then
o["pin_no_color"]=kBgColor_Error
h="<font color=red>"..h.."</font>"
end
local i={
"GPIO_P"..a.."_MODE",
"GPIO_P"..a.."_DINOFF",
"GPIO_P"..a.."_DOUT",
"GPIO_P"..a.."_DATMSK",
"GPIO_P"..a.."_PIN",
"GPIO_P"..a.."_SLEWCTL"}
local i=reg2str("GPIO setting registers",g_M251_regs,s,i)
o["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s"..
"<b>Information</b><br>"..
"%s",
l,
h,
get_mfp_regs(s,a,t),
i,
e)
end
function fill_invalid_GPIO(e,i,t,a)
e["highlight_text"]=string.format("P%s.%d",t,a)
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_Invalid
e["pin_bg_color"]=kBgColor_Invalid
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
e["pin_no_color"]=kBgColor_Error
local o="<font color=red>Undefined setting in Multi-Function registers for this pin.</font><br>"
e["information"]=string.format(
"<b>P%s.%d</b><br>%s<br>"..
"%s",
t,a,
o,
get_mfp_regs(i,t,a))
end
function fill_M251_ACMP(e,o,h,r,n,t)
local a=""
local t=""
local i={}
e["highlight_text"]=n
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_CMP
e["pin_bg_color"]=kBgColor_CMP
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
table.insert(i,"CLK_CLK_APBCLK0")
local s=ext.band(ext.rshift(o["CLK_CLK_APBCLK0"],7),1)
if s==0 then
t="ACMP clock is not available (see CLK_APBCLK0[7].ACMP01CKEN).<br>"
t="<font color=red>"..t.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if a~=""then
a="<b>Information</b><br>"..a
end
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
n,
t,
get_mfp_regs(o,h,r),
get_clk_informnation(o,i),
a)
return a,t,i,s
end
function fill_M251_Analog(t,n,h,s,i,p,w,f,m)
local e=""
local a=""
local r={}
local o=0
local d={}
local l=""
local u=""
local c={}
local b=0
if f~=nil then
o=o+1
l,u,c,b=fill_M251_ACMP(d,n,h,s,i,unpack(f))
for t,e in ipairs(c)do
table.insert(r,e)
end
if l~=""then
if e~=""then e=e.."<br><br>"end
e=e.."<b>ACMP</b> "..l
end
a=a..u
end
local u={}
local l=""
local c=""
local y={}
local g=0
if w~=nil then
o=o+1
l,c,y,g=fill_M251_DAC(u,n,h,s,i,unpack(w))
for t,e in ipairs(y)do
table.insert(r,e)
end
if l~=""then
if e~=""then e=e.."<br><br>"end
e=e.."<b>DAC</b> "..l
end
a=a..c
end
local c={}
local l=""
local y=""
local v={}
local k=0
if p~=nil then
o=o+1
l,y,v,k=fill_M251_EADC(c,n,h,s,i,unpack(p))
for t,e in ipairs(v)do
table.insert(r,e)
end
if l~=""then
if e~=""then e=e.."<br><br>"end
e=e.."<b>EADC</b> "..l
end
a=a..y
end
local l={}
local y=""
local v=""
local q={}
local j=0
if m~=nil then
o=o+1
y,v,q,j=fill_M251_OPA(l,n,h,s,i,unpack(m))
for t,e in ipairs(q)do
table.insert(r,e)
end
if y~=""then
if e~=""then e=e.."<br><br>"end
e=e.."<b>OPA</b> "..y
end
a=a..v
end
local o=(o==1)and true or false
if f~=nil and(o or b~=0)then
t["highlight_color"]=d["highlight_color"]
t["pin_bg_color"]=d["pin_bg_color"]
t["pin_no_color"]=d["pin_no_color"]
elseif w~=nil and(o or g~=0)then
t["highlight_color"]=u["highlight_color"]
t["pin_bg_color"]=u["pin_bg_color"]
t["pin_no_color"]=u["pin_no_color"]
elseif p~=nil and(o or k~=0)then
t["highlight_color"]=c["highlight_color"]
t["pin_bg_color"]=c["pin_bg_color"]
t["pin_no_color"]=c["pin_no_color"]
elseif m~=nil and(o or j~=0)then
t["highlight_color"]=l["highlight_color"]
t["pin_bg_color"]=l["pin_bg_color"]
t["pin_no_color"]=l["pin_no_color"]
else
t["highlight_color"]=kColor_Normal
t["pin_bg_color"]=kBgColor_Normal
if a~=""then
t["pin_no_color"]=kBgColor_Error
end
end
t["highlight_text"]=i
t["normal_color"]=kColor_Invalid
t["direction"]=kPinDirection_Unknown
t["status"]=kPinStatus_Unknown
t["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
i,
a,
get_mfp_regs(n,h,s),
get_clk_informnation(n,r),
e)
end
function fill_M251_BPWM(n,t,d,l,r,e,s)
local a=""
local o=""
local i={}
n["highlight_text"]=r
n["normal_color"]=kColor_Invalid
n["highlight_color"]=kColor_PWM
n["pin_bg_color"]=kBgColor_PWM
n["direction"]=kPinDirection_Unknown
n["status"]=kPinStatus_Unknown
if s~=nil then
local n=ext.rshift(s,1)
table.insert(i,"CLK_CLK_APBCLK1")
local n=ext.band(t["CLK_CLK_APBCLK1"],ext.lshift(1,e+18))
if n~=0 then
table.insert(i,"CLK_CLK_CLKSEL2")
local h=ext.band(ext.rshift(t["CLK_CLK_CLKSEL2"],e+8),1)
local n
local s
if h==0 then
n,s=get_PLL_clock(t,i)
else
n,s=get_PCLK_clock(t,i,ext.band(e,1))
end
local h=string.format("BPWM%d_BPWM_CNTEN",e)
table.insert(i,h)
local h=ext.band(t[h],1)
if h==0 then
o=string.format("BPWM%d counter stops running.<br>",e)
else
local h=string.format("BPWM%d_BPWM_CLKSRC",e)
table.insert(i,h)
local h=ext.band(t[h],7)
if h==0 then
if n==0 then
o=string.format("BPWM%d clock is not available, %s.<br>",e,s)
else
local o=string.format("BPWM%d_BPWM_CLKPSC",e)
table.insert(i,o)
local t=ext.band(t[o],4095)
local t=n/(t+1)
a=string.format("BPWM%d clock frequency: <b>%sHz</b>, from %s.<br>",
e,val2str(n),s)
a=a..string.format("BPWM%d counter frequency: <b>%sHz</b> (Pre-Scaled)<br>",
e,val2str(t))
end
elseif h<=4 then
a=string.format("BPWM%d clock source is from TIMER%d.<br>",e,h-1)
else
o=string.format("BPWM%d clock source is undefined (see BPWM_CLKSRC[2:0].ECLKSRC0).<br>",e)
end
end
else
o=string.format("BPWM%d clock is not available (see CLK_APBCLK1[%d].BPWM%dCKEN).<br>",
e,e+18,e)
end
end
if o~=""then
o="<font color=red>"..o.."</font>"
n["pin_no_color"]=kBgColor_Error
end
if a~=""then
a="<b>Information</b><br>"..a
end
n["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
r,
o,
get_mfp_regs(t,d,l),
get_clk_informnation(t,i),
a)
end
function fill_M251_CLKO(s,e,d,l,r)
local h=""
local i=""
local t={}
s["highlight_text"]=r
s["normal_color"]=kColor_Invalid
s["highlight_color"]=kColor_CLK
s["pin_bg_color"]=kBgColor_CLK
s["direction"]=kPinDirection_PushPullOut
s["status"]=kPinStatus_Unknown
table.insert(t,"CLK_CLK_APBCLK0")
local a=ext.band(ext.rshift(e["CLK_CLK_APBCLK0"],6),1)
if a~=0 then
table.insert(t,"CLK_CLK_CLKOCTL")
local a=ext.band(ext.rshift(e["CLK_CLK_CLKOCTL"],4),1)
if a~=0 then
local a
local n
table.insert(t,"CLK_CLK_CLKSEL1")
local o=ext.band(ext.rshift(e["CLK_CLK_CLKSEL1"],4),7)
if o==0 then
a,n=get_HXT_clock(e,t)
elseif o==1 then
a,n=get_LXT_clock(e,t)
elseif o==2 then
a,n=get_HCLK_clock(e,t)
elseif o==3 then
a,n=get_HIRC_clock(e,t)
elseif o==4 then
a,n=get_LIRC_clock(e,t)
elseif o==5 then
a,n=get_MIRC_clock(e,t)
elseif o==6 then
a,n=get_PLL_clock(e,t)
elseif o==7 then
h="CLKO clock source from SOF (USB Start Of Frame) event.<br>"
else
a=0
i="CLKO clock is not available (see CLK_CLKSEL1[6:4].CLKOSEL).<br>"
end
if o~=7 then
if i==""then
if a~=0 then
local t=a
local o=ext.band(ext.rshift(e["CLK_CLK_CLKOCTL"],5),1)
if o==0 then
local e=ext.band(e["CLK_CLK_CLKOCTL"],15)
t=a/ext.lshift(1,(e+1))
end
h=string.format("CLKO clock frequency: <b>%sHz</b>, from %s.<br>",val2str(t),n)
else
i="CLKO clock is not available, "..n..".<br>"
end
end
end
else
i="CLKO output function disabled (see CLK_CLKOCTL[4].CLKOEN).<br>"
end
else
i="CLKO clock is not available (see CLK_APBCLK0[6].CLKOCKEN).<br>"
end
if i~=""then
i="<font color=red>"..i.."</font>"
s["pin_no_color"]=kBgColor_Error
end
if h~=""then
h="<b>Information</b><br>"..h
end
s["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
r,
i,
get_mfp_regs(e,d,l),
get_clk_informnation(e,t),
h)
end
function fill_M251_DAC(e,o,r,h,s,t)
local a=""
local t=""
local i={}
e["highlight_text"]=s
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_DAC
e["pin_bg_color"]=kBgColor_DAC
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
table.insert(i,"CLK_CLK_APBCLK1")
local n=ext.band(ext.rshift(o["CLK_CLK_APBCLK1"],12),1)
if n~=0 then
local t
local e
t,e=get_PCLK_clock(o,i,1)
a=string.format("DAC clock frequency: <b>%sHz</b>, from %s.<br>",val2str(t),e)
else
t="DAC clock is not available (see CLK_APBCLK1[12].DACCKEN).<br>"
end
if t~=""then
t="<font color=red>"..t.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if a~=""then
a="<b>Information</b><br>"..a
end
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
s,
t,
get_mfp_regs(o,r,h),
get_clk_informnation(o,i),
a)
return a,t,i,n
end
function fill_M251_EADC(e,i,h,r,n,t)
local a=""
local t=""
local o={}
e["highlight_text"]=n
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_ADC
e["pin_bg_color"]=kBgColor_ADC
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
table.insert(o,"CLK_CLK_APBCLK0")
local s=ext.band(ext.rshift(i["CLK_CLK_APBCLK0"],28),1)
if s~=0 then
local n
local e
n,e=get_PCLK_clock(i,o,1)
local i=ext.band(ext.rshift(i["CLK_CLK_CLKDIV0"],16),255)
local i=n/(i+1)
if i~=0 then
table.insert(o,"CLK_CLK_CLKDIV0")
a=string.format("EADC clock frequency: <b>%sHz</b>, from %s.<br>",val2str(i),e)
else
t="EADC clock is not available, "..e..".<br>"
end
else
t="EADC clock is not available (see CLK_APBCLK0[28].EADCCKEN).<br>"
end
if t~=""then
t="<font color=red>"..t.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if a~=""then
a="<b>Information</b><br>"..a
end
e["information"]=string.format(
"<b>%s</b><br>%s<br>%s%s%s",
n,
t,
get_mfp_regs(i,h,r),
get_clk_informnation(i,o),
a)
return a,t,o,s
end
function fill_M251_EBI(t,a,r,d,h)
local e=""
local o=""
local i={}
t["highlight_text"]=h
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_EBI
t["pin_bg_color"]=kBgColor_EBI
t["direction"]=kPinDirection_Unknown
t["status"]=kPinStatus_Unknown
table.insert(i,"CLK_CLK_AHBCLK")
local n=ext.band(ext.rshift(a["CLK_CLK_AHBCLK"],3),1)
if n~=0 then
local n
local s
n,s=get_HCLK_clock(a,i)
if n~=0 then
for t=0,2 do
local o=string.format("EBI_EBI_CTL%d",t)
table.insert(i,o)
local i=ext.band(a[o],1)
if i~=0 then
local i=ext.band(ext.rshift(a[o],8),7)
local i=ext.rshift(n,i)
local a=ext.band(ext.rshift(a[o],1),1)
e=e..string.format("EBI Bank%d MCLK frequency: <b>%sHz</b>, from %s.<br>",
t,val2str(i),s)
e=e..string.format("EBI Bank%d: address/data bus %s mode, and data width <b>%d-bit</b><br>",
t,"multiplex",(a~=0)and 16 or 8)
else
e=e..string.format("EBI Bank%d <b>disabled</b><br>",t)
end
end
else
o=string.format("EBI clock is not available, %s.<br>",s)
end
else
o="EBI clock is not available (see CLK_AHBCLK[3].EBICKEN).<br>"
end
if o~=""then
o="<font color=red>"..o.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if e~=""then
e="<b>Information</b><br>"..e
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
h,
o,
get_mfp_regs(a,r,d),
get_clk_informnation(a,i),
e)
end
function fill_M251_I2C(t,o,d,l,r,e)
local i=""
local a=""
local n={}
t["highlight_text"]=r
t["normal_color"]=kColor_Invalid
t["highlight_color"]=kColor_I2C
t["pin_bg_color"]=kBgColor_I2C
t["direction"]=kPinDirection_Unknown
t["status"]=kPinStatus_Unknown
table.insert(n,"CLK_CLK_APBCLK0")
local s=ext.band(ext.rshift(o["CLK_CLK_APBCLK0"],8+e),1)
if s~=0 then
local t=string.format("I2C%d_I2C_CTL0",e)
local h=string.format("I2C%d_I2C_CLKDIV",e)
table.insert(n,t)
local t=ext.band(ext.rshift(o[t],6),1)
if t~=0 then
local s
local t
s,t=get_PCLK_clock(o,n,ext.band(e,1))
if s~=0 then
table.insert(n,h)
local o=ext.band(o[h],1023)
if o<4 then
a=string.format("Invalid I2C%d's I2C_CLKDIV value, I2C_CLKDIV must >= 4.<br>",e)
else
local a=s/(4*(o+1))
i=i..string.format("I2C%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(a),t)
end
else
a=string.format("I2C%d clock is not available, %s.<br>",e,t)
end
else
a=string.format("I2C%d controller disabled (see I2C%d_I2C_CTL0[6].I2CEN).<br>",e,e)
end
else
a=string.format("I2C%d clock is not available (see CLK_APBCLK0[%d].I2C%dCKEN).<br>",e,8+e,e)
end
if a~=""then
a="<font color=red>"..a.."</font>"
t["pin_no_color"]=kBgColor_Error
end
if i~=""then
i="<b>Information</b><br>"..i
end
t["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
r,
a,
get_mfp_regs(o,d,l),
get_clk_informnation(o,n),
i)
end
function fill_M251_OPA(e,i,h,r,n,t)
local a=""
local t=""
local o={}
e["highlight_text"]=n
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_OPA
e["pin_bg_color"]=kBgColor_OPA
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
table.insert(o,"CLK_CLK_APBCLK1")
local s=ext.band(ext.rshift(i["CLK_CLK_APBCLK1"],30),1)
if s==0 then
t="OPA clock is not available (see CLK_APBCLK1[30].OPACKEN).<br>"
else
table.insert(o,"OPA_OPA_CTL")
local e=ext.band(i["OPA_OPA_CTL"],1)
if e==0 then
t="OP Amplifier 0 disabled (see OPA_CTL[0].OPEN0).<br>"
end
end
if t~=""then
t="<font color=red>"..t.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if a~=""then
a="<b>Information</b><br>"..a
end
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
n,
t,
get_mfp_regs(i,h,r),
get_clk_informnation(i,o),
a)
return a,t,o,s
end
function fill_M251_PSIO(a,e,d,r,h,t)
local s=""
local o=""
local t={}
a["highlight_text"]=h
a["normal_color"]=kColor_Invalid
a["highlight_color"]=kColor_PSIO
a["pin_bg_color"]=kBgColor_PSIO
a["direction"]=kPinDirection_Unknown
a["status"]=kPinStatus_Unknown
table.insert(t,"CLK_CLK_APBCLK1")
local i=ext.band(ext.rshift(e["CLK_CLK_APBCLK1"],31),1)
if i~=0 then
local i
local a
table.insert(t,"CLK_CLK_CLKSEL2")
local n=ext.band(ext.rshift(e["CLK_CLK_CLKSEL2"],28),7)
if n==0 then
i,a=get_HXT_clock(e,t)
elseif n==1 then
i,a=get_LXT_clock(e,t)
elseif n==2 then
i,a=get_PCLK_clock(e,t,1)
elseif n==3 then
i,a=get_PLL_clock(e,t)
elseif n==4 then
i,a=get_LIRC_clock(e,t)
elseif n==7 then
i,a=get_HIRC_clock(e,t)
else
o="PSIO clock source is undefined (see CLK_CLKSEL2[30:28].PSIOSEL).<br>"
end
if o==""then
if i~=0 then
table.insert(t,"CLK_CLK_CLKDIV1")
local e=ext.band(ext.rshift(e["CLK_CLK_CLKDIV1"],24),255)
local e=i/(e+1)
s=string.format("PSIO clock frequency: <b>%sHz</b>, from %s.<br>",val2str(e),a)
else
o=string.format("PSIO clock is not available, %s.<br>",a)
end
end
else
o="PSIO clock is not available (see CLK_APBCLK1[31].PSIOCKEN).<br>"
end
if o~=""then
o="<font color=red>"..o.."</font>"
a["pin_no_color"]=kBgColor_Error
end
if s~=""then
s="<b>Information</b><br>"..s
end
a["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
h,
o,
get_mfp_regs(e,d,r),
get_clk_informnation(e,t),
s)
end
function fill_M251_PWM(s,a,l,u,d,t,e)
local n=""
local i=""
local o={}
s["highlight_text"]=d
s["normal_color"]=kColor_Invalid
s["highlight_color"]=kColor_PWM
s["pin_bg_color"]=kBgColor_PWM
s["direction"]=kPinDirection_Unknown
s["status"]=kPinStatus_Unknown
if e~=nil then
local e=ext.rshift(e,1)
table.insert(o,"CLK_CLK_APBCLK1")
local s=ext.band(a["CLK_CLK_APBCLK1"],ext.lshift(1,t+16))
if s~=0 then
table.insert(o,"CLK_CLK_CLKSEL2")
local r=ext.band(ext.rshift(a["CLK_CLK_CLKSEL2"],t),1)
local s
local h
if r==0 then
s,h=get_PLL_clock(a,o)
else
s,h=get_PCLK_clock(a,o,ext.band(t,1))
end
local r=string.format("PWM%d_PWM_CNTEN",t)
table.insert(o,r)
local r=ext.band(ext.rshift(a[r],e*2),1)
if r==0 then
i=string.format("PWM%d counter%d_%d stops running.<br>",t,e*2,e*2+1)
else
local r=string.format("PWM%d_PWM_CLKSRC",t)
table.insert(o,r)
local r=ext.band(ext.rshift(a[r],8*e),7)
if r==0 then
if s==0 then
i=string.format("PWM%d clock is not available, %s.<br>",t,h)
else
local i=string.format("PWM%d_PWM_CLKPSC%d_%d",t,2*e,2*e+1)
table.insert(o,i)
local a=ext.band(a[i],4095)
local a=s/(a+1)
n=string.format("PWM%d clock frequency: <b>%sHz</b>, from %s.<br>",
t,val2str(s),h)
n=n..string.format("PWM%d counter%d_%d frequency: <b>%sHz</b> (Pre-Scaled)<br>",
t,2*e,2*e+1,val2str(a))
end
elseif r<=4 then
n=string.format("PWM%d_CH%d%d clock source is from TIMER%d.<br>",
t,2*e,2*e+1,r-1)
else
i=string.format("PWM%d_CH%d%d clock source is undefined (see PWM_CLKSRC[%d:%d].ECLKSRC%d).<br>",
t,2*e,2*e+1,8*e+2,8*e,2*e)
end
end
else
i=string.format("PWM%d clock is not available (see CLK_APBCLK1[%d].PWM%dCKEN).<br>",
t,t+16,t)
end
end
if i~=""then
i="<font color=red>"..i.."</font>"
s["pin_no_color"]=kBgColor_Error
end
if n~=""then
n="<b>Information</b><br>"..n
end
s["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
d,
i,
get_mfp_regs(a,l,u),
get_clk_informnation(a,o),
n)
end
function fill_M251_SC(n,a,l,u,d,e)
local t=""
local i=""
local o={}
local h=0
n["highlight_text"]=d
n["normal_color"]=kColor_Invalid
n["highlight_color"]=kColor_SC
n["pin_bg_color"]=kBgColor_SC
n["direction"]=kPinDirection_Unknown
n["status"]=kPinStatus_Unknown
table.insert(o,"CLK_CLK_APBCLK1")
local s=ext.band(ext.rshift(a["CLK_CLK_APBCLK1"],e),1)
if s~=0 then
local r=string.format("SC%d_SC_CTL",e)
table.insert(o,r)
if ext.band(a[r],1)~=0 then
local s
local n
table.insert(o,"CLK_CLK_CLKSEL3")
local r=ext.band(ext.rshift(a["CLK_CLK_CLKSEL3"],e*2),3)
if r==0 then
s,n=get_HXT_clock(a,o)
elseif r==1 then
s,n=get_PLL_clock(a,o)
elseif r==2 then
s,n=get_PCLK_clock(a,o,ext.band(e,1))
else
s,n=get_HIRC_clock(a,o)
end
table.insert(o,"CLK_CLK_CLKDIV1")
local a=ext.band(ext.rshift(a["CLK_CLK_CLKDIV1"],e*8),255)
h=s/(a+1)
if h~=0 then
t=t..string.format("SC%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(h),n)
else
i=string.format("SC%d clock is not available, ",e)..n..".<br>"
end
else
i=string.format("SC%d controller disabled (see %s[0].SCEN).<br>",e,r)
end
else
i=string.format("SC%d clock is not available (see CLK_APBCLK1[%d].SC%dCKEN).<br>",e,e,e)
end
if i==""then
local s=string.format("SC%d_SC_UARTCTL",e)
local n=string.format("SC%d_SC_ETUCTL",e)
table.insert(o,s)
table.insert(o,n)
local o=ext.band(a[n],4095)
local n=h/(o+1)
local a=ext.band(a[s],1)
if a~=0 then
t=string.format("SC%d is in <b>UART</b> mode.<br>",e)..t
if o>4 then
t=t..string.format("UART baudrate: <b>%d</b><br>",n)
else
i=string.format("SC%d ETURDIV(SC_ETUCTL[11:0]) must be greater than 4.<br>",e)
end
else
t=string.format("SC%d is in <b>Smart Card</b> mode.<br>",e)..t
end
end
if i~=""then
i="<font color=red>"..i.."</font>"
n["pin_no_color"]=kBgColor_Error
end
if t~=""then
t="<b>Information</b><br>"..t
end
n["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
d,
i,
get_mfp_regs(a,l,u),
get_clk_informnation(a,o),
t)
end
function fill_M251_SPI(o,t,u,c,l,h)
local e=""
local r=""
local i={}
o["highlight_text"]=l
o["normal_color"]=kColor_Invalid
o["highlight_color"]=kColor_SPI
o["pin_bg_color"]=kBgColor_SPI
o["direction"]=kPinDirection_Unknown
o["status"]=kPinStatus_Unknown
local a=(h==0)and"QSPI0"or string.format("SPI%d",h-1)
local n=0
table.insert(i,"CLK_CLK_APBCLK0")
n=ext.band(ext.rshift(t["CLK_CLK_APBCLK0"],h+12),1)
if n~=0 then
local n
local s
table.insert(i,"CLK_CLK_CLKSEL2")
local d=ext.band(ext.rshift(t["CLK_CLK_CLKSEL2"],2*h+2),3)
if d==0 then
n,s=get_HXT_clock(t,i)
elseif d==1 then
n,s=get_PLL_clock(t,i)
elseif d==2 then
n,s=get_PCLK_clock(t,i,ext.band(h,1))
else
n,s=get_HIRC_clock(t,i)
end
if n~=0 then
local d=0
if h~=0 then
local h=string.format("%s_SPIx_I2SCTL",a)
local r=string.format("%s_SPIx_I2SCLK",a)
table.insert(i,h)
d=ext.band(t[h],1)
if d~=0 then
e=string.format("I2S controller enabled.<br>")
local h=ext.band(ext.rshift(t[h],8),1)
if h==0 then
table.insert(i,r)
local i=ext.band(ext.rshift(t[r],8),1023)
local o=ext.band(t[r],127)
local i=n/(2*(i+1))
local t=n
if o~=0 then
t=n/(2*o)
end
e=e..string.format("%s_I2S is in <b>master</b> mode.<br>",a)
e=e..string.format("BCLK frequency: <b>%sHz</b><br>",val2str(i))
e=e..string.format("MCLK frequency: <b>%sHz</b>, from %s.<br>",val2str(t),s)
else
e=e..string.format("%s_I2S is in <b>slave</b> mode.<br>",a)
end
o["highlight_color"]=kColor_I2S
o["pin_bg_color"]=kBgColor_I2S
o["direction"]=kPinDirection_Unknown
end
end
if d==0 then
local h=string.format("%s_SPIx_CTL",a)
local o=string.format("%s_SPIx_CLKDIV",a)
table.insert(i,h)
local h=ext.band(ext.rshift(t[h],18),1)
if h~=0 then
e=string.format("%s is in <b>slave</b> mode.<br>",a)
else
e=string.format("%s is in <b>master</b> mode.<br>",a)
table.insert(i,o)
local t=ext.band(t[o],511)
local t=n/(t+1)
e=e..string.format("%s clock frequency: <b>%sHz</b>, from %s.<br>",
a,val2str(t),s)
end
end
else
r=string.format("%s clock is not available, %s.<br>",a,s)
end
else
r=string.format("%s clock is not available (see CLK_APBCLK0[%d].%sCKEN).<br>",
a,h+12,a)
end
if r~=""then
r="<font color=red>"..r.."</font>"
o["pin_no_color"]=kBgColor_Error
end
if e~=""then
e="<b>Information</b><br>"..e
end
o["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
l,
r,
get_mfp_regs(t,u,c),
get_clk_informnation(t,i),
e)
end
function fill_M251_SPI_IO(e,i,t,a)
local o=(t==0)and"QSPI0"or string.format("SPI%d",t-1)
if t~=0 then
local t=string.format("%s_SPIx_I2SCTL",o)
local t=ext.band(i[t],1)
if t~=0 then
if a then
e["direction"]=kPinDirection_In
else
e["direction"]=kPinDirection_PushPullOut
end
return
end
end
local t=string.format("%s_SPIx_CTL",o)
local t=ext.band(ext.rshift(i[t],18),1)
if t==0 then
if a then
e["direction"]=kPinDirection_In
else
e["direction"]=kPinDirection_PushPullOut
end
else
if a then
e["direction"]=kPinDirection_PushPullOut
else
e["direction"]=kPinDirection_In
end
end
end
function fill_M251_TM(n,t,d,l,r,e)
local s=""
local h=""
local a={}
n["highlight_text"]=r
n["normal_color"]=kColor_Invalid
n["highlight_color"]=kColor_TM
n["pin_bg_color"]=kBgColor_TM
n["direction"]=kPinDirection_Unknown
n["status"]=kPinStatus_Unknown
table.insert(a,"CLK_CLK_APBCLK0")
local o=ext.band(ext.rshift(t["CLK_CLK_APBCLK0"],e+2),1)
if o~=0 then
local o=string.format("TMR%d%d_TIMER%d_CTL",ext.rshift(e,1)*2,ext.rshift(e,1)*2+1,e)
table.insert(a,o)
local o=ext.band(ext.rshift(t[o],24),1)
if o~=0 then
s=string.format("TMR%d external counting pin function enabled.<br>",e)
else
local o
local i
table.insert(a,"CLK_CLK_CLKSEL1")
local n=ext.band(ext.rshift(t["CLK_CLK_CLKSEL1"],8+e*4),7)
if n==0 then
o,i=get_HXT_clock(t,a)
elseif n==1 then
o,i=get_LXT_clock(t,a)
elseif n==2 then
if e==0 or e==1 then
o,i=get_PCLK_clock(t,a,0)
else
o,i=get_PCLK_clock(t,a,1)
end
elseif n==3 then
s=string.format("TMR%d clock source is from external clock TM%d pin.<br>",e,e)
elseif n==5 then
o,i=get_LIRC_clock(t,a)
elseif n==7 then
o,i=get_HIRC_clock(t,a)
else
h=string.format("TMR%d clock source is undefined (see CLK_CLKSEL1[%d:%d].TMR%dSEL).<br>",
e,8+e*4+2,8+e*4,e)
end
if h==""and s==""then
if o~=0 then
s=string.format("TMR%d clock frequency: <b>%sHz</b>, from %s.<br>",
e,val2str(o),i)
else
h=string.format("TMR%d clock is not available, %s.<br>",e,i)
end
end
end
else
h=string.format("TMR%d clock is not available (see CLK_APBCLK0[%d].TMR%dCKEN).<br>",e,e+2,e)
end
if h~=""then
h="<font color=red>"..h.."</font>"
n["pin_no_color"]=kBgColor_Error
end
if s~=""then
s="<b>Information</b><br>"..s
end
n["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
r,
h,
get_mfp_regs(t,d,l),
get_clk_informnation(t,a),
s)
end
function fill_M251_UART(h,t,c,u,l,e)
local r=""
local o=""
local a={}
local d=0
h["highlight_text"]=l
h["normal_color"]=kColor_Invalid
h["highlight_color"]=kColor_UART
h["pin_bg_color"]=kBgColor_UART
h["direction"]=kPinDirection_Unknown
h["status"]=kPinStatus_Unknown
function get_uart_baudate(o)
local h=string.format("UART%d",e)
local e=string.format("UART%d_UART_BAUD",e)
table.insert(a,e)
local n=ext.band(t[e],536870912)
local i=ext.band(t[e],268435456)
local s=ext.rshift(ext.band(t[e],251658240),24)
local t=ext.band(t[e],65535)
local e=0
local a=""
if n==0 and i==0 then
e=o/(16*(t+2))
elseif n~=0 and i==0 then
if s>=8 then
e=o/((s+1)*(t+2))
else
a="invalid "..h.."'s UART_BAUD value, EDIV_M1 must >= 8"
end
elseif n~=0 and i~=0 then
e=o/(t+2)
else
a="invalid "..h.."'s UART_BAUD value"
end
return e,a
end
table.insert(a,"CLK_CLK_APBCLK0")
local i=ext.band(ext.rshift(t["CLK_CLK_APBCLK0"],e+16),1)
if i~=0 then
local s,h
if e<2 then
table.insert(a,"CLK_CLK_CLKSEL1")
table.insert(a,"CLK_CLK_CLKDIV0")
s=ext.band(ext.rshift(t["CLK_CLK_CLKSEL1"],24+e*4),7)
h=ext.band(ext.rshift(t["CLK_CLK_CLKDIV0"],8+e*4),15)
else
table.insert(a,"CLK_CLK_CLKSEL3")
table.insert(a,"CLK_CLK_CLKDIV4")
s=ext.band(ext.rshift(t["CLK_CLK_CLKSEL3"],24+(e-2)*4),7)
h=ext.band(ext.rshift(t["CLK_CLK_CLKDIV4"],(e-2)*4),15)
end
local n
local i
if s==0 then
n,i=get_HXT_clock(t,a)
elseif s==1 then
n,i=get_PLL_clock(t,a)
elseif s==2 then
n,i=get_LXT_clock(t,a)
elseif s==3 then
n,i=get_HIRC_clock(t,a)
elseif s==4 then
n,i=get_PCLK_clock(t,a,ext.band(e,1))
elseif s==5 then
n,i=get_LIRC_clock(t,a)
else
n=0
if e<2 then
o=string.format("UART%d clock is not available (see CLK_CLKSEL1[%d:%d].UART%dSEL).<br>",
e,24+e*4+2,24+e*4,e)
else
o=string.format("UART%d clock is not available (see CLK_CLKSEL3[%d:%d].UART%dSEL).<br>",
e,24+(e-2)*4+2,24+(e-2)*4,e)
end
end
if o==""then
d=n/(h+1)
if d~=0 then
r=string.format("UART%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(d),i)
else
o=string.format("UART%d clock is not available, %s.<br>",e,i)
end
end
else
o=string.format("UART%d clock is not available (see CLK_APBCLK0[%d].UART%dCKEN).<br>",
e,e+16,e)
end
if o==""then
local e,t=get_uart_baudate(d)
if e~=0 then
r=r..string.format("UART baudrate: <b>%d</b><br>",e)
else
o=t..".<br>"
end
end
if o~=""then
o="<font color=red>"..o.."</font>"
h["pin_no_color"]=kBgColor_Error
end
if r~=""then
r="<b>Information</b><br>"..r
end
h["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
l,
o,
get_mfp_regs(t,c,u),
get_clk_informnation(t,a),
r)
end
function fill_M251_USB(e,t,r,h,s)
local i=""
local o=""
local a={}
e["highlight_text"]=s
e["normal_color"]=kColor_Invalid
e["highlight_color"]=kColor_USB
e["pin_bg_color"]=kBgColor_USB
e["direction"]=kPinDirection_Unknown
e["status"]=kPinStatus_Unknown
table.insert(a,"CLK_CLK_APBCLK0")
local n=ext.band(t["CLK_CLK_APBCLK0"],ext.lshift(1,27))
if n~=0 then
local e
local n
table.insert(a,"CLK_CLK_CLKSEL0")
local s=ext.band(ext.rshift(t["CLK_CLK_CLKSEL0"],8),1)
if s==0 then
e,n=get_HIRC_clock(t,a)
else
e,n=get_PLL_clock(t,a)
table.insert(a,"CLK_CLK_CLKDIV0")
local t=ext.band(ext.rshift(t["CLK_CLK_CLKDIV0"],4),15)
e=e/(t+1)
end
if e~=0 then
i=string.format("USBD clock frequency: <b>%sHz</b>, from %s.<br>",val2str(e),n)
else
o="USBD clock is not available, "..n..".<br>"
end
else
o="USBD clock is not available (see CLK_APBCLK0[27].USBDCKEN).<br>"
end
if o~=""then
o="<font color=red>"..o.."</font>"
e["pin_no_color"]=kBgColor_Error
end
if i~=""then
i="<b>Information</b><br>"..i
end
if r~=nil and h~=nil then
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
s,
o,
get_mfp_regs(t,r,h),
get_clk_informnation(t,a),
i)
else
e["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s",
s,
o,
get_clk_informnation(t,a),
i)
end
end
function fill_M251_USCI(i,a,f,w,l,e)
local t=""
local o=""
local n={}
i["highlight_text"]=l
i["normal_color"]=kColor_Invalid
i["highlight_color"]=kColor_USCI
i["pin_bg_color"]=kBgColor_USCI
i["direction"]=kPinDirection_Unknown
i["status"]=kPinStatus_Unknown
table.insert(n,"CLK_CLK_APBCLK1")
local s=ext.band(ext.rshift(a["CLK_CLK_APBCLK1"],8+e),1)
if s~=0 then
local i=string.format("USCI%d_USCI_CTL",e)
table.insert(n,i)
local h=ext.band(a[i],7)
local i=string.format("USCI%d_USCI_BRGEN",e)
table.insert(n,i)
local l=ext.band(a[i],1)
local u=ext.band(ext.rshift(a[i],1),1)
local s=ext.band(ext.rshift(a[i],2),3)
local f=ext.band(ext.rshift(a[i],10),31)
local w=ext.band(ext.rshift(a[i],8),3)
local m=ext.band(ext.rshift(a[i],16),1023)
local i=string.format("USCI%d_USCI_PROTCTL",e)
table.insert(n,i)
local d=ext.band(ext.rshift(a[i],31),1)
local c=ext.band(a[i],1)
local r
local i
r,i=get_PCLK_clock(a,n,ext.band(e,1))
local n=(l==0)and r or 0
if l~=0 then
o=string.format("Undefined reference clock sorce (see USCI_BRGEN[0].RCLKSEL).<br>")
end
local a=n/2
local l=(u==0)and n or a
local u=l/(m+1)
local m=u/2
local a
if s==0 then
a=u
elseif s==1 then
a=l
elseif s==2 then
a=m
elseif s==3 then
a=n
end
if r~=0 and o==""then
if h==0 then
t=string.format("USCI%d is in idle state.<br>",e)
elseif h==1 then
if c==0 then
t=string.format("USCI%d is in <b>SPI master</b> mode.<br>",e)
else
t=string.format("USCI%d is in <b>SPI slave</b> mode.<br>",e)
end
if d==0 then
o=string.format("SPI protocol disabled (see USCI%d_USCI_PROTCTL[31].PROTEN)<br>",e)
elseif c==0 then
local a=a/2
t=t..string.format("USPI%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(a),i)
end
elseif h==2 then
t=string.format("USCI%d is in <b>UART</b> mode.<br>",e)
if d==0 then
o=string.format("UART protocol disabled (see USCI%d_USCI_PROTCTL[31].PROTEN)<br>",e)
else
t=t..string.format("UUART%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(r),i)
local e=a/(f+1)/(w+1)
t=t..string.format("UART baudrate: <b>%d</b><br>",e)
end
elseif h==4 then
t=string.format("USCI%d is in <b>I2C</b> mode.<br>",e)
if d==0 then
o=string.format("I2C protocol disabled (see USCI%d_USCI_PROTCTL[31].PROTEN)<br>",e)
else
local a=a/2
t=t..string.format("UI2C%d clock frequency: <b>%sHz</b>, from %s.<br>",e,val2str(a),i)
end
else
o=string.format("Undefined function mode (see USCI_CTL[2:0].FUNMODE).<br>")
end
else
o=string.format("USCI%d clock is not available, %s.<br>",e,i)
end
else
o=string.format("USCI%d clock is not available (see CLK_APBCLK1[%d].USCI%dCKEN).<br>",e,8+e,e)
end
if o~=""then
o="<font color=red>"..o.."</font>"
i["pin_no_color"]=kBgColor_Error
end
if t~=""then
t="<b>Information</b><br>"..t
end
i["information"]=string.format(
"<b>%s</b><br>%s<br>"..
"%s%s%s",
l,
o,
get_mfp_regs(a,f,w),
get_clk_informnation(a,n),
t)
end
function fill_M251_USCI_IO(e,i,o,a)
local t=string.format("USCI%d_USCI_CTL",o)
local t=ext.band(i[t],7)
if t==0 then
elseif t==1 then
local t=string.format("USCI%d_USCI_PROTCTL",o)
local t=ext.band(i[t],1)
if t==0 then
if a==0 then
e["direction"]=kPinDirection_PushPullOut
else
e["direction"]=kPinDirection_In
end
else
if a==0 then
e["direction"]=kPinDirection_In
else
e["direction"]=kPinDirection_PushPullOut
end
end
elseif t==2 then
if a==0 then
e["direction"]=kPinDirection_In
else
e["direction"]=kPinDirection_PushPullOut
end
elseif t==4 then
end
end
