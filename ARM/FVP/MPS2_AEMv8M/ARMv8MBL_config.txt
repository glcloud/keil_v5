# Parameters:
# Parameters:
# instance.parameter=value       #(type, mode) default = 'def value' : description : [min..max]
#----------------------------------------------------------------------------------------------
cpu0.vfp-present=0                                    # (bool  , init-time) default = '1'      : Set whether the model has VFP support
cpu0.semihosting-enable=0                             # (bool  , init-time) default = '1'      : Enable semihosting SVC traps. Applications that do not use semihosting must set this parameter to false.
cpu0.ITM=0                                            # (bool  , init-time) default = '1'      : Level of instrumentation trace supported. false : No ITM trace included, true: ITM trace included (unless baseline)
cpu0.DWT_TRACE=0                                      # (bool  , init-time) default = '1'      : Support for DWT trace. false : No DWT trace included, true: DWT trace included (unless ITM=0, or baseline)
cpu0.INITVTOR_S=0x00000000                            # (int   , init-time) default = '0x10000000' : Secure vector-table offset at reset : [0x0..0xFFFFFF80]
cpu0.INITVTOR_NS=0x0                                  # (int   , init-time) default = '0x0'    : Non-secure vector-table offset at reset : [0x0..0xFFFFFF80]
cpu0.CPUID=0x0                                        # (int   , init-time) default = '0x0'    : Set SCS CPUID Base Register. If set to zero, a default CPUID is used. : [0x0..0xFFFFFFFF]
cpu0.supports_unprivileged=1                          # (bool  , init-time) default = '1'      : Enable support for Unprivileged/Privileged Extension
cpu0.SYST=0x2                                         # (int   , init-time) default = '0x2'    : Include SysTick timer functionality (0=Absent, 1=Secure only, 2=Secure and NS) : [0x0..0x2]
cpu0.baseline=1                                       # (bool  , init-time) default = '1'      : When in v8-M mode, use the baseline profile (if false, use mainline)
cpu0.LOCK_SAU=0                                       # (bool  , init-time) default = '0'      : Lock down of SAU registers write
cpu0.LOCK_S_MPU=0                                     # (bool  , init-time) default = '0'      : Lock down of Secure MPU registers write
cpu0.LOCK_NS_MPU=0                                    # (bool  , init-time) default = '0'      : Lock down of Non-Secure MPU registers write
cpu0.CPSPRESENT=0xFFFF                                # (int   , init-time) default = '0xFFFF' : Bit N means external coprocessor N (CP15:CP0) is accessible in Secure state : [0x0..0xFFFF]
cpu0.CPNSPRESENT=0xFFFF                               # (int   , init-time) default = '0xFFFF' : Bit N means external coprocessor N (CP15:CP0) is accessible in Non-Secure state : [0x0..0xFFFF]
cpu0.WIC=1                                            # (bool  , init-time) default = '1'      : Include support for WIC-mode deep sleep
cpu0.IRQDIS0=0x0                                      # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+0] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS1=0x0                                      # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+32] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS2=0x0                                      # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+64] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS3=0x0                                      # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+96] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS4=0x0                                      # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+128] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS5=0x0                                      # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+160] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS6=0x0                                      # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+192] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS7=0x0                                      # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+224] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS8=0x0                                      # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+256] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS9=0x0                                      # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+288] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS10=0x0                                     # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+320] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS11=0x0                                     # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+352] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS12=0x0                                     # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+384] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS13=0x0                                     # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+416] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS14=0x0                                     # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+448] : [0x0..0xFFFFFFFF]
cpu0.IRQDIS15=0x0                                     # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+480] : [0x0..0xFFFFFFFF]
cpu0.NVIC_ITNS0=""                                    # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS1=""                                    # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS2=""                                    # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS3=""                                    # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS4=""                                    # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS5=""                                    # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS6=""                                    # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS7=""                                    # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS8=""                                    # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS9=""                                    # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS10=""                                   # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS11=""                                   # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS12=""                                   # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS13=""                                   # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS14=""                                   # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.NVIC_ITNS15=""                                   # (string, init-time) default = ''       : Each character fixes a security state target for a given external interrupt. 'N' implies NS; 'S' implies S; anything else is ignored. The largest bit is first, e.g. 'S-NN' sets external interrupts 0 and 1 to non-secure, 2 remains settable via the NVIC_ITNS register and 3 always targets secure
cpu0.SECEXT=1                                         # (bool  , init-time) default = '1'      : Whether the ARMv8-M Security Extensions are included
cpu0.cpu_can_access_debug_regs=1                      # (bool  , init-time) default = '1'      : The DWT, BPU, ROM table, DCB, and the SHCSR and DFSR registers access from the processor
cpu0.stack_limit_check=0x3                            # (int   , init-time) default = '0x3'    : Support Stack limit Check on Load instructions (0:Only v6M, 1:Exclusives from ARMv7-M, 2:Semaphores and atomics from ARMv8-A/R, 3:Both #1 and #2 : [0x0..0x3]
cpu0.stack_limit_check_optimization=1                 # (bool  , init-time) default = '1'      : Stack limit check optimization (0: limit check done for each word on the stack, 1: limit check done only on stack pointer
cpu0.sequential_security_transitions=0x1              # (int   , init-time) default = '0x1'    : Allow transition of security state in sequential instruction fetches that cross from non-secure to secure memory with SG instruction 0: never, 1: always, 2: 32-bit instrs, 3: ISB. : [0x0..0x3]
cpu0.bp_on_2nd_halfword=1                             # (bool  , init-time) default = '1'      : Respect DWT/BPU breakpoint-hit on 2nd halfword of 32-bit instruction
cpu0.condition_flags_reset=0x0                        # (int   , init-time) default = '0x0'    : Reset Value of condition flags in APSR : [0x0..0xF]
cpu0.ID_ISAR0.coproc_instrs=0x4                       # (int   , init-time) default = '0x4'    : Supported Coprocessor instructions 0: None 1: CDP, LDC, MCR, MRC, and STC instructions 2: As for 1, and CDP2, LDC2, MCR2, MRC2, and STC2 instructions 3: As for 2, and MCRR and MRRC instructions 4: As for 2, and MCRR and MRRC instructions : [0x0..0x4]
cpu0.ID_ISAR1.interwork_instrs=0x3                    # (int   , init-time) default = '0x3'    : level of support for Interworking instructions : [0x0..0x3]
cpu0.ID_ISAR1.extend_instrs=0x2                       # (int   , init-time) default = '0x2'    : level of support for extend instructions, under the control of support_dsp_ext : [0x0..0x2]
cpu0.ID_ISAR2.multU_instrs=0x2                        # (int   , init-time) default = '0x2'    : level of support for advanced unsigned Multiply instructions, under the control of support_dsp_ext : [0x0..0x2]
cpu0.ID_ISAR2.multS_instrs=0x3                        # (int   , init-time) default = '0x3'    : level of support for advanced signed Multiply instructions, under the control of support_dsp_ext : [0x0..0x3]
cpu0.ID_ISAR3.SIMD_instrs=0x3                         # (int   , init-time) default = '0x3'    : level of support for SIMD instructions, under the control of support_dsp_ext : [0x0..0x3]
cpu0.ID_ISAR3.saturate_instrs=0x1                     # (int   , init-time) default = '0x1'    : level of support for saturate instructions, under the control of support_dsp_ext : [0x0..0x1]
cpu0.ID_ISAR3.synchprim_instrs=0x2                    # (int   , init-time) default = '0x2'    : level of support for synchronization primitives ID_ISAR3 : [0x0..0x2]
cpu0.ID_ISAR4.unpriv_instrs=0x2                       # (int   , init-time) default = '0x2'    : supported unprivileged instructions 0: None 1: LDRBT, LDRT, STRBT, and STRT instructions 2: As for 1, and LDRHT, LDRSBT, LDRSHT, and STRHT instructions : [0x0..0x2]
cpu0.ID_ISAR4.withshifts_instrs=0x4                   # (int   , init-time) default = '0x4'    : level of support for instructions with shifts : [0x0..0x4]
cpu0.ID_ISAR4.synchPrim_instrs_frac=0x0               # (int   , init-time) default = '0x0'    : level of support for synchronization primitives ID_ISAR4 : [0x0..0x3]
cpu0.MVFR1.FPHP=2                                     # (int   , init-time) default = '0x2'    : FP extension implements half-precision floating-point conversion instructions. 0x1: Half-precision to single-precision, 0x2: As for 0x1 and also half-precision to double-precision
cpu0.tail_chain=1                                     # (bool  , init-time) default = '1'      : Enable tail-chaining optimisation
cpu0.late_arrival=1                                   # (bool  , init-time) default = '1'      : Enable late arrival support
cpu0.IOP=0                                            # (bool  , init-time) default = '0'      : Send all d-side transactions to the port, io_port_out. Transactions which do not match should be returned to the port, io_port_in
cpu0.ID_MMFR0.Auxiliary_registers=1                   # (bool  , init-time) default = '1'      : Auxiliary registers bits in ID_MMFR0, indicate the support for Auxiliary registers
cpu0.ID_MMFR0.Outermost_shareability=0x0              # (int   , init-time) default = '0x0'    : Outermost shareability bits in ID_MMFR0, indicate the outermost shareability domain implemented : [0x0..0xF]
cpu0.AIRCR.PRIS_writable=1                            # (bool  , init-time) default = '1'      : Is AIRCR.BFHFNMINS bit[13] writeable
cpu0.AIRCR.BFHFNMINS_writable=1                       # (bool  , init-time) default = '1'      : Is AIRCR.PRIS bit[14] writeable
cpu0.AIRCR.VECTCLRACTIVE_changes_mode=1               # (bool  , init-time) default = '1'      : Asserting AIRCR.VECTCLRACTIVE clears IPSR and any active exceptions. The mode is also changed to thread if this flag is true. Ignored for v8-M
cpu0.vector_fetch_as_wpt_event=0                      # (bool  , init-time) default = '0'      : Watchpoint on exception vector fetch
cpu0.vector_fetch_on_iside=1                          # (bool  , init-time) default = '1'      : Perform vector fetch on I-side
cpu0.CCR.BP=1                                         # (bool  , init-time) default = '1'      : Reset value of the Configuration and Control Register's branch prediction enable bit
cpu0.CCR.BP_writable=0                                # (bool  , init-time) default = '0'      : Whether it is possible to modify the Configuration and Control Register's branch prediction enable bit
cpu0.ignore-SCR.SLEEPONEXIT=0                         # (bool  , init-time) default = '0'      : Never sleep on exit from handler to thread mode.
cpu0.register_reset_data=0x0                          # (int   , init-time) default = '0x0'    : Data used to fill register bits when they become UNKNOWN at reset. : [0x0..0xFFFFFFFF]
cpu0.write_unknown_regs_at_exception=0                # (bool  , init-time) default = '0'      : Do we write registers when they become UNKNOWN at exception or exception-return.
cpu0.unknown_regs_at_exception_value=0x0              # (int   , init-time) default = '0x0'    : Data used to fill registers when they become UNKNOWN at exception and exception-return. : [0x0..0xFFFFFFFF]
cpu0.ignore_unpred_SBZSBO=0                           # (bool  , init-time) default = '0'      : Use smaller decoder does not UNDEF some unpredicable SBZ/SBO fields.
cpu0.ignore_unpred_ZeroRegistersInList=0              # (bool  , init-time) default = '0'      : VLDM,VSTM,STM,LDM with no registers NOP instead of UNDEF.
cpu0.unpred_msr_psr_with_zero_mask_is_nop=0           # (bool  , init-time) default = '0'      : If true, MSR to *PSR with a zero mask does nothing.
cpu0.unpred_msr_psr_with_one_mask_and_nodsp_is_nop=1  # (bool  , init-time) default = '1'      : If true, MSR to *PSR with a one mask and no DSP does nothing.
cpu0.abort_unaligned_nonNormal=1                      # (bool  , init-time) default = '1'      : If true, UNPREDICTABLE accesses of device and strongly ordered memory abort; if false they are allowed.
cpu0.has_ahbp=1                                       # (bool  , init-time) default = '1'      : Are Vendor-Sys accesses sent to a separate bus (AHBP on CM7).
cpu0.has_separate_etm_reset=0                         # (bool  , init-time) default = '0'      : If true, signal 'etmreset' resets the core, else the core power-on-reset does
cpu0.share_fault_address_reg=0                        # (bool  , init-time) default = '0'      : If true, Fault Address Register is shared
cpu0.clear_non_secure_EXC_RETURN.ES_on_tailchain=1    # (bool  , init-time) default = '1'      : Clear EXC_RETURN.ES in LR value on entry to a tail-chained exception when returning from Non-secure state
fvp_mps2.SCC_ID.AN=0x0                                # (int   , init-time) default = '0x0'    : SCC_ID[15:4], Primary part number i.e. Application Note number : [0x0..0xFFF]
fvp_mps2.SCC_ID.Variant=0x0                           # (int   , init-time) default = '0x0'    : SCC_ID[23:20], X in the FGPA version 'rXpY' : [0x0..0xF]
fvp_mps2.SCC_ID.Revision=0x1                          # (int   , init-time) default = '0x1'    : SCC_ID[3:0], Y in the FGPA version 'rXpY' : [0x0..0xF]
fvp_mps2.iotss_systemcontrol.cpu0wait=0               # (bool  , init-time) default = '0'      : Whether to hold cpu0 in reset at boot
fvp_mps2.iotss_systemcontrol.cpu1wait=1               # (bool  , init-time) default = '1'      : Whether to hold cpu1 in reset at boot
fvp_mps2.platform_type=0x0                            # (int   , init-time) default = '0x0'    : 0:MPS2 ; 1:IoT Kit ; 2:Castor : [0x0..0x2]
fvp_mps2.DISABLE_GATING=1                             # (bool  , init-time) default = '0'      : Disable Memory gating logic
idau.NUM_IDAU_REGION=0x0                              # (int   , init-time) default = '0xA'    : 
fvp_mps2.UART2.out_file=""                            # (string, init-time) default = ''       : Output file to hold data written by the UART (use '-' to send all output to stdout)
fvp_mps2.UART2.in_file=""                             # (string, init-time) default = ''       : Input file for data to be read by the UART
fvp_mps2.UART2.unbuffered_output=0                    # (bool  , init-time) default = '0'      : Unbuffered output
fvp_mps2.UART2.in_file_escape_sequence="##"           # (string, init-time) default = '##'     : Input file escape sequence
fvp_mps2.UART2.shutdown_on_eot=0                      # (bool  , init-time) default = '0'      : Shutdown simulation when a EOT (ASCII 4) char is transmitted (useful for regression tests when semihosting is not available)
fvp_mps2.UART2.shutdown_tag=""                        # (string, run-time ) default = ''       : Shutdown simulation when a string is transmitted
fvp_mps2.UART1.out_file=""                            # (string, init-time) default = ''       : Output file to hold data written by the UART (use '-' to send all output to stdout)
fvp_mps2.UART1.in_file=""                             # (string, init-time) default = ''       : Input file for data to be read by the UART
fvp_mps2.UART1.unbuffered_output=0                    # (bool  , init-time) default = '0'      : Unbuffered output
fvp_mps2.UART1.in_file_escape_sequence="##"           # (string, init-time) default = '##'     : Input file escape sequence
fvp_mps2.UART1.shutdown_on_eot=0                      # (bool  , init-time) default = '0'      : Shutdown simulation when a EOT (ASCII 4) char is transmitted (useful for regression tests when semihosting is not available)
fvp_mps2.UART1.shutdown_tag=""                        # (string, run-time ) default = ''       : Shutdown simulation when a string is transmitted
fvp_mps2.mps2_visualisation.rate_limit-enable=1       # (bool  , init-time) default = '1'      : Rate limit simulation.
fvp_mps2.mps2_visualisation.disable-visualisation=0   # (bool  , init-time) default = '0'      : Enable/disable visualisation
fvp_mps2.mps2_visualisation.window_title="CLCD %cpu%"  # (string, init-time) default = 'CLCD %cpu%' : Window title (%cpu% is replaced by cpu_name)
fvp_mps2.mps2_visualisation.idler.delay_ms=0x32       # (int   , init-time) default = '0x32'   : Determines the period, in milliseconds of real time, between gui_callback() calls.
fvp_mps2.telnetterminal0.mode="telnet"                # (string, init-time) default = 'telnet' : Terminal initialisation mode
fvp_mps2.telnetterminal0.start_telnet=1               # (bool  , init-time) default = '1'      : Start telnet if nothing connected
fvp_mps2.telnetterminal0.start_port=0x1388            # (int   , init-time) default = '0x1388' : Telnet TCP Port Number : [0x0..0xFFFFFFFF]
fvp_mps2.telnetterminal0.quiet=0                      # (bool  , init-time) default = '0'      : Avoid output on stdout/stderr
fvp_mps2.telnetterminal0.terminal_command=""          # (string, init-time) default = ''       : Commandline to launch a terminal application and connect to the opened TCP port. Keywords %port and %title will be replaced with the opened port number and component name respectively. An empty string (default behaviour) will launch xterm (Linux) or telnet.exe (Windows)
fvp_mps2.telnetterminal1.mode="telnet"                # (string, init-time) default = 'telnet' : Terminal initialisation mode
fvp_mps2.telnetterminal1.start_telnet=1               # (bool  , init-time) default = '1'      : Start telnet if nothing connected
fvp_mps2.telnetterminal1.start_port=0x1388            # (int   , init-time) default = '0x1388' : Telnet TCP Port Number : [0x0..0xFFFFFFFF]
fvp_mps2.telnetterminal1.quiet=0                      # (bool  , init-time) default = '0'      : Avoid output on stdout/stderr
fvp_mps2.telnetterminal1.terminal_command=""          # (string, init-time) default = ''       : Commandline to launch a terminal application and connect to the opened TCP port. Keywords %port and %title will be replaced with the opened port number and component name respectively. An empty string (default behaviour) will launch xterm (Linux) or telnet.exe (Windows)
fvp_mps2.telnetterminal2.mode="telnet"                # (string, init-time) default = 'telnet' : Terminal initialisation mode
fvp_mps2.telnetterminal2.start_telnet=1               # (bool  , init-time) default = '1'      : Start telnet if nothing connected
fvp_mps2.telnetterminal2.start_port=0x1388            # (int   , init-time) default = '0x1388' : Telnet TCP Port Number : [0x0..0xFFFFFFFF]
fvp_mps2.telnetterminal2.quiet=0                      # (bool  , init-time) default = '0'      : Avoid output on stdout/stderr
fvp_mps2.telnetterminal2.terminal_command=""          # (string, init-time) default = ''       : Commandline to launch a terminal application and connect to the opened TCP port. Keywords %port and %title will be replaced with the opened port number and component name respectively. An empty string (default behaviour) will launch xterm (Linux) or telnet.exe (Windows)
fvp_mps2.PSRAM_M7.size=0x100000000                    # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.PSRAM_M7.fill1=0xDFDFDFCF                    # (int   , init-time) default = '0xDFDFDFCF' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.PSRAM_M7.fill2=0xCFDFDFDF                    # (int   , init-time) default = '0xCFDFDFDF' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.UART0.out_file=""                            # (string, init-time) default = ''       : Output file to hold data written by the UART (use '-' to send all output to stdout)
fvp_mps2.UART0.in_file=""                             # (string, init-time) default = ''       : Input file for data to be read by the UART
fvp_mps2.UART0.unbuffered_output=0                    # (bool  , init-time) default = '0'      : Unbuffered output
fvp_mps2.UART0.in_file_escape_sequence="##"           # (string, init-time) default = '##'     : Input file escape sequence
fvp_mps2.UART0.shutdown_on_eot=0                      # (bool  , init-time) default = '0'      : Shutdown simulation when a EOT (ASCII 4) char is transmitted (useful for regression tests when semihosting is not available)
fvp_mps2.UART0.shutdown_tag=""                        # (string, run-time ) default = ''       : Shutdown simulation when a string is transmitted
fvp_mps2.cmsdk_watchdog.simhalt=0                     # (bool  , run-time ) default = '0'      : Halt on reset.
fvp_mps2.sse200.s32k_watchdog.simhalt=0               # (bool  , run-time ) default = '0'      : Halt on reset.
fvp_mps2.sse200.secure_watchdog.simhalt=0             # (bool  , run-time ) default = '0'      : Halt on reset.
fvp_mps2.sse200.nonsecure_watchdog.simhalt=0          # (bool  , run-time ) default = '0'      : Halt on reset.
fvp_mps2.PSRAM.size=0x100000000                       # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.PSRAM.fill1=0xDFDFDFCF                       # (int   , init-time) default = '0xDFDFDFCF' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.PSRAM.fill2=0xCFDFDFDF                       # (int   , init-time) default = '0xCFDFDFDF' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.ssram2.size=0x100000000                      # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.ssram2.fill1=0xDFDFDFCF                      # (int   , init-time) default = '0xDFDFDFCF' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.ssram2.fill2=0xCFDFDFDF                      # (int   , init-time) default = '0xCFDFDFDF' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.ssram1.size=0x100000000                      # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.ssram1.fill1=0xDFDFDFCF                      # (int   , init-time) default = '0xDFDFDFCF' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.ssram1.fill2=0xCFDFDFDF                      # (int   , init-time) default = '0xCFDFDFDF' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram0.size=0x100000000  # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.sse200.iotss_internal_sram0.fill1=0xDFDFDFCF  # (int   , init-time) default = '0xDFDFDFCF' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram0.fill2=0xCFDFDFDF  # (int   , init-time) default = '0xCFDFDFDF' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram1.size=0x100000000  # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.sse200.iotss_internal_sram1.fill1=0xDFDFDFCF  # (int   , init-time) default = '0xDFDFDFCF' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram1.fill2=0xCFDFDFDF  # (int   , init-time) default = '0xCFDFDFDF' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram2.size=0x100000000  # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.sse200.iotss_internal_sram2.fill1=0xDFDFDFCF  # (int   , init-time) default = '0xDFDFDFCF' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram2.fill2=0xCFDFDFDF  # (int   , init-time) default = '0xCFDFDFDF' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram3.size=0x100000000  # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.sse200.iotss_internal_sram3.fill1=0xDFDFDFCF  # (int   , init-time) default = '0xDFDFDFCF' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram3.fill2=0xCFDFDFDF  # (int   , init-time) default = '0xCFDFDFDF' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.sys_ppu.use_active_signal=0           # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.sys_ppu.revision="r0p0"               # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.cpu0core_ppu.revision="r0p0"          # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.cpu0dbg_ppu.revision="r0p0"           # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.cpu1core_ppu.use_active_signal=0      # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.cpu1core_ppu.revision="r0p0"          # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.cpu1dbg_ppu.use_active_signal=0       # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.cpu1dbg_ppu.revision="r0p0"           # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.crypto_ppu.use_active_signal=0        # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.crypto_ppu.revision="r0p0"            # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.cordio_ppu.use_active_signal=0        # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.cordio_ppu.revision="r0p0"            # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.dbg_ppu.use_active_signal=0           # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.dbg_ppu.revision="r0p0"               # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.ram0_ppu.use_active_signal=0          # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.ram0_ppu.revision="r0p0"              # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.ram1_ppu.use_active_signal=0          # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.ram1_ppu.revision="r0p0"              # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.ram2_ppu.use_active_signal=0          # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.ram2_ppu.revision="r0p0"              # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.ram3_ppu.use_active_signal=0          # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.ram3_ppu.revision="r0p0"              # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.smsc_91c111.enabled=0                        # (bool  , init-time) default = '0'      : Host interface connection enabled
fvp_mps2.smsc_91c111.mac_address="00:02:f7:ef:5d:a2"  # (string, init-time) default = '00:02:f7:ef:5d:a2' : Host/model MAC address
fvp_mps2.smsc_91c111.promiscuous=1                    # (bool  , init-time) default = '1'      : Put host into promiscuous mode
fvp_mps2.hostbridge.interfaceName="ARM0"              # (string, init-time) default = 'ARM0'   : Host Interface
fvp_mps2.hostbridge.userNetworking=0                  # (bool  , init-time) default = '0'      : Enable user-mode networking
fvp_mps2.hostbridge.userNetSubnet="172.20.51.0/24"    # (string, init-time) default = '172.20.51.0/24' : Virtual subnet for user-mode networking
fvp_mps2.hostbridge.userNetPorts=""                   # (string, init-time) default = ''       : Listening ports to expose in user-mode networking
fvp_mps2.mps2_secure_control_register_block.FLASH_BLOCK_CFG=0x3  # (int   , init-time) default = '0x3'    : Flash Block size configuration : [0x0..0x31]
fvp_mps2.mps2_secure_control_register_block.SRAM_BLOCK_CFG=0x3  # (int   , init-time) default = '0x3'    : SRAM Block size configuration : [0x0..0x31]
fvp_mps2.mps2_secure_control_register_block.FLASH_WATERMARK_SUPPORTED=1  # (bool  , init-time) default = '1'      : Flash Watermark supported
fvp_mps2.mps2_secure_control_register_block.SRAM_WATERMARK_SUPPORTED=1  # (bool  , init-time) default = '1'      : SRAM Watermark supported
fvp_mps2.exclusive_monitor_zbtsram1.enable_component=1  # (bool  , init-time) default = '1'      : Enable component
fvp_mps2.exclusive_monitor_zbtsram1.number_of_monitors=0x8  # (int   , init-time) default = '0x8'    : Number of monitors : [0x1..0xFFFFFFFF]
fvp_mps2.exclusive_monitor_zbtsram1.log2_granule_size=0x0  # (int   , init-time) default = '0x0'    : log2 of address granule size : [0x0..0xB]
fvp_mps2.exclusive_monitor_zbtsram1.monitor_non_excl_stores=0  # (bool  , init-time) default = '0'      : Monitor non-exclusive stores from the same master
fvp_mps2.exclusive_monitor_zbtsram1.match_secure_state=1  # (bool  , init-time) default = '1'      : Treat the secure state like an address bit
fvp_mps2.exclusive_monitor_zbtsram1.shareability_domain=0x3  # (int   , init-time) default = '0x3'    : Maximum shareability domain of interest, transactions outside of the domain will pass through un-monitored (0-non-shared, 1-inner, 2-outer, 3-system) : [0x0..0x3]
fvp_mps2.exclusive_monitor_zbtsram1.apply_access_width_criteria_to_non_excl_stores=1  # (bool  , init-time) default = '1'      : Apply the given exclusive store width matching criteria to non-exclusive stores
fvp_mps2.exclusive_monitor_zbtsram2.enable_component=1  # (bool  , init-time) default = '1'      : Enable component
fvp_mps2.exclusive_monitor_zbtsram2.number_of_monitors=0x8  # (int   , init-time) default = '0x8'    : Number of monitors : [0x1..0xFFFFFFFF]
fvp_mps2.exclusive_monitor_zbtsram2.log2_granule_size=0x0  # (int   , init-time) default = '0x0'    : log2 of address granule size : [0x0..0xB]
fvp_mps2.exclusive_monitor_zbtsram2.monitor_non_excl_stores=0  # (bool  , init-time) default = '0'      : Monitor non-exclusive stores from the same master
fvp_mps2.exclusive_monitor_zbtsram2.match_secure_state=1  # (bool  , init-time) default = '1'      : Treat the secure state like an address bit
fvp_mps2.exclusive_monitor_zbtsram2.shareability_domain=0x3  # (int   , init-time) default = '0x3'    : Maximum shareability domain of interest, transactions outside of the domain will pass through un-monitored (0-non-shared, 1-inner, 2-outer, 3-system) : [0x0..0x3]
fvp_mps2.exclusive_monitor_zbtsram2.apply_access_width_criteria_to_non_excl_stores=1  # (bool  , init-time) default = '1'      : Apply the given exclusive store width matching criteria to non-exclusive stores
fvp_mps2.dma0_securitymodifier.behaviour_ns_to_s=0x0  # (int   , init-time) default = '0x0'    : Behaviour for NS transactions to S space : 0:block 1:transmit 2:convert to S
fvp_mps2.dma1_securitymodifier.behaviour_ns_to_s=0x0  # (int   , init-time) default = '0x0'    : Behaviour for NS transactions to S space : 0:block 1:transmit 2:convert to S
fvp_mps2.dma2_securitymodifier.behaviour_ns_to_s=0x0  # (int   , init-time) default = '0x0'    : Behaviour for NS transactions to S space : 0:block 1:transmit 2:convert to S
fvp_mps2.dma3_securitymodifier.behaviour_ns_to_s=0x0  # (int   , init-time) default = '0x0'    : Behaviour for NS transactions to S space : 0:block 1:transmit 2:convert to S
fvp_mps2.dma0.fifo_size=0x10                          # (int   , init-time) default = '0x10'   : Channel FIFO size in bytes
fvp_mps2.dma0.max_transfer=0x100                      # (int   , init-time) default = '0x100'  : Largest atomic transfer
fvp_mps2.dma0.generate_clear=0                        # (bool  , init-time) default = '0'      : Generate clear response
fvp_mps2.dma0.activate_delay=0x0                      # (int   , init-time) default = '0x0'    : request delay
fvp_mps2.dma1.fifo_size=0x10                          # (int   , init-time) default = '0x10'   : Channel FIFO size in bytes
fvp_mps2.dma1.max_transfer=0x100                      # (int   , init-time) default = '0x100'  : Largest atomic transfer
fvp_mps2.dma1.generate_clear=0                        # (bool  , init-time) default = '0'      : Generate clear response
fvp_mps2.dma1.activate_delay=0x0                      # (int   , init-time) default = '0x0'    : request delay
fvp_mps2.dma2.fifo_size=0x10                          # (int   , init-time) default = '0x10'   : Channel FIFO size in bytes
fvp_mps2.dma2.max_transfer=0x100                      # (int   , init-time) default = '0x100'  : Largest atomic transfer
fvp_mps2.dma2.generate_clear=0                        # (bool  , init-time) default = '0'      : Generate clear response
fvp_mps2.dma2.activate_delay=0x0                      # (int   , init-time) default = '0x0'    : request delay
fvp_mps2.dma3.fifo_size=0x10                          # (int   , init-time) default = '0x10'   : Channel FIFO size in bytes
fvp_mps2.dma3.max_transfer=0x100                      # (int   , init-time) default = '0x100'  : Largest atomic transfer
fvp_mps2.dma3.generate_clear=0                        # (bool  , init-time) default = '0'      : Generate clear response
fvp_mps2.dma3.activate_delay=0x0                      # (int   , init-time) default = '0x0'    : request delay
fvp_mps2.sse200.iotss_cpuidentity.debugger_master_id=0xFFFFFFFF  # (int   , init-time) default = '0xFFFFFFFF' :  : [0x0..0xFFFFFFFF]
aborting_warning_memory.read_data=0x0                 # (int   , init-time) default = '0x0'    : Data to return on reads, if not aborting
#----------------------------------------------------------------------------------------------
